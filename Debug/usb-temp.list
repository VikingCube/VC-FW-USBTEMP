
usb-temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc4  08005cc4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08005cc4  08005cc4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cc4  08005cc4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc4  08005cc4  00015cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08005ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  2000017c  08005e48  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d1c  08005e48  00020d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011227  00000000  00000000  000201e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003617  00000000  00000000  0003140e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00006517  00000000  00000000  00034a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b78  00000000  00000000  0003af3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a64  00000000  00000000  0003bab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a969  00000000  00000000  0003c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a82  00000000  00000000  00056e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008c291  00000000  00000000  0006b903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d84  00000000  00000000  000f7b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005bd4 	.word	0x08005bd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08005bd4 	.word	0x08005bd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_f2uiz>:
 80003f4:	219e      	movs	r1, #158	; 0x9e
 80003f6:	b510      	push	{r4, lr}
 80003f8:	05c9      	lsls	r1, r1, #23
 80003fa:	1c04      	adds	r4, r0, #0
 80003fc:	f000 ff10 	bl	8001220 <__aeabi_fcmpge>
 8000400:	2800      	cmp	r0, #0
 8000402:	d103      	bne.n	800040c <__aeabi_f2uiz+0x18>
 8000404:	1c20      	adds	r0, r4, #0
 8000406:	f000 fafb 	bl	8000a00 <__aeabi_f2iz>
 800040a:	bd10      	pop	{r4, pc}
 800040c:	219e      	movs	r1, #158	; 0x9e
 800040e:	1c20      	adds	r0, r4, #0
 8000410:	05c9      	lsls	r1, r1, #23
 8000412:	f000 f955 	bl	80006c0 <__aeabi_fsub>
 8000416:	f000 faf3 	bl	8000a00 <__aeabi_f2iz>
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	061b      	lsls	r3, r3, #24
 800041e:	469c      	mov	ip, r3
 8000420:	4460      	add	r0, ip
 8000422:	e7f2      	b.n	800040a <__aeabi_f2uiz+0x16>

08000424 <__aeabi_fmul>:
 8000424:	0243      	lsls	r3, r0, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	464f      	mov	r7, r9
 800042c:	4646      	mov	r6, r8
 800042e:	4699      	mov	r9, r3
 8000430:	46d6      	mov	lr, sl
 8000432:	0fc3      	lsrs	r3, r0, #31
 8000434:	0045      	lsls	r5, r0, #1
 8000436:	4698      	mov	r8, r3
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	464b      	mov	r3, r9
 800043c:	1c0f      	adds	r7, r1, #0
 800043e:	0e2d      	lsrs	r5, r5, #24
 8000440:	d100      	bne.n	8000444 <__aeabi_fmul+0x20>
 8000442:	e0cb      	b.n	80005dc <__aeabi_fmul+0x1b8>
 8000444:	2dff      	cmp	r5, #255	; 0xff
 8000446:	d100      	bne.n	800044a <__aeabi_fmul+0x26>
 8000448:	e0cf      	b.n	80005ea <__aeabi_fmul+0x1c6>
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	04d2      	lsls	r2, r2, #19
 8000450:	431a      	orrs	r2, r3
 8000452:	2300      	movs	r3, #0
 8000454:	4691      	mov	r9, r2
 8000456:	2600      	movs	r6, #0
 8000458:	469a      	mov	sl, r3
 800045a:	3d7f      	subs	r5, #127	; 0x7f
 800045c:	027c      	lsls	r4, r7, #9
 800045e:	007b      	lsls	r3, r7, #1
 8000460:	0a64      	lsrs	r4, r4, #9
 8000462:	0e1b      	lsrs	r3, r3, #24
 8000464:	0fff      	lsrs	r7, r7, #31
 8000466:	2b00      	cmp	r3, #0
 8000468:	d100      	bne.n	800046c <__aeabi_fmul+0x48>
 800046a:	e0a9      	b.n	80005c0 <__aeabi_fmul+0x19c>
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d011      	beq.n	8000494 <__aeabi_fmul+0x70>
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	00e4      	lsls	r4, r4, #3
 8000474:	04d2      	lsls	r2, r2, #19
 8000476:	4314      	orrs	r4, r2
 8000478:	4642      	mov	r2, r8
 800047a:	3b7f      	subs	r3, #127	; 0x7f
 800047c:	195b      	adds	r3, r3, r5
 800047e:	407a      	eors	r2, r7
 8000480:	2000      	movs	r0, #0
 8000482:	b2d2      	uxtb	r2, r2
 8000484:	1c5d      	adds	r5, r3, #1
 8000486:	2e0a      	cmp	r6, #10
 8000488:	dd13      	ble.n	80004b2 <__aeabi_fmul+0x8e>
 800048a:	003a      	movs	r2, r7
 800048c:	2e0b      	cmp	r6, #11
 800048e:	d047      	beq.n	8000520 <__aeabi_fmul+0xfc>
 8000490:	4647      	mov	r7, r8
 8000492:	e03f      	b.n	8000514 <__aeabi_fmul+0xf0>
 8000494:	002b      	movs	r3, r5
 8000496:	33ff      	adds	r3, #255	; 0xff
 8000498:	2c00      	cmp	r4, #0
 800049a:	d11e      	bne.n	80004da <__aeabi_fmul+0xb6>
 800049c:	2202      	movs	r2, #2
 800049e:	4316      	orrs	r6, r2
 80004a0:	4642      	mov	r2, r8
 80004a2:	3501      	adds	r5, #1
 80004a4:	407a      	eors	r2, r7
 80004a6:	b2d2      	uxtb	r2, r2
 80004a8:	35ff      	adds	r5, #255	; 0xff
 80004aa:	2e0a      	cmp	r6, #10
 80004ac:	dd00      	ble.n	80004b0 <__aeabi_fmul+0x8c>
 80004ae:	e0e4      	b.n	800067a <__aeabi_fmul+0x256>
 80004b0:	2002      	movs	r0, #2
 80004b2:	2e02      	cmp	r6, #2
 80004b4:	dc1c      	bgt.n	80004f0 <__aeabi_fmul+0xcc>
 80004b6:	3e01      	subs	r6, #1
 80004b8:	2e01      	cmp	r6, #1
 80004ba:	d842      	bhi.n	8000542 <__aeabi_fmul+0x11e>
 80004bc:	2802      	cmp	r0, #2
 80004be:	d03d      	beq.n	800053c <__aeabi_fmul+0x118>
 80004c0:	2801      	cmp	r0, #1
 80004c2:	d166      	bne.n	8000592 <__aeabi_fmul+0x16e>
 80004c4:	2000      	movs	r0, #0
 80004c6:	2100      	movs	r1, #0
 80004c8:	05c0      	lsls	r0, r0, #23
 80004ca:	4308      	orrs	r0, r1
 80004cc:	07d2      	lsls	r2, r2, #31
 80004ce:	4310      	orrs	r0, r2
 80004d0:	bce0      	pop	{r5, r6, r7}
 80004d2:	46ba      	mov	sl, r7
 80004d4:	46b1      	mov	r9, r6
 80004d6:	46a8      	mov	r8, r5
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	2203      	movs	r2, #3
 80004dc:	4316      	orrs	r6, r2
 80004de:	4642      	mov	r2, r8
 80004e0:	3501      	adds	r5, #1
 80004e2:	407a      	eors	r2, r7
 80004e4:	b2d2      	uxtb	r2, r2
 80004e6:	35ff      	adds	r5, #255	; 0xff
 80004e8:	2e0a      	cmp	r6, #10
 80004ea:	dd00      	ble.n	80004ee <__aeabi_fmul+0xca>
 80004ec:	e0e4      	b.n	80006b8 <__aeabi_fmul+0x294>
 80004ee:	2003      	movs	r0, #3
 80004f0:	2101      	movs	r1, #1
 80004f2:	40b1      	lsls	r1, r6
 80004f4:	26a6      	movs	r6, #166	; 0xa6
 80004f6:	00f6      	lsls	r6, r6, #3
 80004f8:	4231      	tst	r1, r6
 80004fa:	d10a      	bne.n	8000512 <__aeabi_fmul+0xee>
 80004fc:	2690      	movs	r6, #144	; 0x90
 80004fe:	00b6      	lsls	r6, r6, #2
 8000500:	4231      	tst	r1, r6
 8000502:	d116      	bne.n	8000532 <__aeabi_fmul+0x10e>
 8000504:	3eb9      	subs	r6, #185	; 0xb9
 8000506:	3eff      	subs	r6, #255	; 0xff
 8000508:	420e      	tst	r6, r1
 800050a:	d01a      	beq.n	8000542 <__aeabi_fmul+0x11e>
 800050c:	46a1      	mov	r9, r4
 800050e:	4682      	mov	sl, r0
 8000510:	e000      	b.n	8000514 <__aeabi_fmul+0xf0>
 8000512:	0017      	movs	r7, r2
 8000514:	4653      	mov	r3, sl
 8000516:	003a      	movs	r2, r7
 8000518:	2b02      	cmp	r3, #2
 800051a:	d00f      	beq.n	800053c <__aeabi_fmul+0x118>
 800051c:	464c      	mov	r4, r9
 800051e:	4650      	mov	r0, sl
 8000520:	2803      	cmp	r0, #3
 8000522:	d1cd      	bne.n	80004c0 <__aeabi_fmul+0x9c>
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	03c9      	lsls	r1, r1, #15
 8000528:	4321      	orrs	r1, r4
 800052a:	0249      	lsls	r1, r1, #9
 800052c:	20ff      	movs	r0, #255	; 0xff
 800052e:	0a49      	lsrs	r1, r1, #9
 8000530:	e7ca      	b.n	80004c8 <__aeabi_fmul+0xa4>
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	2200      	movs	r2, #0
 8000536:	20ff      	movs	r0, #255	; 0xff
 8000538:	03c9      	lsls	r1, r1, #15
 800053a:	e7c5      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800053c:	20ff      	movs	r0, #255	; 0xff
 800053e:	2100      	movs	r1, #0
 8000540:	e7c2      	b.n	80004c8 <__aeabi_fmul+0xa4>
 8000542:	0c20      	lsrs	r0, r4, #16
 8000544:	4649      	mov	r1, r9
 8000546:	0424      	lsls	r4, r4, #16
 8000548:	0c24      	lsrs	r4, r4, #16
 800054a:	0027      	movs	r7, r4
 800054c:	0c0e      	lsrs	r6, r1, #16
 800054e:	0409      	lsls	r1, r1, #16
 8000550:	0c09      	lsrs	r1, r1, #16
 8000552:	4374      	muls	r4, r6
 8000554:	434f      	muls	r7, r1
 8000556:	4346      	muls	r6, r0
 8000558:	4348      	muls	r0, r1
 800055a:	0c39      	lsrs	r1, r7, #16
 800055c:	1900      	adds	r0, r0, r4
 800055e:	1809      	adds	r1, r1, r0
 8000560:	428c      	cmp	r4, r1
 8000562:	d903      	bls.n	800056c <__aeabi_fmul+0x148>
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	0240      	lsls	r0, r0, #9
 8000568:	4684      	mov	ip, r0
 800056a:	4466      	add	r6, ip
 800056c:	043f      	lsls	r7, r7, #16
 800056e:	0408      	lsls	r0, r1, #16
 8000570:	0c3f      	lsrs	r7, r7, #16
 8000572:	19c0      	adds	r0, r0, r7
 8000574:	0184      	lsls	r4, r0, #6
 8000576:	1e67      	subs	r7, r4, #1
 8000578:	41bc      	sbcs	r4, r7
 800057a:	0c09      	lsrs	r1, r1, #16
 800057c:	0e80      	lsrs	r0, r0, #26
 800057e:	1989      	adds	r1, r1, r6
 8000580:	4304      	orrs	r4, r0
 8000582:	0189      	lsls	r1, r1, #6
 8000584:	430c      	orrs	r4, r1
 8000586:	0109      	lsls	r1, r1, #4
 8000588:	d571      	bpl.n	800066e <__aeabi_fmul+0x24a>
 800058a:	2301      	movs	r3, #1
 800058c:	0861      	lsrs	r1, r4, #1
 800058e:	401c      	ands	r4, r3
 8000590:	430c      	orrs	r4, r1
 8000592:	002b      	movs	r3, r5
 8000594:	337f      	adds	r3, #127	; 0x7f
 8000596:	2b00      	cmp	r3, #0
 8000598:	dd51      	ble.n	800063e <__aeabi_fmul+0x21a>
 800059a:	0761      	lsls	r1, r4, #29
 800059c:	d004      	beq.n	80005a8 <__aeabi_fmul+0x184>
 800059e:	210f      	movs	r1, #15
 80005a0:	4021      	ands	r1, r4
 80005a2:	2904      	cmp	r1, #4
 80005a4:	d000      	beq.n	80005a8 <__aeabi_fmul+0x184>
 80005a6:	3404      	adds	r4, #4
 80005a8:	0121      	lsls	r1, r4, #4
 80005aa:	d503      	bpl.n	80005b4 <__aeabi_fmul+0x190>
 80005ac:	4b43      	ldr	r3, [pc, #268]	; (80006bc <__aeabi_fmul+0x298>)
 80005ae:	401c      	ands	r4, r3
 80005b0:	002b      	movs	r3, r5
 80005b2:	3380      	adds	r3, #128	; 0x80
 80005b4:	2bfe      	cmp	r3, #254	; 0xfe
 80005b6:	dcc1      	bgt.n	800053c <__aeabi_fmul+0x118>
 80005b8:	01a1      	lsls	r1, r4, #6
 80005ba:	0a49      	lsrs	r1, r1, #9
 80005bc:	b2d8      	uxtb	r0, r3
 80005be:	e783      	b.n	80004c8 <__aeabi_fmul+0xa4>
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	d12c      	bne.n	800061e <__aeabi_fmul+0x1fa>
 80005c4:	2301      	movs	r3, #1
 80005c6:	4642      	mov	r2, r8
 80005c8:	431e      	orrs	r6, r3
 80005ca:	002b      	movs	r3, r5
 80005cc:	407a      	eors	r2, r7
 80005ce:	2001      	movs	r0, #1
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	1c5d      	adds	r5, r3, #1
 80005d4:	2e0a      	cmp	r6, #10
 80005d6:	dd00      	ble.n	80005da <__aeabi_fmul+0x1b6>
 80005d8:	e757      	b.n	800048a <__aeabi_fmul+0x66>
 80005da:	e76a      	b.n	80004b2 <__aeabi_fmul+0x8e>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d110      	bne.n	8000602 <__aeabi_fmul+0x1de>
 80005e0:	2301      	movs	r3, #1
 80005e2:	2604      	movs	r6, #4
 80005e4:	2500      	movs	r5, #0
 80005e6:	469a      	mov	sl, r3
 80005e8:	e738      	b.n	800045c <__aeabi_fmul+0x38>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fmul+0x1d4>
 80005ee:	2302      	movs	r3, #2
 80005f0:	2608      	movs	r6, #8
 80005f2:	25ff      	movs	r5, #255	; 0xff
 80005f4:	469a      	mov	sl, r3
 80005f6:	e731      	b.n	800045c <__aeabi_fmul+0x38>
 80005f8:	2303      	movs	r3, #3
 80005fa:	260c      	movs	r6, #12
 80005fc:	25ff      	movs	r5, #255	; 0xff
 80005fe:	469a      	mov	sl, r3
 8000600:	e72c      	b.n	800045c <__aeabi_fmul+0x38>
 8000602:	4648      	mov	r0, r9
 8000604:	f000 fe16 	bl	8001234 <__clzsi2>
 8000608:	464a      	mov	r2, r9
 800060a:	1f43      	subs	r3, r0, #5
 800060c:	2576      	movs	r5, #118	; 0x76
 800060e:	409a      	lsls	r2, r3
 8000610:	2300      	movs	r3, #0
 8000612:	426d      	negs	r5, r5
 8000614:	4691      	mov	r9, r2
 8000616:	2600      	movs	r6, #0
 8000618:	469a      	mov	sl, r3
 800061a:	1a2d      	subs	r5, r5, r0
 800061c:	e71e      	b.n	800045c <__aeabi_fmul+0x38>
 800061e:	0020      	movs	r0, r4
 8000620:	f000 fe08 	bl	8001234 <__clzsi2>
 8000624:	4642      	mov	r2, r8
 8000626:	1f43      	subs	r3, r0, #5
 8000628:	409c      	lsls	r4, r3
 800062a:	1a2b      	subs	r3, r5, r0
 800062c:	3b76      	subs	r3, #118	; 0x76
 800062e:	407a      	eors	r2, r7
 8000630:	2000      	movs	r0, #0
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	1c5d      	adds	r5, r3, #1
 8000636:	2e0a      	cmp	r6, #10
 8000638:	dd00      	ble.n	800063c <__aeabi_fmul+0x218>
 800063a:	e726      	b.n	800048a <__aeabi_fmul+0x66>
 800063c:	e739      	b.n	80004b2 <__aeabi_fmul+0x8e>
 800063e:	2101      	movs	r1, #1
 8000640:	1acb      	subs	r3, r1, r3
 8000642:	2b1b      	cmp	r3, #27
 8000644:	dd00      	ble.n	8000648 <__aeabi_fmul+0x224>
 8000646:	e73d      	b.n	80004c4 <__aeabi_fmul+0xa0>
 8000648:	359e      	adds	r5, #158	; 0x9e
 800064a:	0021      	movs	r1, r4
 800064c:	40ac      	lsls	r4, r5
 800064e:	40d9      	lsrs	r1, r3
 8000650:	1e63      	subs	r3, r4, #1
 8000652:	419c      	sbcs	r4, r3
 8000654:	4321      	orrs	r1, r4
 8000656:	074b      	lsls	r3, r1, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fmul+0x240>
 800065a:	230f      	movs	r3, #15
 800065c:	400b      	ands	r3, r1
 800065e:	2b04      	cmp	r3, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fmul+0x240>
 8000662:	3104      	adds	r1, #4
 8000664:	014b      	lsls	r3, r1, #5
 8000666:	d504      	bpl.n	8000672 <__aeabi_fmul+0x24e>
 8000668:	2001      	movs	r0, #1
 800066a:	2100      	movs	r1, #0
 800066c:	e72c      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800066e:	001d      	movs	r5, r3
 8000670:	e78f      	b.n	8000592 <__aeabi_fmul+0x16e>
 8000672:	0189      	lsls	r1, r1, #6
 8000674:	2000      	movs	r0, #0
 8000676:	0a49      	lsrs	r1, r1, #9
 8000678:	e726      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800067a:	2302      	movs	r3, #2
 800067c:	2e0f      	cmp	r6, #15
 800067e:	d10c      	bne.n	800069a <__aeabi_fmul+0x276>
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	464b      	mov	r3, r9
 8000684:	03c9      	lsls	r1, r1, #15
 8000686:	420b      	tst	r3, r1
 8000688:	d00d      	beq.n	80006a6 <__aeabi_fmul+0x282>
 800068a:	420c      	tst	r4, r1
 800068c:	d10b      	bne.n	80006a6 <__aeabi_fmul+0x282>
 800068e:	4321      	orrs	r1, r4
 8000690:	0249      	lsls	r1, r1, #9
 8000692:	003a      	movs	r2, r7
 8000694:	20ff      	movs	r0, #255	; 0xff
 8000696:	0a49      	lsrs	r1, r1, #9
 8000698:	e716      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800069a:	2e0b      	cmp	r6, #11
 800069c:	d000      	beq.n	80006a0 <__aeabi_fmul+0x27c>
 800069e:	e6f7      	b.n	8000490 <__aeabi_fmul+0x6c>
 80006a0:	46a1      	mov	r9, r4
 80006a2:	469a      	mov	sl, r3
 80006a4:	e736      	b.n	8000514 <__aeabi_fmul+0xf0>
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	464b      	mov	r3, r9
 80006aa:	03c9      	lsls	r1, r1, #15
 80006ac:	4319      	orrs	r1, r3
 80006ae:	0249      	lsls	r1, r1, #9
 80006b0:	4642      	mov	r2, r8
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	0a49      	lsrs	r1, r1, #9
 80006b6:	e707      	b.n	80004c8 <__aeabi_fmul+0xa4>
 80006b8:	2303      	movs	r3, #3
 80006ba:	e7df      	b.n	800067c <__aeabi_fmul+0x258>
 80006bc:	f7ffffff 	.word	0xf7ffffff

080006c0 <__aeabi_fsub>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	46c6      	mov	lr, r8
 80006c4:	0243      	lsls	r3, r0, #9
 80006c6:	0a5b      	lsrs	r3, r3, #9
 80006c8:	0045      	lsls	r5, r0, #1
 80006ca:	00da      	lsls	r2, r3, #3
 80006cc:	0fc4      	lsrs	r4, r0, #31
 80006ce:	0248      	lsls	r0, r1, #9
 80006d0:	004f      	lsls	r7, r1, #1
 80006d2:	4694      	mov	ip, r2
 80006d4:	0a42      	lsrs	r2, r0, #9
 80006d6:	001e      	movs	r6, r3
 80006d8:	4690      	mov	r8, r2
 80006da:	b500      	push	{lr}
 80006dc:	0e2d      	lsrs	r5, r5, #24
 80006de:	0e3f      	lsrs	r7, r7, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	0980      	lsrs	r0, r0, #6
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d059      	beq.n	800079c <__aeabi_fsub+0xdc>
 80006e8:	2201      	movs	r2, #1
 80006ea:	4051      	eors	r1, r2
 80006ec:	428c      	cmp	r4, r1
 80006ee:	d039      	beq.n	8000764 <__aeabi_fsub+0xa4>
 80006f0:	1bea      	subs	r2, r5, r7
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	dd58      	ble.n	80007a8 <__aeabi_fsub+0xe8>
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d068      	beq.n	80007cc <__aeabi_fsub+0x10c>
 80006fa:	2dff      	cmp	r5, #255	; 0xff
 80006fc:	d100      	bne.n	8000700 <__aeabi_fsub+0x40>
 80006fe:	e0d1      	b.n	80008a4 <__aeabi_fsub+0x1e4>
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	04db      	lsls	r3, r3, #19
 8000704:	4318      	orrs	r0, r3
 8000706:	2a1b      	cmp	r2, #27
 8000708:	dc00      	bgt.n	800070c <__aeabi_fsub+0x4c>
 800070a:	e0e3      	b.n	80008d4 <__aeabi_fsub+0x214>
 800070c:	2301      	movs	r3, #1
 800070e:	4662      	mov	r2, ip
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	015a      	lsls	r2, r3, #5
 8000714:	d400      	bmi.n	8000718 <__aeabi_fsub+0x58>
 8000716:	e0ac      	b.n	8000872 <__aeabi_fsub+0x1b2>
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	099e      	lsrs	r6, r3, #6
 800071c:	0030      	movs	r0, r6
 800071e:	f000 fd89 	bl	8001234 <__clzsi2>
 8000722:	0033      	movs	r3, r6
 8000724:	3805      	subs	r0, #5
 8000726:	4083      	lsls	r3, r0
 8000728:	4285      	cmp	r5, r0
 800072a:	dc00      	bgt.n	800072e <__aeabi_fsub+0x6e>
 800072c:	e0c6      	b.n	80008bc <__aeabi_fsub+0x1fc>
 800072e:	4ab2      	ldr	r2, [pc, #712]	; (80009f8 <__aeabi_fsub+0x338>)
 8000730:	1a2d      	subs	r5, r5, r0
 8000732:	4013      	ands	r3, r2
 8000734:	075a      	lsls	r2, r3, #29
 8000736:	d004      	beq.n	8000742 <__aeabi_fsub+0x82>
 8000738:	220f      	movs	r2, #15
 800073a:	401a      	ands	r2, r3
 800073c:	2a04      	cmp	r2, #4
 800073e:	d000      	beq.n	8000742 <__aeabi_fsub+0x82>
 8000740:	3304      	adds	r3, #4
 8000742:	015a      	lsls	r2, r3, #5
 8000744:	d400      	bmi.n	8000748 <__aeabi_fsub+0x88>
 8000746:	e097      	b.n	8000878 <__aeabi_fsub+0x1b8>
 8000748:	1c6a      	adds	r2, r5, #1
 800074a:	2dfe      	cmp	r5, #254	; 0xfe
 800074c:	d100      	bne.n	8000750 <__aeabi_fsub+0x90>
 800074e:	e084      	b.n	800085a <__aeabi_fsub+0x19a>
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	0a5e      	lsrs	r6, r3, #9
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	05d0      	lsls	r0, r2, #23
 8000758:	4330      	orrs	r0, r6
 800075a:	07e4      	lsls	r4, r4, #31
 800075c:	4320      	orrs	r0, r4
 800075e:	bc80      	pop	{r7}
 8000760:	46b8      	mov	r8, r7
 8000762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000764:	1bea      	subs	r2, r5, r7
 8000766:	2a00      	cmp	r2, #0
 8000768:	dd41      	ble.n	80007ee <__aeabi_fsub+0x12e>
 800076a:	2f00      	cmp	r7, #0
 800076c:	d06b      	beq.n	8000846 <__aeabi_fsub+0x186>
 800076e:	2dff      	cmp	r5, #255	; 0xff
 8000770:	d100      	bne.n	8000774 <__aeabi_fsub+0xb4>
 8000772:	e097      	b.n	80008a4 <__aeabi_fsub+0x1e4>
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	04db      	lsls	r3, r3, #19
 8000778:	4318      	orrs	r0, r3
 800077a:	2a1b      	cmp	r2, #27
 800077c:	dc00      	bgt.n	8000780 <__aeabi_fsub+0xc0>
 800077e:	e0cc      	b.n	800091a <__aeabi_fsub+0x25a>
 8000780:	2301      	movs	r3, #1
 8000782:	4463      	add	r3, ip
 8000784:	015a      	lsls	r2, r3, #5
 8000786:	d574      	bpl.n	8000872 <__aeabi_fsub+0x1b2>
 8000788:	3501      	adds	r5, #1
 800078a:	2dff      	cmp	r5, #255	; 0xff
 800078c:	d065      	beq.n	800085a <__aeabi_fsub+0x19a>
 800078e:	2201      	movs	r2, #1
 8000790:	499a      	ldr	r1, [pc, #616]	; (80009fc <__aeabi_fsub+0x33c>)
 8000792:	401a      	ands	r2, r3
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	400b      	ands	r3, r1
 8000798:	4313      	orrs	r3, r2
 800079a:	e7cb      	b.n	8000734 <__aeabi_fsub+0x74>
 800079c:	2800      	cmp	r0, #0
 800079e:	d01f      	beq.n	80007e0 <__aeabi_fsub+0x120>
 80007a0:	428c      	cmp	r4, r1
 80007a2:	d022      	beq.n	80007ea <__aeabi_fsub+0x12a>
 80007a4:	002a      	movs	r2, r5
 80007a6:	3aff      	subs	r2, #255	; 0xff
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d035      	beq.n	8000818 <__aeabi_fsub+0x158>
 80007ac:	1b7a      	subs	r2, r7, r5
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fsub+0xf4>
 80007b2:	e099      	b.n	80008e8 <__aeabi_fsub+0x228>
 80007b4:	4663      	mov	r3, ip
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0xfc>
 80007ba:	e0dd      	b.n	8000978 <__aeabi_fsub+0x2b8>
 80007bc:	1e53      	subs	r3, r2, #1
 80007be:	2a01      	cmp	r2, #1
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x104>
 80007c2:	e105      	b.n	80009d0 <__aeabi_fsub+0x310>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d06b      	beq.n	80008a0 <__aeabi_fsub+0x1e0>
 80007c8:	001a      	movs	r2, r3
 80007ca:	e094      	b.n	80008f6 <__aeabi_fsub+0x236>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d073      	beq.n	80008b8 <__aeabi_fsub+0x1f8>
 80007d0:	1e51      	subs	r1, r2, #1
 80007d2:	2a01      	cmp	r2, #1
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fsub+0x118>
 80007d6:	e0df      	b.n	8000998 <__aeabi_fsub+0x2d8>
 80007d8:	2aff      	cmp	r2, #255	; 0xff
 80007da:	d063      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 80007dc:	000a      	movs	r2, r1
 80007de:	e792      	b.n	8000706 <__aeabi_fsub+0x46>
 80007e0:	2201      	movs	r2, #1
 80007e2:	4051      	eors	r1, r2
 80007e4:	42a1      	cmp	r1, r4
 80007e6:	d000      	beq.n	80007ea <__aeabi_fsub+0x12a>
 80007e8:	e782      	b.n	80006f0 <__aeabi_fsub+0x30>
 80007ea:	002a      	movs	r2, r5
 80007ec:	3aff      	subs	r2, #255	; 0xff
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	d036      	beq.n	8000860 <__aeabi_fsub+0x1a0>
 80007f2:	1b7a      	subs	r2, r7, r5
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0x13a>
 80007f8:	e0aa      	b.n	8000950 <__aeabi_fsub+0x290>
 80007fa:	2fff      	cmp	r7, #255	; 0xff
 80007fc:	d100      	bne.n	8000800 <__aeabi_fsub+0x140>
 80007fe:	e0da      	b.n	80009b6 <__aeabi_fsub+0x2f6>
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	4661      	mov	r1, ip
 8000804:	04db      	lsls	r3, r3, #19
 8000806:	4319      	orrs	r1, r3
 8000808:	468c      	mov	ip, r1
 800080a:	2a1b      	cmp	r2, #27
 800080c:	dc00      	bgt.n	8000810 <__aeabi_fsub+0x150>
 800080e:	e0d4      	b.n	80009ba <__aeabi_fsub+0x2fa>
 8000810:	2301      	movs	r3, #1
 8000812:	003d      	movs	r5, r7
 8000814:	181b      	adds	r3, r3, r0
 8000816:	e7b5      	b.n	8000784 <__aeabi_fsub+0xc4>
 8000818:	27fe      	movs	r7, #254	; 0xfe
 800081a:	1c6a      	adds	r2, r5, #1
 800081c:	4217      	tst	r7, r2
 800081e:	d171      	bne.n	8000904 <__aeabi_fsub+0x244>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fsub+0x166>
 8000824:	e09e      	b.n	8000964 <__aeabi_fsub+0x2a4>
 8000826:	4663      	mov	r3, ip
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fsub+0x16e>
 800082c:	e0d5      	b.n	80009da <__aeabi_fsub+0x31a>
 800082e:	2200      	movs	r2, #0
 8000830:	2800      	cmp	r0, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fsub+0x176>
 8000834:	e78f      	b.n	8000756 <__aeabi_fsub+0x96>
 8000836:	1a1b      	subs	r3, r3, r0
 8000838:	015e      	lsls	r6, r3, #5
 800083a:	d400      	bmi.n	800083e <__aeabi_fsub+0x17e>
 800083c:	e0d6      	b.n	80009ec <__aeabi_fsub+0x32c>
 800083e:	4663      	mov	r3, ip
 8000840:	000c      	movs	r4, r1
 8000842:	1ac3      	subs	r3, r0, r3
 8000844:	e776      	b.n	8000734 <__aeabi_fsub+0x74>
 8000846:	2800      	cmp	r0, #0
 8000848:	d036      	beq.n	80008b8 <__aeabi_fsub+0x1f8>
 800084a:	1e51      	subs	r1, r2, #1
 800084c:	2a01      	cmp	r2, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fsub+0x192>
 8000850:	e09a      	b.n	8000988 <__aeabi_fsub+0x2c8>
 8000852:	2aff      	cmp	r2, #255	; 0xff
 8000854:	d026      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 8000856:	000a      	movs	r2, r1
 8000858:	e78f      	b.n	800077a <__aeabi_fsub+0xba>
 800085a:	22ff      	movs	r2, #255	; 0xff
 800085c:	2600      	movs	r6, #0
 800085e:	e77a      	b.n	8000756 <__aeabi_fsub+0x96>
 8000860:	27fe      	movs	r7, #254	; 0xfe
 8000862:	1c6a      	adds	r2, r5, #1
 8000864:	4217      	tst	r7, r2
 8000866:	d062      	beq.n	800092e <__aeabi_fsub+0x26e>
 8000868:	2aff      	cmp	r2, #255	; 0xff
 800086a:	d0f6      	beq.n	800085a <__aeabi_fsub+0x19a>
 800086c:	0015      	movs	r5, r2
 800086e:	4460      	add	r0, ip
 8000870:	0843      	lsrs	r3, r0, #1
 8000872:	075a      	lsls	r2, r3, #29
 8000874:	d000      	beq.n	8000878 <__aeabi_fsub+0x1b8>
 8000876:	e75f      	b.n	8000738 <__aeabi_fsub+0x78>
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	2dff      	cmp	r5, #255	; 0xff
 800087c:	d012      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 800087e:	025b      	lsls	r3, r3, #9
 8000880:	0a5e      	lsrs	r6, r3, #9
 8000882:	b2ea      	uxtb	r2, r5
 8000884:	e767      	b.n	8000756 <__aeabi_fsub+0x96>
 8000886:	4662      	mov	r2, ip
 8000888:	2a00      	cmp	r2, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fsub+0x1ce>
 800088c:	e093      	b.n	80009b6 <__aeabi_fsub+0x2f6>
 800088e:	2800      	cmp	r0, #0
 8000890:	d008      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	03d2      	lsls	r2, r2, #15
 8000896:	4213      	tst	r3, r2
 8000898:	d004      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 800089a:	4640      	mov	r0, r8
 800089c:	4210      	tst	r0, r2
 800089e:	d101      	bne.n	80008a4 <__aeabi_fsub+0x1e4>
 80008a0:	000c      	movs	r4, r1
 80008a2:	4643      	mov	r3, r8
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0d8      	beq.n	800085a <__aeabi_fsub+0x19a>
 80008a8:	2680      	movs	r6, #128	; 0x80
 80008aa:	03f6      	lsls	r6, r6, #15
 80008ac:	431e      	orrs	r6, r3
 80008ae:	0276      	lsls	r6, r6, #9
 80008b0:	22ff      	movs	r2, #255	; 0xff
 80008b2:	0a76      	lsrs	r6, r6, #9
 80008b4:	e74f      	b.n	8000756 <__aeabi_fsub+0x96>
 80008b6:	4643      	mov	r3, r8
 80008b8:	0015      	movs	r5, r2
 80008ba:	e7de      	b.n	800087a <__aeabi_fsub+0x1ba>
 80008bc:	2220      	movs	r2, #32
 80008be:	1b40      	subs	r0, r0, r5
 80008c0:	3001      	adds	r0, #1
 80008c2:	1a12      	subs	r2, r2, r0
 80008c4:	0019      	movs	r1, r3
 80008c6:	4093      	lsls	r3, r2
 80008c8:	40c1      	lsrs	r1, r0
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	4193      	sbcs	r3, r2
 80008ce:	2500      	movs	r5, #0
 80008d0:	430b      	orrs	r3, r1
 80008d2:	e72f      	b.n	8000734 <__aeabi_fsub+0x74>
 80008d4:	2320      	movs	r3, #32
 80008d6:	1a9b      	subs	r3, r3, r2
 80008d8:	0001      	movs	r1, r0
 80008da:	4098      	lsls	r0, r3
 80008dc:	0003      	movs	r3, r0
 80008de:	40d1      	lsrs	r1, r2
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	4193      	sbcs	r3, r2
 80008e4:	430b      	orrs	r3, r1
 80008e6:	e712      	b.n	800070e <__aeabi_fsub+0x4e>
 80008e8:	2fff      	cmp	r7, #255	; 0xff
 80008ea:	d0d9      	beq.n	80008a0 <__aeabi_fsub+0x1e0>
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	4664      	mov	r4, ip
 80008f0:	04db      	lsls	r3, r3, #19
 80008f2:	431c      	orrs	r4, r3
 80008f4:	46a4      	mov	ip, r4
 80008f6:	2a1b      	cmp	r2, #27
 80008f8:	dd52      	ble.n	80009a0 <__aeabi_fsub+0x2e0>
 80008fa:	2301      	movs	r3, #1
 80008fc:	000c      	movs	r4, r1
 80008fe:	003d      	movs	r5, r7
 8000900:	1ac3      	subs	r3, r0, r3
 8000902:	e706      	b.n	8000712 <__aeabi_fsub+0x52>
 8000904:	4663      	mov	r3, ip
 8000906:	1a1e      	subs	r6, r3, r0
 8000908:	0173      	lsls	r3, r6, #5
 800090a:	d439      	bmi.n	8000980 <__aeabi_fsub+0x2c0>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_fsub+0x252>
 8000910:	e704      	b.n	800071c <__aeabi_fsub+0x5c>
 8000912:	2400      	movs	r4, #0
 8000914:	2200      	movs	r2, #0
 8000916:	2600      	movs	r6, #0
 8000918:	e71d      	b.n	8000756 <__aeabi_fsub+0x96>
 800091a:	2320      	movs	r3, #32
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	0001      	movs	r1, r0
 8000920:	4098      	lsls	r0, r3
 8000922:	0003      	movs	r3, r0
 8000924:	40d1      	lsrs	r1, r2
 8000926:	1e5a      	subs	r2, r3, #1
 8000928:	4193      	sbcs	r3, r2
 800092a:	430b      	orrs	r3, r1
 800092c:	e729      	b.n	8000782 <__aeabi_fsub+0xc2>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d1a9      	bne.n	8000886 <__aeabi_fsub+0x1c6>
 8000932:	4663      	mov	r3, ip
 8000934:	2b00      	cmp	r3, #0
 8000936:	d056      	beq.n	80009e6 <__aeabi_fsub+0x326>
 8000938:	2200      	movs	r2, #0
 800093a:	2800      	cmp	r0, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fsub+0x280>
 800093e:	e70a      	b.n	8000756 <__aeabi_fsub+0x96>
 8000940:	0003      	movs	r3, r0
 8000942:	4463      	add	r3, ip
 8000944:	015a      	lsls	r2, r3, #5
 8000946:	d594      	bpl.n	8000872 <__aeabi_fsub+0x1b2>
 8000948:	4a2b      	ldr	r2, [pc, #172]	; (80009f8 <__aeabi_fsub+0x338>)
 800094a:	3501      	adds	r5, #1
 800094c:	4013      	ands	r3, r2
 800094e:	e790      	b.n	8000872 <__aeabi_fsub+0x1b2>
 8000950:	4663      	mov	r3, ip
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0af      	beq.n	80008b6 <__aeabi_fsub+0x1f6>
 8000956:	1e53      	subs	r3, r2, #1
 8000958:	2a01      	cmp	r2, #1
 800095a:	d015      	beq.n	8000988 <__aeabi_fsub+0x2c8>
 800095c:	2aff      	cmp	r2, #255	; 0xff
 800095e:	d02a      	beq.n	80009b6 <__aeabi_fsub+0x2f6>
 8000960:	001a      	movs	r2, r3
 8000962:	e752      	b.n	800080a <__aeabi_fsub+0x14a>
 8000964:	4662      	mov	r2, ip
 8000966:	2a00      	cmp	r2, #0
 8000968:	d191      	bne.n	800088e <__aeabi_fsub+0x1ce>
 800096a:	2800      	cmp	r0, #0
 800096c:	d198      	bne.n	80008a0 <__aeabi_fsub+0x1e0>
 800096e:	2680      	movs	r6, #128	; 0x80
 8000970:	2400      	movs	r4, #0
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	03f6      	lsls	r6, r6, #15
 8000976:	e6ee      	b.n	8000756 <__aeabi_fsub+0x96>
 8000978:	000c      	movs	r4, r1
 800097a:	4643      	mov	r3, r8
 800097c:	0015      	movs	r5, r2
 800097e:	e77c      	b.n	800087a <__aeabi_fsub+0x1ba>
 8000980:	4663      	mov	r3, ip
 8000982:	000c      	movs	r4, r1
 8000984:	1ac6      	subs	r6, r0, r3
 8000986:	e6c9      	b.n	800071c <__aeabi_fsub+0x5c>
 8000988:	0003      	movs	r3, r0
 800098a:	4463      	add	r3, ip
 800098c:	2501      	movs	r5, #1
 800098e:	015a      	lsls	r2, r3, #5
 8000990:	d400      	bmi.n	8000994 <__aeabi_fsub+0x2d4>
 8000992:	e76e      	b.n	8000872 <__aeabi_fsub+0x1b2>
 8000994:	2502      	movs	r5, #2
 8000996:	e6fa      	b.n	800078e <__aeabi_fsub+0xce>
 8000998:	4663      	mov	r3, ip
 800099a:	2501      	movs	r5, #1
 800099c:	1a1b      	subs	r3, r3, r0
 800099e:	e6b8      	b.n	8000712 <__aeabi_fsub+0x52>
 80009a0:	4664      	mov	r4, ip
 80009a2:	2320      	movs	r3, #32
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	1a9b      	subs	r3, r3, r2
 80009a8:	4662      	mov	r2, ip
 80009aa:	409a      	lsls	r2, r3
 80009ac:	0013      	movs	r3, r2
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	4193      	sbcs	r3, r2
 80009b2:	4323      	orrs	r3, r4
 80009b4:	e7a2      	b.n	80008fc <__aeabi_fsub+0x23c>
 80009b6:	4643      	mov	r3, r8
 80009b8:	e774      	b.n	80008a4 <__aeabi_fsub+0x1e4>
 80009ba:	4661      	mov	r1, ip
 80009bc:	2320      	movs	r3, #32
 80009be:	40d1      	lsrs	r1, r2
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	4662      	mov	r2, ip
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	4193      	sbcs	r3, r2
 80009cc:	430b      	orrs	r3, r1
 80009ce:	e720      	b.n	8000812 <__aeabi_fsub+0x152>
 80009d0:	4663      	mov	r3, ip
 80009d2:	000c      	movs	r4, r1
 80009d4:	2501      	movs	r5, #1
 80009d6:	1ac3      	subs	r3, r0, r3
 80009d8:	e69b      	b.n	8000712 <__aeabi_fsub+0x52>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d099      	beq.n	8000912 <__aeabi_fsub+0x252>
 80009de:	000c      	movs	r4, r1
 80009e0:	4646      	mov	r6, r8
 80009e2:	2200      	movs	r2, #0
 80009e4:	e6b7      	b.n	8000756 <__aeabi_fsub+0x96>
 80009e6:	4646      	mov	r6, r8
 80009e8:	2200      	movs	r2, #0
 80009ea:	e6b4      	b.n	8000756 <__aeabi_fsub+0x96>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fsub+0x332>
 80009f0:	e73f      	b.n	8000872 <__aeabi_fsub+0x1b2>
 80009f2:	2400      	movs	r4, #0
 80009f4:	2600      	movs	r6, #0
 80009f6:	e6ae      	b.n	8000756 <__aeabi_fsub+0x96>
 80009f8:	fbffffff 	.word	0xfbffffff
 80009fc:	7dffffff 	.word	0x7dffffff

08000a00 <__aeabi_f2iz>:
 8000a00:	0241      	lsls	r1, r0, #9
 8000a02:	0042      	lsls	r2, r0, #1
 8000a04:	0fc3      	lsrs	r3, r0, #31
 8000a06:	0a49      	lsrs	r1, r1, #9
 8000a08:	2000      	movs	r0, #0
 8000a0a:	0e12      	lsrs	r2, r2, #24
 8000a0c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a0e:	dd03      	ble.n	8000a18 <__aeabi_f2iz+0x18>
 8000a10:	2a9d      	cmp	r2, #157	; 0x9d
 8000a12:	dd02      	ble.n	8000a1a <__aeabi_f2iz+0x1a>
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <__aeabi_f2iz+0x3c>)
 8000a16:	1898      	adds	r0, r3, r2
 8000a18:	4770      	bx	lr
 8000a1a:	2080      	movs	r0, #128	; 0x80
 8000a1c:	0400      	lsls	r0, r0, #16
 8000a1e:	4301      	orrs	r1, r0
 8000a20:	2a95      	cmp	r2, #149	; 0x95
 8000a22:	dc07      	bgt.n	8000a34 <__aeabi_f2iz+0x34>
 8000a24:	2096      	movs	r0, #150	; 0x96
 8000a26:	1a82      	subs	r2, r0, r2
 8000a28:	40d1      	lsrs	r1, r2
 8000a2a:	4248      	negs	r0, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f3      	bne.n	8000a18 <__aeabi_f2iz+0x18>
 8000a30:	0008      	movs	r0, r1
 8000a32:	e7f1      	b.n	8000a18 <__aeabi_f2iz+0x18>
 8000a34:	3a96      	subs	r2, #150	; 0x96
 8000a36:	4091      	lsls	r1, r2
 8000a38:	e7f7      	b.n	8000a2a <__aeabi_f2iz+0x2a>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	7fffffff 	.word	0x7fffffff

08000a40 <__aeabi_i2f>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d013      	beq.n	8000a6e <__aeabi_i2f+0x2e>
 8000a46:	17c3      	asrs	r3, r0, #31
 8000a48:	18c5      	adds	r5, r0, r3
 8000a4a:	405d      	eors	r5, r3
 8000a4c:	0fc4      	lsrs	r4, r0, #31
 8000a4e:	0028      	movs	r0, r5
 8000a50:	f000 fbf0 	bl	8001234 <__clzsi2>
 8000a54:	239e      	movs	r3, #158	; 0x9e
 8000a56:	0001      	movs	r1, r0
 8000a58:	1a1b      	subs	r3, r3, r0
 8000a5a:	2b96      	cmp	r3, #150	; 0x96
 8000a5c:	dc0f      	bgt.n	8000a7e <__aeabi_i2f+0x3e>
 8000a5e:	2808      	cmp	r0, #8
 8000a60:	d031      	beq.n	8000ac6 <__aeabi_i2f+0x86>
 8000a62:	3908      	subs	r1, #8
 8000a64:	408d      	lsls	r5, r1
 8000a66:	026d      	lsls	r5, r5, #9
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	b2d8      	uxtb	r0, r3
 8000a6c:	e002      	b.n	8000a74 <__aeabi_i2f+0x34>
 8000a6e:	2400      	movs	r4, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	2500      	movs	r5, #0
 8000a74:	05c0      	lsls	r0, r0, #23
 8000a76:	4328      	orrs	r0, r5
 8000a78:	07e4      	lsls	r4, r4, #31
 8000a7a:	4320      	orrs	r0, r4
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
 8000a7e:	2b99      	cmp	r3, #153	; 0x99
 8000a80:	dd0c      	ble.n	8000a9c <__aeabi_i2f+0x5c>
 8000a82:	2205      	movs	r2, #5
 8000a84:	1a12      	subs	r2, r2, r0
 8000a86:	0028      	movs	r0, r5
 8000a88:	40d0      	lsrs	r0, r2
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	0008      	movs	r0, r1
 8000a8e:	301b      	adds	r0, #27
 8000a90:	4085      	lsls	r5, r0
 8000a92:	0028      	movs	r0, r5
 8000a94:	1e45      	subs	r5, r0, #1
 8000a96:	41a8      	sbcs	r0, r5
 8000a98:	4302      	orrs	r2, r0
 8000a9a:	0015      	movs	r5, r2
 8000a9c:	2905      	cmp	r1, #5
 8000a9e:	dc16      	bgt.n	8000ace <__aeabi_i2f+0x8e>
 8000aa0:	002a      	movs	r2, r5
 8000aa2:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <__aeabi_i2f+0xa0>)
 8000aa4:	4002      	ands	r2, r0
 8000aa6:	076e      	lsls	r6, r5, #29
 8000aa8:	d009      	beq.n	8000abe <__aeabi_i2f+0x7e>
 8000aaa:	260f      	movs	r6, #15
 8000aac:	4035      	ands	r5, r6
 8000aae:	2d04      	cmp	r5, #4
 8000ab0:	d005      	beq.n	8000abe <__aeabi_i2f+0x7e>
 8000ab2:	3204      	adds	r2, #4
 8000ab4:	0155      	lsls	r5, r2, #5
 8000ab6:	d502      	bpl.n	8000abe <__aeabi_i2f+0x7e>
 8000ab8:	239f      	movs	r3, #159	; 0x9f
 8000aba:	4002      	ands	r2, r0
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	0192      	lsls	r2, r2, #6
 8000ac0:	0a55      	lsrs	r5, r2, #9
 8000ac2:	b2d8      	uxtb	r0, r3
 8000ac4:	e7d6      	b.n	8000a74 <__aeabi_i2f+0x34>
 8000ac6:	026d      	lsls	r5, r5, #9
 8000ac8:	2096      	movs	r0, #150	; 0x96
 8000aca:	0a6d      	lsrs	r5, r5, #9
 8000acc:	e7d2      	b.n	8000a74 <__aeabi_i2f+0x34>
 8000ace:	1f4a      	subs	r2, r1, #5
 8000ad0:	4095      	lsls	r5, r2
 8000ad2:	002a      	movs	r2, r5
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <__aeabi_i2f+0xa0>)
 8000ad6:	4002      	ands	r2, r0
 8000ad8:	076e      	lsls	r6, r5, #29
 8000ada:	d0f0      	beq.n	8000abe <__aeabi_i2f+0x7e>
 8000adc:	e7e5      	b.n	8000aaa <__aeabi_i2f+0x6a>
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	fbffffff 	.word	0xfbffffff

08000ae4 <__aeabi_dmul>:
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae6:	4645      	mov	r5, r8
 8000ae8:	46de      	mov	lr, fp
 8000aea:	4657      	mov	r7, sl
 8000aec:	464e      	mov	r6, r9
 8000aee:	b5e0      	push	{r5, r6, r7, lr}
 8000af0:	001f      	movs	r7, r3
 8000af2:	030b      	lsls	r3, r1, #12
 8000af4:	0b1b      	lsrs	r3, r3, #12
 8000af6:	469b      	mov	fp, r3
 8000af8:	004d      	lsls	r5, r1, #1
 8000afa:	0fcb      	lsrs	r3, r1, #31
 8000afc:	0004      	movs	r4, r0
 8000afe:	4691      	mov	r9, r2
 8000b00:	4698      	mov	r8, r3
 8000b02:	b087      	sub	sp, #28
 8000b04:	0d6d      	lsrs	r5, r5, #21
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dmul+0x26>
 8000b08:	e1cd      	b.n	8000ea6 <__aeabi_dmul+0x3c2>
 8000b0a:	4bce      	ldr	r3, [pc, #824]	; (8000e44 <__aeabi_dmul+0x360>)
 8000b0c:	429d      	cmp	r5, r3
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dmul+0x2e>
 8000b10:	e1e9      	b.n	8000ee6 <__aeabi_dmul+0x402>
 8000b12:	465a      	mov	r2, fp
 8000b14:	0f43      	lsrs	r3, r0, #29
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	0412      	lsls	r2, r2, #16
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	00c3      	lsls	r3, r0, #3
 8000b22:	469a      	mov	sl, r3
 8000b24:	4bc8      	ldr	r3, [pc, #800]	; (8000e48 <__aeabi_dmul+0x364>)
 8000b26:	4693      	mov	fp, r2
 8000b28:	469c      	mov	ip, r3
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2600      	movs	r6, #0
 8000b2e:	4465      	add	r5, ip
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	033c      	lsls	r4, r7, #12
 8000b34:	007b      	lsls	r3, r7, #1
 8000b36:	4648      	mov	r0, r9
 8000b38:	0b24      	lsrs	r4, r4, #12
 8000b3a:	0d5b      	lsrs	r3, r3, #21
 8000b3c:	0fff      	lsrs	r7, r7, #31
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dmul+0x60>
 8000b42:	e189      	b.n	8000e58 <__aeabi_dmul+0x374>
 8000b44:	4abf      	ldr	r2, [pc, #764]	; (8000e44 <__aeabi_dmul+0x360>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d019      	beq.n	8000b7e <__aeabi_dmul+0x9a>
 8000b4a:	0f42      	lsrs	r2, r0, #29
 8000b4c:	00e4      	lsls	r4, r4, #3
 8000b4e:	4322      	orrs	r2, r4
 8000b50:	2480      	movs	r4, #128	; 0x80
 8000b52:	0424      	lsls	r4, r4, #16
 8000b54:	4314      	orrs	r4, r2
 8000b56:	4abc      	ldr	r2, [pc, #752]	; (8000e48 <__aeabi_dmul+0x364>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4694      	mov	ip, r2
 8000b5c:	4642      	mov	r2, r8
 8000b5e:	4463      	add	r3, ip
 8000b60:	195b      	adds	r3, r3, r5
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	9b01      	ldr	r3, [sp, #4]
 8000b66:	407a      	eors	r2, r7
 8000b68:	3301      	adds	r3, #1
 8000b6a:	00c0      	lsls	r0, r0, #3
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2e0a      	cmp	r6, #10
 8000b72:	dd1c      	ble.n	8000bae <__aeabi_dmul+0xca>
 8000b74:	003a      	movs	r2, r7
 8000b76:	2e0b      	cmp	r6, #11
 8000b78:	d05e      	beq.n	8000c38 <__aeabi_dmul+0x154>
 8000b7a:	4647      	mov	r7, r8
 8000b7c:	e056      	b.n	8000c2c <__aeabi_dmul+0x148>
 8000b7e:	4649      	mov	r1, r9
 8000b80:	4bb0      	ldr	r3, [pc, #704]	; (8000e44 <__aeabi_dmul+0x360>)
 8000b82:	4321      	orrs	r1, r4
 8000b84:	18eb      	adds	r3, r5, r3
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	d12a      	bne.n	8000be2 <__aeabi_dmul+0xfe>
 8000b8c:	2080      	movs	r0, #128	; 0x80
 8000b8e:	2202      	movs	r2, #2
 8000b90:	0100      	lsls	r0, r0, #4
 8000b92:	002b      	movs	r3, r5
 8000b94:	4684      	mov	ip, r0
 8000b96:	4316      	orrs	r6, r2
 8000b98:	4642      	mov	r2, r8
 8000b9a:	4463      	add	r3, ip
 8000b9c:	407a      	eors	r2, r7
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	2e0a      	cmp	r6, #10
 8000ba4:	dd00      	ble.n	8000ba8 <__aeabi_dmul+0xc4>
 8000ba6:	e231      	b.n	800100c <__aeabi_dmul+0x528>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	2400      	movs	r4, #0
 8000bac:	2102      	movs	r1, #2
 8000bae:	2e02      	cmp	r6, #2
 8000bb0:	dc26      	bgt.n	8000c00 <__aeabi_dmul+0x11c>
 8000bb2:	3e01      	subs	r6, #1
 8000bb4:	2e01      	cmp	r6, #1
 8000bb6:	d852      	bhi.n	8000c5e <__aeabi_dmul+0x17a>
 8000bb8:	2902      	cmp	r1, #2
 8000bba:	d04c      	beq.n	8000c56 <__aeabi_dmul+0x172>
 8000bbc:	2901      	cmp	r1, #1
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_dmul+0xde>
 8000bc0:	e118      	b.n	8000df4 <__aeabi_dmul+0x310>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2400      	movs	r4, #0
 8000bc6:	2500      	movs	r5, #0
 8000bc8:	051b      	lsls	r3, r3, #20
 8000bca:	4323      	orrs	r3, r4
 8000bcc:	07d2      	lsls	r2, r2, #31
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	0028      	movs	r0, r5
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	b007      	add	sp, #28
 8000bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd8:	46bb      	mov	fp, r7
 8000bda:	46b2      	mov	sl, r6
 8000bdc:	46a9      	mov	r9, r5
 8000bde:	46a0      	mov	r8, r4
 8000be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	2203      	movs	r2, #3
 8000be6:	0109      	lsls	r1, r1, #4
 8000be8:	002b      	movs	r3, r5
 8000bea:	468c      	mov	ip, r1
 8000bec:	4316      	orrs	r6, r2
 8000bee:	4642      	mov	r2, r8
 8000bf0:	4463      	add	r3, ip
 8000bf2:	407a      	eors	r2, r7
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2e0a      	cmp	r6, #10
 8000bfa:	dd00      	ble.n	8000bfe <__aeabi_dmul+0x11a>
 8000bfc:	e228      	b.n	8001050 <__aeabi_dmul+0x56c>
 8000bfe:	2103      	movs	r1, #3
 8000c00:	2501      	movs	r5, #1
 8000c02:	40b5      	lsls	r5, r6
 8000c04:	46ac      	mov	ip, r5
 8000c06:	26a6      	movs	r6, #166	; 0xa6
 8000c08:	4663      	mov	r3, ip
 8000c0a:	00f6      	lsls	r6, r6, #3
 8000c0c:	4035      	ands	r5, r6
 8000c0e:	4233      	tst	r3, r6
 8000c10:	d10b      	bne.n	8000c2a <__aeabi_dmul+0x146>
 8000c12:	2690      	movs	r6, #144	; 0x90
 8000c14:	00b6      	lsls	r6, r6, #2
 8000c16:	4233      	tst	r3, r6
 8000c18:	d118      	bne.n	8000c4c <__aeabi_dmul+0x168>
 8000c1a:	3eb9      	subs	r6, #185	; 0xb9
 8000c1c:	3eff      	subs	r6, #255	; 0xff
 8000c1e:	421e      	tst	r6, r3
 8000c20:	d01d      	beq.n	8000c5e <__aeabi_dmul+0x17a>
 8000c22:	46a3      	mov	fp, r4
 8000c24:	4682      	mov	sl, r0
 8000c26:	9100      	str	r1, [sp, #0]
 8000c28:	e000      	b.n	8000c2c <__aeabi_dmul+0x148>
 8000c2a:	0017      	movs	r7, r2
 8000c2c:	9900      	ldr	r1, [sp, #0]
 8000c2e:	003a      	movs	r2, r7
 8000c30:	2902      	cmp	r1, #2
 8000c32:	d010      	beq.n	8000c56 <__aeabi_dmul+0x172>
 8000c34:	465c      	mov	r4, fp
 8000c36:	4650      	mov	r0, sl
 8000c38:	2903      	cmp	r1, #3
 8000c3a:	d1bf      	bne.n	8000bbc <__aeabi_dmul+0xd8>
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	031b      	lsls	r3, r3, #12
 8000c40:	431c      	orrs	r4, r3
 8000c42:	0324      	lsls	r4, r4, #12
 8000c44:	0005      	movs	r5, r0
 8000c46:	4b7f      	ldr	r3, [pc, #508]	; (8000e44 <__aeabi_dmul+0x360>)
 8000c48:	0b24      	lsrs	r4, r4, #12
 8000c4a:	e7bd      	b.n	8000bc8 <__aeabi_dmul+0xe4>
 8000c4c:	2480      	movs	r4, #128	; 0x80
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4b7c      	ldr	r3, [pc, #496]	; (8000e44 <__aeabi_dmul+0x360>)
 8000c52:	0324      	lsls	r4, r4, #12
 8000c54:	e7b8      	b.n	8000bc8 <__aeabi_dmul+0xe4>
 8000c56:	2400      	movs	r4, #0
 8000c58:	2500      	movs	r5, #0
 8000c5a:	4b7a      	ldr	r3, [pc, #488]	; (8000e44 <__aeabi_dmul+0x360>)
 8000c5c:	e7b4      	b.n	8000bc8 <__aeabi_dmul+0xe4>
 8000c5e:	4653      	mov	r3, sl
 8000c60:	041e      	lsls	r6, r3, #16
 8000c62:	0c36      	lsrs	r6, r6, #16
 8000c64:	0c1f      	lsrs	r7, r3, #16
 8000c66:	0033      	movs	r3, r6
 8000c68:	0c01      	lsrs	r1, r0, #16
 8000c6a:	0400      	lsls	r0, r0, #16
 8000c6c:	0c00      	lsrs	r0, r0, #16
 8000c6e:	4343      	muls	r3, r0
 8000c70:	4698      	mov	r8, r3
 8000c72:	0003      	movs	r3, r0
 8000c74:	437b      	muls	r3, r7
 8000c76:	4699      	mov	r9, r3
 8000c78:	0033      	movs	r3, r6
 8000c7a:	434b      	muls	r3, r1
 8000c7c:	469c      	mov	ip, r3
 8000c7e:	4643      	mov	r3, r8
 8000c80:	000d      	movs	r5, r1
 8000c82:	0c1b      	lsrs	r3, r3, #16
 8000c84:	469a      	mov	sl, r3
 8000c86:	437d      	muls	r5, r7
 8000c88:	44cc      	add	ip, r9
 8000c8a:	44d4      	add	ip, sl
 8000c8c:	9500      	str	r5, [sp, #0]
 8000c8e:	45e1      	cmp	r9, ip
 8000c90:	d904      	bls.n	8000c9c <__aeabi_dmul+0x1b8>
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	025b      	lsls	r3, r3, #9
 8000c96:	4699      	mov	r9, r3
 8000c98:	444d      	add	r5, r9
 8000c9a:	9500      	str	r5, [sp, #0]
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	0c1b      	lsrs	r3, r3, #16
 8000ca0:	001d      	movs	r5, r3
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	4643      	mov	r3, r8
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	4698      	mov	r8, r3
 8000cb0:	4663      	mov	r3, ip
 8000cb2:	4443      	add	r3, r8
 8000cb4:	9303      	str	r3, [sp, #12]
 8000cb6:	0c23      	lsrs	r3, r4, #16
 8000cb8:	4698      	mov	r8, r3
 8000cba:	0033      	movs	r3, r6
 8000cbc:	0424      	lsls	r4, r4, #16
 8000cbe:	0c24      	lsrs	r4, r4, #16
 8000cc0:	4363      	muls	r3, r4
 8000cc2:	469c      	mov	ip, r3
 8000cc4:	0023      	movs	r3, r4
 8000cc6:	437b      	muls	r3, r7
 8000cc8:	4699      	mov	r9, r3
 8000cca:	4643      	mov	r3, r8
 8000ccc:	435e      	muls	r6, r3
 8000cce:	435f      	muls	r7, r3
 8000cd0:	444e      	add	r6, r9
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	46b2      	mov	sl, r6
 8000cd6:	0c1e      	lsrs	r6, r3, #16
 8000cd8:	4456      	add	r6, sl
 8000cda:	45b1      	cmp	r9, r6
 8000cdc:	d903      	bls.n	8000ce6 <__aeabi_dmul+0x202>
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	025b      	lsls	r3, r3, #9
 8000ce2:	4699      	mov	r9, r3
 8000ce4:	444f      	add	r7, r9
 8000ce6:	0c33      	lsrs	r3, r6, #16
 8000ce8:	4699      	mov	r9, r3
 8000cea:	003b      	movs	r3, r7
 8000cec:	444b      	add	r3, r9
 8000cee:	9305      	str	r3, [sp, #20]
 8000cf0:	4663      	mov	r3, ip
 8000cf2:	46ac      	mov	ip, r5
 8000cf4:	041f      	lsls	r7, r3, #16
 8000cf6:	0c3f      	lsrs	r7, r7, #16
 8000cf8:	0436      	lsls	r6, r6, #16
 8000cfa:	19f6      	adds	r6, r6, r7
 8000cfc:	44b4      	add	ip, r6
 8000cfe:	4663      	mov	r3, ip
 8000d00:	9304      	str	r3, [sp, #16]
 8000d02:	465b      	mov	r3, fp
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	469c      	mov	ip, r3
 8000d08:	465b      	mov	r3, fp
 8000d0a:	041f      	lsls	r7, r3, #16
 8000d0c:	0c3f      	lsrs	r7, r7, #16
 8000d0e:	003b      	movs	r3, r7
 8000d10:	4343      	muls	r3, r0
 8000d12:	4699      	mov	r9, r3
 8000d14:	4663      	mov	r3, ip
 8000d16:	4343      	muls	r3, r0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	4660      	mov	r0, ip
 8000d1e:	0c1b      	lsrs	r3, r3, #16
 8000d20:	469b      	mov	fp, r3
 8000d22:	4348      	muls	r0, r1
 8000d24:	4379      	muls	r1, r7
 8000d26:	4451      	add	r1, sl
 8000d28:	4459      	add	r1, fp
 8000d2a:	458a      	cmp	sl, r1
 8000d2c:	d903      	bls.n	8000d36 <__aeabi_dmul+0x252>
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	025b      	lsls	r3, r3, #9
 8000d32:	469a      	mov	sl, r3
 8000d34:	4450      	add	r0, sl
 8000d36:	0c0b      	lsrs	r3, r1, #16
 8000d38:	469a      	mov	sl, r3
 8000d3a:	464b      	mov	r3, r9
 8000d3c:	041b      	lsls	r3, r3, #16
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	4699      	mov	r9, r3
 8000d42:	003b      	movs	r3, r7
 8000d44:	4363      	muls	r3, r4
 8000d46:	0409      	lsls	r1, r1, #16
 8000d48:	4645      	mov	r5, r8
 8000d4a:	4449      	add	r1, r9
 8000d4c:	4699      	mov	r9, r3
 8000d4e:	4663      	mov	r3, ip
 8000d50:	435c      	muls	r4, r3
 8000d52:	436b      	muls	r3, r5
 8000d54:	469c      	mov	ip, r3
 8000d56:	464b      	mov	r3, r9
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	4698      	mov	r8, r3
 8000d5c:	436f      	muls	r7, r5
 8000d5e:	193f      	adds	r7, r7, r4
 8000d60:	4447      	add	r7, r8
 8000d62:	4450      	add	r0, sl
 8000d64:	42bc      	cmp	r4, r7
 8000d66:	d903      	bls.n	8000d70 <__aeabi_dmul+0x28c>
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	025b      	lsls	r3, r3, #9
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	44c4      	add	ip, r8
 8000d70:	9b04      	ldr	r3, [sp, #16]
 8000d72:	9d00      	ldr	r5, [sp, #0]
 8000d74:	4698      	mov	r8, r3
 8000d76:	4445      	add	r5, r8
 8000d78:	42b5      	cmp	r5, r6
 8000d7a:	41b6      	sbcs	r6, r6
 8000d7c:	4273      	negs	r3, r6
 8000d7e:	4698      	mov	r8, r3
 8000d80:	464b      	mov	r3, r9
 8000d82:	041e      	lsls	r6, r3, #16
 8000d84:	9b05      	ldr	r3, [sp, #20]
 8000d86:	043c      	lsls	r4, r7, #16
 8000d88:	4699      	mov	r9, r3
 8000d8a:	0c36      	lsrs	r6, r6, #16
 8000d8c:	19a4      	adds	r4, r4, r6
 8000d8e:	444c      	add	r4, r9
 8000d90:	46a1      	mov	r9, r4
 8000d92:	4683      	mov	fp, r0
 8000d94:	186e      	adds	r6, r5, r1
 8000d96:	44c1      	add	r9, r8
 8000d98:	428e      	cmp	r6, r1
 8000d9a:	4189      	sbcs	r1, r1
 8000d9c:	44cb      	add	fp, r9
 8000d9e:	465d      	mov	r5, fp
 8000da0:	4249      	negs	r1, r1
 8000da2:	186d      	adds	r5, r5, r1
 8000da4:	429c      	cmp	r4, r3
 8000da6:	41a4      	sbcs	r4, r4
 8000da8:	45c1      	cmp	r9, r8
 8000daa:	419b      	sbcs	r3, r3
 8000dac:	4583      	cmp	fp, r0
 8000dae:	4180      	sbcs	r0, r0
 8000db0:	428d      	cmp	r5, r1
 8000db2:	4189      	sbcs	r1, r1
 8000db4:	425b      	negs	r3, r3
 8000db6:	4264      	negs	r4, r4
 8000db8:	431c      	orrs	r4, r3
 8000dba:	4240      	negs	r0, r0
 8000dbc:	9b03      	ldr	r3, [sp, #12]
 8000dbe:	4249      	negs	r1, r1
 8000dc0:	4301      	orrs	r1, r0
 8000dc2:	0270      	lsls	r0, r6, #9
 8000dc4:	0c3f      	lsrs	r7, r7, #16
 8000dc6:	4318      	orrs	r0, r3
 8000dc8:	19e4      	adds	r4, r4, r7
 8000dca:	1e47      	subs	r7, r0, #1
 8000dcc:	41b8      	sbcs	r0, r7
 8000dce:	1864      	adds	r4, r4, r1
 8000dd0:	4464      	add	r4, ip
 8000dd2:	0df6      	lsrs	r6, r6, #23
 8000dd4:	0261      	lsls	r1, r4, #9
 8000dd6:	4330      	orrs	r0, r6
 8000dd8:	0dec      	lsrs	r4, r5, #23
 8000dda:	026e      	lsls	r6, r5, #9
 8000ddc:	430c      	orrs	r4, r1
 8000dde:	4330      	orrs	r0, r6
 8000de0:	01c9      	lsls	r1, r1, #7
 8000de2:	d400      	bmi.n	8000de6 <__aeabi_dmul+0x302>
 8000de4:	e0f1      	b.n	8000fca <__aeabi_dmul+0x4e6>
 8000de6:	2101      	movs	r1, #1
 8000de8:	0843      	lsrs	r3, r0, #1
 8000dea:	4001      	ands	r1, r0
 8000dec:	430b      	orrs	r3, r1
 8000dee:	07e0      	lsls	r0, r4, #31
 8000df0:	4318      	orrs	r0, r3
 8000df2:	0864      	lsrs	r4, r4, #1
 8000df4:	4915      	ldr	r1, [pc, #84]	; (8000e4c <__aeabi_dmul+0x368>)
 8000df6:	9b02      	ldr	r3, [sp, #8]
 8000df8:	468c      	mov	ip, r1
 8000dfa:	4463      	add	r3, ip
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	dc00      	bgt.n	8000e02 <__aeabi_dmul+0x31e>
 8000e00:	e097      	b.n	8000f32 <__aeabi_dmul+0x44e>
 8000e02:	0741      	lsls	r1, r0, #29
 8000e04:	d009      	beq.n	8000e1a <__aeabi_dmul+0x336>
 8000e06:	210f      	movs	r1, #15
 8000e08:	4001      	ands	r1, r0
 8000e0a:	2904      	cmp	r1, #4
 8000e0c:	d005      	beq.n	8000e1a <__aeabi_dmul+0x336>
 8000e0e:	1d01      	adds	r1, r0, #4
 8000e10:	4281      	cmp	r1, r0
 8000e12:	4180      	sbcs	r0, r0
 8000e14:	4240      	negs	r0, r0
 8000e16:	1824      	adds	r4, r4, r0
 8000e18:	0008      	movs	r0, r1
 8000e1a:	01e1      	lsls	r1, r4, #7
 8000e1c:	d506      	bpl.n	8000e2c <__aeabi_dmul+0x348>
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	00c9      	lsls	r1, r1, #3
 8000e22:	468c      	mov	ip, r1
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <__aeabi_dmul+0x36c>)
 8000e26:	401c      	ands	r4, r3
 8000e28:	9b02      	ldr	r3, [sp, #8]
 8000e2a:	4463      	add	r3, ip
 8000e2c:	4909      	ldr	r1, [pc, #36]	; (8000e54 <__aeabi_dmul+0x370>)
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_dmul+0x350>
 8000e32:	e710      	b.n	8000c56 <__aeabi_dmul+0x172>
 8000e34:	0761      	lsls	r1, r4, #29
 8000e36:	08c5      	lsrs	r5, r0, #3
 8000e38:	0264      	lsls	r4, r4, #9
 8000e3a:	055b      	lsls	r3, r3, #21
 8000e3c:	430d      	orrs	r5, r1
 8000e3e:	0b24      	lsrs	r4, r4, #12
 8000e40:	0d5b      	lsrs	r3, r3, #21
 8000e42:	e6c1      	b.n	8000bc8 <__aeabi_dmul+0xe4>
 8000e44:	000007ff 	.word	0x000007ff
 8000e48:	fffffc01 	.word	0xfffffc01
 8000e4c:	000003ff 	.word	0x000003ff
 8000e50:	feffffff 	.word	0xfeffffff
 8000e54:	000007fe 	.word	0x000007fe
 8000e58:	464b      	mov	r3, r9
 8000e5a:	4323      	orrs	r3, r4
 8000e5c:	d059      	beq.n	8000f12 <__aeabi_dmul+0x42e>
 8000e5e:	2c00      	cmp	r4, #0
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dmul+0x380>
 8000e62:	e0a3      	b.n	8000fac <__aeabi_dmul+0x4c8>
 8000e64:	0020      	movs	r0, r4
 8000e66:	f000 f9e5 	bl	8001234 <__clzsi2>
 8000e6a:	0001      	movs	r1, r0
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	390b      	subs	r1, #11
 8000e70:	221d      	movs	r2, #29
 8000e72:	1a52      	subs	r2, r2, r1
 8000e74:	4649      	mov	r1, r9
 8000e76:	0018      	movs	r0, r3
 8000e78:	40d1      	lsrs	r1, r2
 8000e7a:	464a      	mov	r2, r9
 8000e7c:	3808      	subs	r0, #8
 8000e7e:	4082      	lsls	r2, r0
 8000e80:	4084      	lsls	r4, r0
 8000e82:	0010      	movs	r0, r2
 8000e84:	430c      	orrs	r4, r1
 8000e86:	4a74      	ldr	r2, [pc, #464]	; (8001058 <__aeabi_dmul+0x574>)
 8000e88:	1aeb      	subs	r3, r5, r3
 8000e8a:	4694      	mov	ip, r2
 8000e8c:	4642      	mov	r2, r8
 8000e8e:	4463      	add	r3, ip
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	9b01      	ldr	r3, [sp, #4]
 8000e94:	407a      	eors	r2, r7
 8000e96:	3301      	adds	r3, #1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2e0a      	cmp	r6, #10
 8000ea0:	dd00      	ble.n	8000ea4 <__aeabi_dmul+0x3c0>
 8000ea2:	e667      	b.n	8000b74 <__aeabi_dmul+0x90>
 8000ea4:	e683      	b.n	8000bae <__aeabi_dmul+0xca>
 8000ea6:	465b      	mov	r3, fp
 8000ea8:	4303      	orrs	r3, r0
 8000eaa:	469a      	mov	sl, r3
 8000eac:	d02a      	beq.n	8000f04 <__aeabi_dmul+0x420>
 8000eae:	465b      	mov	r3, fp
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d06d      	beq.n	8000f90 <__aeabi_dmul+0x4ac>
 8000eb4:	4658      	mov	r0, fp
 8000eb6:	f000 f9bd 	bl	8001234 <__clzsi2>
 8000eba:	0001      	movs	r1, r0
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	390b      	subs	r1, #11
 8000ec0:	221d      	movs	r2, #29
 8000ec2:	1a52      	subs	r2, r2, r1
 8000ec4:	0021      	movs	r1, r4
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	465d      	mov	r5, fp
 8000eca:	40d1      	lsrs	r1, r2
 8000ecc:	3808      	subs	r0, #8
 8000ece:	4085      	lsls	r5, r0
 8000ed0:	000a      	movs	r2, r1
 8000ed2:	4084      	lsls	r4, r0
 8000ed4:	432a      	orrs	r2, r5
 8000ed6:	4693      	mov	fp, r2
 8000ed8:	46a2      	mov	sl, r4
 8000eda:	4d5f      	ldr	r5, [pc, #380]	; (8001058 <__aeabi_dmul+0x574>)
 8000edc:	2600      	movs	r6, #0
 8000ede:	1aed      	subs	r5, r5, r3
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	e625      	b.n	8000b32 <__aeabi_dmul+0x4e>
 8000ee6:	465b      	mov	r3, fp
 8000ee8:	4303      	orrs	r3, r0
 8000eea:	469a      	mov	sl, r3
 8000eec:	d105      	bne.n	8000efa <__aeabi_dmul+0x416>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	469b      	mov	fp, r3
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	2608      	movs	r6, #8
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	e61b      	b.n	8000b32 <__aeabi_dmul+0x4e>
 8000efa:	2303      	movs	r3, #3
 8000efc:	4682      	mov	sl, r0
 8000efe:	260c      	movs	r6, #12
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	e616      	b.n	8000b32 <__aeabi_dmul+0x4e>
 8000f04:	2300      	movs	r3, #0
 8000f06:	469b      	mov	fp, r3
 8000f08:	3301      	adds	r3, #1
 8000f0a:	2604      	movs	r6, #4
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	e60f      	b.n	8000b32 <__aeabi_dmul+0x4e>
 8000f12:	4642      	mov	r2, r8
 8000f14:	3301      	adds	r3, #1
 8000f16:	9501      	str	r5, [sp, #4]
 8000f18:	431e      	orrs	r6, r3
 8000f1a:	9b01      	ldr	r3, [sp, #4]
 8000f1c:	407a      	eors	r2, r7
 8000f1e:	3301      	adds	r3, #1
 8000f20:	2400      	movs	r4, #0
 8000f22:	2000      	movs	r0, #0
 8000f24:	2101      	movs	r1, #1
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	2e0a      	cmp	r6, #10
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_dmul+0x44c>
 8000f2e:	e621      	b.n	8000b74 <__aeabi_dmul+0x90>
 8000f30:	e63d      	b.n	8000bae <__aeabi_dmul+0xca>
 8000f32:	2101      	movs	r1, #1
 8000f34:	1ac9      	subs	r1, r1, r3
 8000f36:	2938      	cmp	r1, #56	; 0x38
 8000f38:	dd00      	ble.n	8000f3c <__aeabi_dmul+0x458>
 8000f3a:	e642      	b.n	8000bc2 <__aeabi_dmul+0xde>
 8000f3c:	291f      	cmp	r1, #31
 8000f3e:	dd47      	ble.n	8000fd0 <__aeabi_dmul+0x4ec>
 8000f40:	261f      	movs	r6, #31
 8000f42:	0025      	movs	r5, r4
 8000f44:	4276      	negs	r6, r6
 8000f46:	1af3      	subs	r3, r6, r3
 8000f48:	40dd      	lsrs	r5, r3
 8000f4a:	002b      	movs	r3, r5
 8000f4c:	2920      	cmp	r1, #32
 8000f4e:	d005      	beq.n	8000f5c <__aeabi_dmul+0x478>
 8000f50:	4942      	ldr	r1, [pc, #264]	; (800105c <__aeabi_dmul+0x578>)
 8000f52:	9d02      	ldr	r5, [sp, #8]
 8000f54:	468c      	mov	ip, r1
 8000f56:	4465      	add	r5, ip
 8000f58:	40ac      	lsls	r4, r5
 8000f5a:	4320      	orrs	r0, r4
 8000f5c:	1e41      	subs	r1, r0, #1
 8000f5e:	4188      	sbcs	r0, r1
 8000f60:	4318      	orrs	r0, r3
 8000f62:	2307      	movs	r3, #7
 8000f64:	001d      	movs	r5, r3
 8000f66:	2400      	movs	r4, #0
 8000f68:	4005      	ands	r5, r0
 8000f6a:	4203      	tst	r3, r0
 8000f6c:	d04a      	beq.n	8001004 <__aeabi_dmul+0x520>
 8000f6e:	230f      	movs	r3, #15
 8000f70:	2400      	movs	r4, #0
 8000f72:	4003      	ands	r3, r0
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d042      	beq.n	8000ffe <__aeabi_dmul+0x51a>
 8000f78:	1d03      	adds	r3, r0, #4
 8000f7a:	4283      	cmp	r3, r0
 8000f7c:	4180      	sbcs	r0, r0
 8000f7e:	4240      	negs	r0, r0
 8000f80:	1824      	adds	r4, r4, r0
 8000f82:	0018      	movs	r0, r3
 8000f84:	0223      	lsls	r3, r4, #8
 8000f86:	d53a      	bpl.n	8000ffe <__aeabi_dmul+0x51a>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2400      	movs	r4, #0
 8000f8c:	2500      	movs	r5, #0
 8000f8e:	e61b      	b.n	8000bc8 <__aeabi_dmul+0xe4>
 8000f90:	f000 f950 	bl	8001234 <__clzsi2>
 8000f94:	0001      	movs	r1, r0
 8000f96:	0003      	movs	r3, r0
 8000f98:	3115      	adds	r1, #21
 8000f9a:	3320      	adds	r3, #32
 8000f9c:	291c      	cmp	r1, #28
 8000f9e:	dd8f      	ble.n	8000ec0 <__aeabi_dmul+0x3dc>
 8000fa0:	3808      	subs	r0, #8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4084      	lsls	r4, r0
 8000fa6:	4692      	mov	sl, r2
 8000fa8:	46a3      	mov	fp, r4
 8000faa:	e796      	b.n	8000eda <__aeabi_dmul+0x3f6>
 8000fac:	f000 f942 	bl	8001234 <__clzsi2>
 8000fb0:	0001      	movs	r1, r0
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	3115      	adds	r1, #21
 8000fb6:	3320      	adds	r3, #32
 8000fb8:	291c      	cmp	r1, #28
 8000fba:	dc00      	bgt.n	8000fbe <__aeabi_dmul+0x4da>
 8000fbc:	e758      	b.n	8000e70 <__aeabi_dmul+0x38c>
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	464c      	mov	r4, r9
 8000fc2:	3a08      	subs	r2, #8
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	4094      	lsls	r4, r2
 8000fc8:	e75d      	b.n	8000e86 <__aeabi_dmul+0x3a2>
 8000fca:	9b01      	ldr	r3, [sp, #4]
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	e711      	b.n	8000df4 <__aeabi_dmul+0x310>
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <__aeabi_dmul+0x57c>)
 8000fd2:	0026      	movs	r6, r4
 8000fd4:	469c      	mov	ip, r3
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	9d02      	ldr	r5, [sp, #8]
 8000fda:	40cb      	lsrs	r3, r1
 8000fdc:	4465      	add	r5, ip
 8000fde:	40ae      	lsls	r6, r5
 8000fe0:	431e      	orrs	r6, r3
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	40ab      	lsls	r3, r5
 8000fe6:	1e58      	subs	r0, r3, #1
 8000fe8:	4183      	sbcs	r3, r0
 8000fea:	0030      	movs	r0, r6
 8000fec:	4318      	orrs	r0, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	0743      	lsls	r3, r0, #29
 8000ff2:	d0c7      	beq.n	8000f84 <__aeabi_dmul+0x4a0>
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	4003      	ands	r3, r0
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d1bd      	bne.n	8000f78 <__aeabi_dmul+0x494>
 8000ffc:	e7c2      	b.n	8000f84 <__aeabi_dmul+0x4a0>
 8000ffe:	0765      	lsls	r5, r4, #29
 8001000:	0264      	lsls	r4, r4, #9
 8001002:	0b24      	lsrs	r4, r4, #12
 8001004:	08c0      	lsrs	r0, r0, #3
 8001006:	2300      	movs	r3, #0
 8001008:	4305      	orrs	r5, r0
 800100a:	e5dd      	b.n	8000bc8 <__aeabi_dmul+0xe4>
 800100c:	2500      	movs	r5, #0
 800100e:	2302      	movs	r3, #2
 8001010:	2e0f      	cmp	r6, #15
 8001012:	d10c      	bne.n	800102e <__aeabi_dmul+0x54a>
 8001014:	2480      	movs	r4, #128	; 0x80
 8001016:	465b      	mov	r3, fp
 8001018:	0324      	lsls	r4, r4, #12
 800101a:	4223      	tst	r3, r4
 800101c:	d00e      	beq.n	800103c <__aeabi_dmul+0x558>
 800101e:	4221      	tst	r1, r4
 8001020:	d10c      	bne.n	800103c <__aeabi_dmul+0x558>
 8001022:	430c      	orrs	r4, r1
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	003a      	movs	r2, r7
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <__aeabi_dmul+0x580>)
 800102a:	0b24      	lsrs	r4, r4, #12
 800102c:	e5cc      	b.n	8000bc8 <__aeabi_dmul+0xe4>
 800102e:	2e0b      	cmp	r6, #11
 8001030:	d000      	beq.n	8001034 <__aeabi_dmul+0x550>
 8001032:	e5a2      	b.n	8000b7a <__aeabi_dmul+0x96>
 8001034:	468b      	mov	fp, r1
 8001036:	46aa      	mov	sl, r5
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	e5f7      	b.n	8000c2c <__aeabi_dmul+0x148>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	465b      	mov	r3, fp
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	4642      	mov	r2, r8
 8001048:	4655      	mov	r5, sl
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <__aeabi_dmul+0x580>)
 800104c:	0b24      	lsrs	r4, r4, #12
 800104e:	e5bb      	b.n	8000bc8 <__aeabi_dmul+0xe4>
 8001050:	464d      	mov	r5, r9
 8001052:	0021      	movs	r1, r4
 8001054:	2303      	movs	r3, #3
 8001056:	e7db      	b.n	8001010 <__aeabi_dmul+0x52c>
 8001058:	fffffc0d 	.word	0xfffffc0d
 800105c:	0000043e 	.word	0x0000043e
 8001060:	0000041e 	.word	0x0000041e
 8001064:	000007ff 	.word	0x000007ff

08001068 <__aeabi_ui2d>:
 8001068:	b510      	push	{r4, lr}
 800106a:	1e04      	subs	r4, r0, #0
 800106c:	d010      	beq.n	8001090 <__aeabi_ui2d+0x28>
 800106e:	f000 f8e1 	bl	8001234 <__clzsi2>
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <__aeabi_ui2d+0x48>)
 8001074:	1a1b      	subs	r3, r3, r0
 8001076:	280a      	cmp	r0, #10
 8001078:	dc11      	bgt.n	800109e <__aeabi_ui2d+0x36>
 800107a:	220b      	movs	r2, #11
 800107c:	0021      	movs	r1, r4
 800107e:	1a12      	subs	r2, r2, r0
 8001080:	40d1      	lsrs	r1, r2
 8001082:	3015      	adds	r0, #21
 8001084:	030a      	lsls	r2, r1, #12
 8001086:	055b      	lsls	r3, r3, #21
 8001088:	4084      	lsls	r4, r0
 800108a:	0b12      	lsrs	r2, r2, #12
 800108c:	0d5b      	lsrs	r3, r3, #21
 800108e:	e001      	b.n	8001094 <__aeabi_ui2d+0x2c>
 8001090:	2300      	movs	r3, #0
 8001092:	2200      	movs	r2, #0
 8001094:	051b      	lsls	r3, r3, #20
 8001096:	4313      	orrs	r3, r2
 8001098:	0020      	movs	r0, r4
 800109a:	0019      	movs	r1, r3
 800109c:	bd10      	pop	{r4, pc}
 800109e:	0022      	movs	r2, r4
 80010a0:	380b      	subs	r0, #11
 80010a2:	4082      	lsls	r2, r0
 80010a4:	055b      	lsls	r3, r3, #21
 80010a6:	0312      	lsls	r2, r2, #12
 80010a8:	2400      	movs	r4, #0
 80010aa:	0b12      	lsrs	r2, r2, #12
 80010ac:	0d5b      	lsrs	r3, r3, #21
 80010ae:	e7f1      	b.n	8001094 <__aeabi_ui2d+0x2c>
 80010b0:	0000041e 	.word	0x0000041e

080010b4 <__aeabi_d2f>:
 80010b4:	0002      	movs	r2, r0
 80010b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b8:	004b      	lsls	r3, r1, #1
 80010ba:	030d      	lsls	r5, r1, #12
 80010bc:	0f40      	lsrs	r0, r0, #29
 80010be:	0d5b      	lsrs	r3, r3, #21
 80010c0:	0fcc      	lsrs	r4, r1, #31
 80010c2:	0a6d      	lsrs	r5, r5, #9
 80010c4:	493a      	ldr	r1, [pc, #232]	; (80011b0 <__aeabi_d2f+0xfc>)
 80010c6:	4305      	orrs	r5, r0
 80010c8:	1c58      	adds	r0, r3, #1
 80010ca:	00d7      	lsls	r7, r2, #3
 80010cc:	4208      	tst	r0, r1
 80010ce:	d00a      	beq.n	80010e6 <__aeabi_d2f+0x32>
 80010d0:	4938      	ldr	r1, [pc, #224]	; (80011b4 <__aeabi_d2f+0x100>)
 80010d2:	1859      	adds	r1, r3, r1
 80010d4:	29fe      	cmp	r1, #254	; 0xfe
 80010d6:	dd16      	ble.n	8001106 <__aeabi_d2f+0x52>
 80010d8:	20ff      	movs	r0, #255	; 0xff
 80010da:	2200      	movs	r2, #0
 80010dc:	05c0      	lsls	r0, r0, #23
 80010de:	4310      	orrs	r0, r2
 80010e0:	07e4      	lsls	r4, r4, #31
 80010e2:	4320      	orrs	r0, r4
 80010e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d106      	bne.n	80010f8 <__aeabi_d2f+0x44>
 80010ea:	433d      	orrs	r5, r7
 80010ec:	d026      	beq.n	800113c <__aeabi_d2f+0x88>
 80010ee:	2205      	movs	r2, #5
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	0a52      	lsrs	r2, r2, #9
 80010f4:	b2d8      	uxtb	r0, r3
 80010f6:	e7f1      	b.n	80010dc <__aeabi_d2f+0x28>
 80010f8:	432f      	orrs	r7, r5
 80010fa:	d0ed      	beq.n	80010d8 <__aeabi_d2f+0x24>
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	03d2      	lsls	r2, r2, #15
 8001100:	20ff      	movs	r0, #255	; 0xff
 8001102:	432a      	orrs	r2, r5
 8001104:	e7ea      	b.n	80010dc <__aeabi_d2f+0x28>
 8001106:	2900      	cmp	r1, #0
 8001108:	dd1b      	ble.n	8001142 <__aeabi_d2f+0x8e>
 800110a:	0192      	lsls	r2, r2, #6
 800110c:	1e50      	subs	r0, r2, #1
 800110e:	4182      	sbcs	r2, r0
 8001110:	00ed      	lsls	r5, r5, #3
 8001112:	0f7f      	lsrs	r7, r7, #29
 8001114:	432a      	orrs	r2, r5
 8001116:	433a      	orrs	r2, r7
 8001118:	0753      	lsls	r3, r2, #29
 800111a:	d047      	beq.n	80011ac <__aeabi_d2f+0xf8>
 800111c:	230f      	movs	r3, #15
 800111e:	4013      	ands	r3, r2
 8001120:	2b04      	cmp	r3, #4
 8001122:	d000      	beq.n	8001126 <__aeabi_d2f+0x72>
 8001124:	3204      	adds	r2, #4
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	04db      	lsls	r3, r3, #19
 800112a:	4013      	ands	r3, r2
 800112c:	d03e      	beq.n	80011ac <__aeabi_d2f+0xf8>
 800112e:	1c48      	adds	r0, r1, #1
 8001130:	29fe      	cmp	r1, #254	; 0xfe
 8001132:	d0d1      	beq.n	80010d8 <__aeabi_d2f+0x24>
 8001134:	0192      	lsls	r2, r2, #6
 8001136:	0a52      	lsrs	r2, r2, #9
 8001138:	b2c0      	uxtb	r0, r0
 800113a:	e7cf      	b.n	80010dc <__aeabi_d2f+0x28>
 800113c:	2000      	movs	r0, #0
 800113e:	2200      	movs	r2, #0
 8001140:	e7cc      	b.n	80010dc <__aeabi_d2f+0x28>
 8001142:	000a      	movs	r2, r1
 8001144:	3217      	adds	r2, #23
 8001146:	db2f      	blt.n	80011a8 <__aeabi_d2f+0xf4>
 8001148:	2680      	movs	r6, #128	; 0x80
 800114a:	0436      	lsls	r6, r6, #16
 800114c:	432e      	orrs	r6, r5
 800114e:	251e      	movs	r5, #30
 8001150:	1a6d      	subs	r5, r5, r1
 8001152:	2d1f      	cmp	r5, #31
 8001154:	dd11      	ble.n	800117a <__aeabi_d2f+0xc6>
 8001156:	2202      	movs	r2, #2
 8001158:	4252      	negs	r2, r2
 800115a:	1a52      	subs	r2, r2, r1
 800115c:	0031      	movs	r1, r6
 800115e:	40d1      	lsrs	r1, r2
 8001160:	2d20      	cmp	r5, #32
 8001162:	d004      	beq.n	800116e <__aeabi_d2f+0xba>
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <__aeabi_d2f+0x104>)
 8001166:	4694      	mov	ip, r2
 8001168:	4463      	add	r3, ip
 800116a:	409e      	lsls	r6, r3
 800116c:	4337      	orrs	r7, r6
 800116e:	003a      	movs	r2, r7
 8001170:	1e53      	subs	r3, r2, #1
 8001172:	419a      	sbcs	r2, r3
 8001174:	430a      	orrs	r2, r1
 8001176:	2100      	movs	r1, #0
 8001178:	e7ce      	b.n	8001118 <__aeabi_d2f+0x64>
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <__aeabi_d2f+0x108>)
 800117c:	0038      	movs	r0, r7
 800117e:	4694      	mov	ip, r2
 8001180:	4463      	add	r3, ip
 8001182:	4098      	lsls	r0, r3
 8001184:	003a      	movs	r2, r7
 8001186:	1e41      	subs	r1, r0, #1
 8001188:	4188      	sbcs	r0, r1
 800118a:	409e      	lsls	r6, r3
 800118c:	40ea      	lsrs	r2, r5
 800118e:	4330      	orrs	r0, r6
 8001190:	4302      	orrs	r2, r0
 8001192:	2100      	movs	r1, #0
 8001194:	0753      	lsls	r3, r2, #29
 8001196:	d1c1      	bne.n	800111c <__aeabi_d2f+0x68>
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	0013      	movs	r3, r2
 800119c:	04c9      	lsls	r1, r1, #19
 800119e:	2001      	movs	r0, #1
 80011a0:	400b      	ands	r3, r1
 80011a2:	420a      	tst	r2, r1
 80011a4:	d1c6      	bne.n	8001134 <__aeabi_d2f+0x80>
 80011a6:	e7a3      	b.n	80010f0 <__aeabi_d2f+0x3c>
 80011a8:	2300      	movs	r3, #0
 80011aa:	e7a0      	b.n	80010ee <__aeabi_d2f+0x3a>
 80011ac:	000b      	movs	r3, r1
 80011ae:	e79f      	b.n	80010f0 <__aeabi_d2f+0x3c>
 80011b0:	000007fe 	.word	0x000007fe
 80011b4:	fffffc80 	.word	0xfffffc80
 80011b8:	fffffca2 	.word	0xfffffca2
 80011bc:	fffffc82 	.word	0xfffffc82

080011c0 <__aeabi_cfrcmple>:
 80011c0:	4684      	mov	ip, r0
 80011c2:	0008      	movs	r0, r1
 80011c4:	4661      	mov	r1, ip
 80011c6:	e7ff      	b.n	80011c8 <__aeabi_cfcmpeq>

080011c8 <__aeabi_cfcmpeq>:
 80011c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80011ca:	f000 f8bd 	bl	8001348 <__lesf2>
 80011ce:	2800      	cmp	r0, #0
 80011d0:	d401      	bmi.n	80011d6 <__aeabi_cfcmpeq+0xe>
 80011d2:	2100      	movs	r1, #0
 80011d4:	42c8      	cmn	r0, r1
 80011d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080011d8 <__aeabi_fcmpeq>:
 80011d8:	b510      	push	{r4, lr}
 80011da:	f000 f849 	bl	8001270 <__eqsf2>
 80011de:	4240      	negs	r0, r0
 80011e0:	3001      	adds	r0, #1
 80011e2:	bd10      	pop	{r4, pc}

080011e4 <__aeabi_fcmplt>:
 80011e4:	b510      	push	{r4, lr}
 80011e6:	f000 f8af 	bl	8001348 <__lesf2>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	db01      	blt.n	80011f2 <__aeabi_fcmplt+0xe>
 80011ee:	2000      	movs	r0, #0
 80011f0:	bd10      	pop	{r4, pc}
 80011f2:	2001      	movs	r0, #1
 80011f4:	bd10      	pop	{r4, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)

080011f8 <__aeabi_fcmple>:
 80011f8:	b510      	push	{r4, lr}
 80011fa:	f000 f8a5 	bl	8001348 <__lesf2>
 80011fe:	2800      	cmp	r0, #0
 8001200:	dd01      	ble.n	8001206 <__aeabi_fcmple+0xe>
 8001202:	2000      	movs	r0, #0
 8001204:	bd10      	pop	{r4, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	bd10      	pop	{r4, pc}
 800120a:	46c0      	nop			; (mov r8, r8)

0800120c <__aeabi_fcmpgt>:
 800120c:	b510      	push	{r4, lr}
 800120e:	f000 f855 	bl	80012bc <__gesf2>
 8001212:	2800      	cmp	r0, #0
 8001214:	dc01      	bgt.n	800121a <__aeabi_fcmpgt+0xe>
 8001216:	2000      	movs	r0, #0
 8001218:	bd10      	pop	{r4, pc}
 800121a:	2001      	movs	r0, #1
 800121c:	bd10      	pop	{r4, pc}
 800121e:	46c0      	nop			; (mov r8, r8)

08001220 <__aeabi_fcmpge>:
 8001220:	b510      	push	{r4, lr}
 8001222:	f000 f84b 	bl	80012bc <__gesf2>
 8001226:	2800      	cmp	r0, #0
 8001228:	da01      	bge.n	800122e <__aeabi_fcmpge+0xe>
 800122a:	2000      	movs	r0, #0
 800122c:	bd10      	pop	{r4, pc}
 800122e:	2001      	movs	r0, #1
 8001230:	bd10      	pop	{r4, pc}
 8001232:	46c0      	nop			; (mov r8, r8)

08001234 <__clzsi2>:
 8001234:	211c      	movs	r1, #28
 8001236:	2301      	movs	r3, #1
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	4298      	cmp	r0, r3
 800123c:	d301      	bcc.n	8001242 <__clzsi2+0xe>
 800123e:	0c00      	lsrs	r0, r0, #16
 8001240:	3910      	subs	r1, #16
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	4298      	cmp	r0, r3
 8001246:	d301      	bcc.n	800124c <__clzsi2+0x18>
 8001248:	0a00      	lsrs	r0, r0, #8
 800124a:	3908      	subs	r1, #8
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	4298      	cmp	r0, r3
 8001250:	d301      	bcc.n	8001256 <__clzsi2+0x22>
 8001252:	0900      	lsrs	r0, r0, #4
 8001254:	3904      	subs	r1, #4
 8001256:	a202      	add	r2, pc, #8	; (adr r2, 8001260 <__clzsi2+0x2c>)
 8001258:	5c10      	ldrb	r0, [r2, r0]
 800125a:	1840      	adds	r0, r0, r1
 800125c:	4770      	bx	lr
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	02020304 	.word	0x02020304
 8001264:	01010101 	.word	0x01010101
	...

08001270 <__eqsf2>:
 8001270:	b570      	push	{r4, r5, r6, lr}
 8001272:	0042      	lsls	r2, r0, #1
 8001274:	0245      	lsls	r5, r0, #9
 8001276:	024e      	lsls	r6, r1, #9
 8001278:	004c      	lsls	r4, r1, #1
 800127a:	0fc3      	lsrs	r3, r0, #31
 800127c:	0a6d      	lsrs	r5, r5, #9
 800127e:	2001      	movs	r0, #1
 8001280:	0e12      	lsrs	r2, r2, #24
 8001282:	0a76      	lsrs	r6, r6, #9
 8001284:	0e24      	lsrs	r4, r4, #24
 8001286:	0fc9      	lsrs	r1, r1, #31
 8001288:	2aff      	cmp	r2, #255	; 0xff
 800128a:	d006      	beq.n	800129a <__eqsf2+0x2a>
 800128c:	2cff      	cmp	r4, #255	; 0xff
 800128e:	d003      	beq.n	8001298 <__eqsf2+0x28>
 8001290:	42a2      	cmp	r2, r4
 8001292:	d101      	bne.n	8001298 <__eqsf2+0x28>
 8001294:	42b5      	cmp	r5, r6
 8001296:	d006      	beq.n	80012a6 <__eqsf2+0x36>
 8001298:	bd70      	pop	{r4, r5, r6, pc}
 800129a:	2d00      	cmp	r5, #0
 800129c:	d1fc      	bne.n	8001298 <__eqsf2+0x28>
 800129e:	2cff      	cmp	r4, #255	; 0xff
 80012a0:	d1fa      	bne.n	8001298 <__eqsf2+0x28>
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d1f8      	bne.n	8001298 <__eqsf2+0x28>
 80012a6:	428b      	cmp	r3, r1
 80012a8:	d006      	beq.n	80012b8 <__eqsf2+0x48>
 80012aa:	2001      	movs	r0, #1
 80012ac:	2a00      	cmp	r2, #0
 80012ae:	d1f3      	bne.n	8001298 <__eqsf2+0x28>
 80012b0:	0028      	movs	r0, r5
 80012b2:	1e43      	subs	r3, r0, #1
 80012b4:	4198      	sbcs	r0, r3
 80012b6:	e7ef      	b.n	8001298 <__eqsf2+0x28>
 80012b8:	2000      	movs	r0, #0
 80012ba:	e7ed      	b.n	8001298 <__eqsf2+0x28>

080012bc <__gesf2>:
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	0042      	lsls	r2, r0, #1
 80012c0:	0245      	lsls	r5, r0, #9
 80012c2:	024e      	lsls	r6, r1, #9
 80012c4:	004c      	lsls	r4, r1, #1
 80012c6:	0fc3      	lsrs	r3, r0, #31
 80012c8:	0a6d      	lsrs	r5, r5, #9
 80012ca:	0e12      	lsrs	r2, r2, #24
 80012cc:	0a76      	lsrs	r6, r6, #9
 80012ce:	0e24      	lsrs	r4, r4, #24
 80012d0:	0fc8      	lsrs	r0, r1, #31
 80012d2:	2aff      	cmp	r2, #255	; 0xff
 80012d4:	d01b      	beq.n	800130e <__gesf2+0x52>
 80012d6:	2cff      	cmp	r4, #255	; 0xff
 80012d8:	d00e      	beq.n	80012f8 <__gesf2+0x3c>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d11b      	bne.n	8001316 <__gesf2+0x5a>
 80012de:	2c00      	cmp	r4, #0
 80012e0:	d101      	bne.n	80012e6 <__gesf2+0x2a>
 80012e2:	2e00      	cmp	r6, #0
 80012e4:	d01c      	beq.n	8001320 <__gesf2+0x64>
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	d00c      	beq.n	8001304 <__gesf2+0x48>
 80012ea:	4283      	cmp	r3, r0
 80012ec:	d01c      	beq.n	8001328 <__gesf2+0x6c>
 80012ee:	2102      	movs	r1, #2
 80012f0:	1e58      	subs	r0, r3, #1
 80012f2:	4008      	ands	r0, r1
 80012f4:	3801      	subs	r0, #1
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
 80012f8:	2e00      	cmp	r6, #0
 80012fa:	d122      	bne.n	8001342 <__gesf2+0x86>
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d1f4      	bne.n	80012ea <__gesf2+0x2e>
 8001300:	2d00      	cmp	r5, #0
 8001302:	d1f2      	bne.n	80012ea <__gesf2+0x2e>
 8001304:	2800      	cmp	r0, #0
 8001306:	d1f6      	bne.n	80012f6 <__gesf2+0x3a>
 8001308:	2001      	movs	r0, #1
 800130a:	4240      	negs	r0, r0
 800130c:	e7f3      	b.n	80012f6 <__gesf2+0x3a>
 800130e:	2d00      	cmp	r5, #0
 8001310:	d117      	bne.n	8001342 <__gesf2+0x86>
 8001312:	2cff      	cmp	r4, #255	; 0xff
 8001314:	d0f0      	beq.n	80012f8 <__gesf2+0x3c>
 8001316:	2c00      	cmp	r4, #0
 8001318:	d1e7      	bne.n	80012ea <__gesf2+0x2e>
 800131a:	2e00      	cmp	r6, #0
 800131c:	d1e5      	bne.n	80012ea <__gesf2+0x2e>
 800131e:	e7e6      	b.n	80012ee <__gesf2+0x32>
 8001320:	2000      	movs	r0, #0
 8001322:	2d00      	cmp	r5, #0
 8001324:	d0e7      	beq.n	80012f6 <__gesf2+0x3a>
 8001326:	e7e2      	b.n	80012ee <__gesf2+0x32>
 8001328:	42a2      	cmp	r2, r4
 800132a:	dc05      	bgt.n	8001338 <__gesf2+0x7c>
 800132c:	dbea      	blt.n	8001304 <__gesf2+0x48>
 800132e:	42b5      	cmp	r5, r6
 8001330:	d802      	bhi.n	8001338 <__gesf2+0x7c>
 8001332:	d3e7      	bcc.n	8001304 <__gesf2+0x48>
 8001334:	2000      	movs	r0, #0
 8001336:	e7de      	b.n	80012f6 <__gesf2+0x3a>
 8001338:	4243      	negs	r3, r0
 800133a:	4158      	adcs	r0, r3
 800133c:	0040      	lsls	r0, r0, #1
 800133e:	3801      	subs	r0, #1
 8001340:	e7d9      	b.n	80012f6 <__gesf2+0x3a>
 8001342:	2002      	movs	r0, #2
 8001344:	4240      	negs	r0, r0
 8001346:	e7d6      	b.n	80012f6 <__gesf2+0x3a>

08001348 <__lesf2>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	0042      	lsls	r2, r0, #1
 800134c:	0245      	lsls	r5, r0, #9
 800134e:	024e      	lsls	r6, r1, #9
 8001350:	004c      	lsls	r4, r1, #1
 8001352:	0fc3      	lsrs	r3, r0, #31
 8001354:	0a6d      	lsrs	r5, r5, #9
 8001356:	0e12      	lsrs	r2, r2, #24
 8001358:	0a76      	lsrs	r6, r6, #9
 800135a:	0e24      	lsrs	r4, r4, #24
 800135c:	0fc8      	lsrs	r0, r1, #31
 800135e:	2aff      	cmp	r2, #255	; 0xff
 8001360:	d00b      	beq.n	800137a <__lesf2+0x32>
 8001362:	2cff      	cmp	r4, #255	; 0xff
 8001364:	d00d      	beq.n	8001382 <__lesf2+0x3a>
 8001366:	2a00      	cmp	r2, #0
 8001368:	d11f      	bne.n	80013aa <__lesf2+0x62>
 800136a:	2c00      	cmp	r4, #0
 800136c:	d116      	bne.n	800139c <__lesf2+0x54>
 800136e:	2e00      	cmp	r6, #0
 8001370:	d114      	bne.n	800139c <__lesf2+0x54>
 8001372:	2000      	movs	r0, #0
 8001374:	2d00      	cmp	r5, #0
 8001376:	d010      	beq.n	800139a <__lesf2+0x52>
 8001378:	e009      	b.n	800138e <__lesf2+0x46>
 800137a:	2d00      	cmp	r5, #0
 800137c:	d10c      	bne.n	8001398 <__lesf2+0x50>
 800137e:	2cff      	cmp	r4, #255	; 0xff
 8001380:	d113      	bne.n	80013aa <__lesf2+0x62>
 8001382:	2e00      	cmp	r6, #0
 8001384:	d108      	bne.n	8001398 <__lesf2+0x50>
 8001386:	2a00      	cmp	r2, #0
 8001388:	d008      	beq.n	800139c <__lesf2+0x54>
 800138a:	4283      	cmp	r3, r0
 800138c:	d012      	beq.n	80013b4 <__lesf2+0x6c>
 800138e:	2102      	movs	r1, #2
 8001390:	1e58      	subs	r0, r3, #1
 8001392:	4008      	ands	r0, r1
 8001394:	3801      	subs	r0, #1
 8001396:	e000      	b.n	800139a <__lesf2+0x52>
 8001398:	2002      	movs	r0, #2
 800139a:	bd70      	pop	{r4, r5, r6, pc}
 800139c:	2d00      	cmp	r5, #0
 800139e:	d1f4      	bne.n	800138a <__lesf2+0x42>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d1fa      	bne.n	800139a <__lesf2+0x52>
 80013a4:	2001      	movs	r0, #1
 80013a6:	4240      	negs	r0, r0
 80013a8:	e7f7      	b.n	800139a <__lesf2+0x52>
 80013aa:	2c00      	cmp	r4, #0
 80013ac:	d1ed      	bne.n	800138a <__lesf2+0x42>
 80013ae:	2e00      	cmp	r6, #0
 80013b0:	d1eb      	bne.n	800138a <__lesf2+0x42>
 80013b2:	e7ec      	b.n	800138e <__lesf2+0x46>
 80013b4:	42a2      	cmp	r2, r4
 80013b6:	dc05      	bgt.n	80013c4 <__lesf2+0x7c>
 80013b8:	dbf2      	blt.n	80013a0 <__lesf2+0x58>
 80013ba:	42b5      	cmp	r5, r6
 80013bc:	d802      	bhi.n	80013c4 <__lesf2+0x7c>
 80013be:	d3ef      	bcc.n	80013a0 <__lesf2+0x58>
 80013c0:	2000      	movs	r0, #0
 80013c2:	e7ea      	b.n	800139a <__lesf2+0x52>
 80013c4:	4243      	negs	r3, r0
 80013c6:	4158      	adcs	r0, r3
 80013c8:	0040      	lsls	r0, r0, #1
 80013ca:	3801      	subs	r0, #1
 80013cc:	e7e5      	b.n	800139a <__lesf2+0x52>
 80013ce:	46c0      	nop			; (mov r8, r8)

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b510      	push	{r4, lr}
 80013d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	2214      	movs	r2, #20
 80013d6:	2100      	movs	r1, #0
 80013d8:	a803      	add	r0, sp, #12
 80013da:	f004 fbce 	bl	8005b7a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_GPIO_Init+0x6c>)
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	02c9      	lsls	r1, r1, #11
 80013e6:	430a      	orrs	r2, r1
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	400a      	ands	r2, r1
 80013ee:	9200      	str	r2, [sp, #0]
 80013f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	03c9      	lsls	r1, r1, #15
 80013f8:	430a      	orrs	r2, r1
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	400a      	ands	r2, r1
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	0289      	lsls	r1, r1, #10
 800140a:	430a      	orrs	r2, r1
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	400b      	ands	r3, r1
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pins : PB8 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1;
 8001416:	2381      	movs	r3, #129	; 0x81
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141c:	2403      	movs	r4, #3
 800141e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	a903      	add	r1, sp, #12
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <MX_GPIO_Init+0x70>)
 8001424:	f000 feae 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001428:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001430:	a903      	add	r1, sp, #12
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_GPIO_Init+0x74>)
 8001434:	f000 fea6 	bl	8002184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001438:	b008      	add	sp, #32
 800143a:	bd10      	pop	{r4, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	48000400 	.word	0x48000400
 8001444:	48001400 	.word	0x48001400

08001448 <MX_DMA_Init>:
{
 8001448:	b500      	push	{lr}
 800144a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144c:	4a09      	ldr	r2, [pc, #36]	; (8001474 <MX_DMA_Init+0x2c>)
 800144e:	6951      	ldr	r1, [r2, #20]
 8001450:	2301      	movs	r3, #1
 8001452:	4319      	orrs	r1, r3
 8001454:	6151      	str	r1, [r2, #20]
 8001456:	6952      	ldr	r2, [r2, #20]
 8001458:	4013      	ands	r3, r2
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2009      	movs	r0, #9
 8001464:	f000 fd56 	bl	8001f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001468:	2009      	movs	r0, #9
 800146a:	f000 fd83 	bl	8001f74 <HAL_NVIC_EnableIRQ>
}
 800146e:	b003      	add	sp, #12
 8001470:	bd00      	pop	{pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	40021000 	.word	0x40021000

08001478 <pow10>:
{
 8001478:	0001      	movs	r1, r0
	for (uint8_t i = 0; i < x; i++) {
 800147a:	2300      	movs	r3, #0
	uint16_t res = 1;
 800147c:	2001      	movs	r0, #1
	for (uint8_t i = 0; i < x; i++) {
 800147e:	e005      	b.n	800148c <pow10+0x14>
		res*=10;
 8001480:	0082      	lsls	r2, r0, #2
 8001482:	1880      	adds	r0, r0, r2
 8001484:	0040      	lsls	r0, r0, #1
 8001486:	b280      	uxth	r0, r0
	for (uint8_t i = 0; i < x; i++) {
 8001488:	3301      	adds	r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	428b      	cmp	r3, r1
 800148e:	d3f7      	bcc.n	8001480 <pow10+0x8>
}
 8001490:	4770      	bx	lr
	...

08001494 <toString>:
{
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	46d6      	mov	lr, sl
 8001498:	464f      	mov	r7, r9
 800149a:	4646      	mov	r6, r8
 800149c:	b5c0      	push	{r6, r7, lr}
 800149e:	1c04      	adds	r4, r0, #0
 80014a0:	4688      	mov	r8, r1
 80014a2:	0017      	movs	r7, r2
	uint8_t x = (uint8_t)number;
 80014a4:	f7fe ffa6 	bl	80003f4 <__aeabi_f2uiz>
 80014a8:	b2c3      	uxtb	r3, r0
 80014aa:	469a      	mov	sl, r3
	uint8_t f = (uint8_t)((number-x)*100);
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff fac7 	bl	8000a40 <__aeabi_i2f>
 80014b2:	1c01      	adds	r1, r0, #0
 80014b4:	1c20      	adds	r0, r4, #0
 80014b6:	f7ff f903 	bl	80006c0 <__aeabi_fsub>
 80014ba:	4922      	ldr	r1, [pc, #136]	; (8001544 <toString+0xb0>)
 80014bc:	f7fe ffb2 	bl	8000424 <__aeabi_fmul>
 80014c0:	f7fe ff98 	bl	80003f4 <__aeabi_f2uiz>
 80014c4:	b2c3      	uxtb	r3, r0
 80014c6:	4699      	mov	r9, r3
	uint16_t d = pow10(size-2-2-1); //2 for the float part, 2 for the '.' and the '\n'
 80014c8:	1f78      	subs	r0, r7, #5
 80014ca:	b2c0      	uxtb	r0, r0
 80014cc:	f7ff ffd4 	bl	8001478 <pow10>
 80014d0:	0005      	movs	r5, r0
	for(uint8_t i = 0; i<size-4; i++) {
 80014d2:	2600      	movs	r6, #0
 80014d4:	e014      	b.n	8001500 <toString+0x6c>
		uint8_t res = x/d;
 80014d6:	0029      	movs	r1, r5
 80014d8:	4650      	mov	r0, sl
 80014da:	f7fe fe9f 	bl	800021c <__divsi3>
 80014de:	b2c4      	uxtb	r4, r0
		x -= d*res;
 80014e0:	0028      	movs	r0, r5
 80014e2:	4360      	muls	r0, r4
 80014e4:	4653      	mov	r3, sl
 80014e6:	1a18      	subs	r0, r3, r0
 80014e8:	b2c3      	uxtb	r3, r0
 80014ea:	469a      	mov	sl, r3
		d /= 10;
 80014ec:	210a      	movs	r1, #10
 80014ee:	0028      	movs	r0, r5
 80014f0:	f7fe fe0a 	bl	8000108 <__udivsi3>
 80014f4:	b285      	uxth	r5, r0
		target[i] = res+0x30;
 80014f6:	3430      	adds	r4, #48	; 0x30
 80014f8:	4643      	mov	r3, r8
 80014fa:	559c      	strb	r4, [r3, r6]
	for(uint8_t i = 0; i<size-4; i++) {
 80014fc:	3601      	adds	r6, #1
 80014fe:	b2f6      	uxtb	r6, r6
 8001500:	1f3b      	subs	r3, r7, #4
 8001502:	429e      	cmp	r6, r3
 8001504:	dbe7      	blt.n	80014d6 <toString+0x42>
	target[size-4] = '.';
 8001506:	222e      	movs	r2, #46	; 0x2e
 8001508:	4641      	mov	r1, r8
 800150a:	54ca      	strb	r2, [r1, r3]
	uint8_t temp = f/10;
 800150c:	210a      	movs	r1, #10
 800150e:	4648      	mov	r0, r9
 8001510:	f7fe fdfa 	bl	8000108 <__udivsi3>
 8001514:	b2c0      	uxtb	r0, r0
	target[size-3] = temp+0x30;
 8001516:	1efb      	subs	r3, r7, #3
 8001518:	0002      	movs	r2, r0
 800151a:	3230      	adds	r2, #48	; 0x30
 800151c:	4641      	mov	r1, r8
 800151e:	54ca      	strb	r2, [r1, r3]
	target[size-2] = f-(temp*10)+0x30;
 8001520:	0143      	lsls	r3, r0, #5
 8001522:	1a1b      	subs	r3, r3, r0
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	1a1b      	subs	r3, r3, r0
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	444b      	add	r3, r9
 800152c:	b2db      	uxtb	r3, r3
 800152e:	1eba      	subs	r2, r7, #2
 8001530:	3330      	adds	r3, #48	; 0x30
 8001532:	548b      	strb	r3, [r1, r2]
	target[size-1] = '\n';
 8001534:	3f01      	subs	r7, #1
 8001536:	230a      	movs	r3, #10
 8001538:	55cb      	strb	r3, [r1, r7]
}
 800153a:	bce0      	pop	{r5, r6, r7}
 800153c:	46ba      	mov	sl, r7
 800153e:	46b1      	mov	r9, r6
 8001540:	46a8      	mov	r8, r5
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	42c80000 	.word	0x42c80000

08001548 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154a:	e7fe      	b.n	800154a <Error_Handler+0x2>

0800154c <MX_ADC_Init>:
{
 800154c:	b500      	push	{lr}
 800154e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001550:	220c      	movs	r2, #12
 8001552:	2100      	movs	r1, #0
 8001554:	a801      	add	r0, sp, #4
 8001556:	f004 fb10 	bl	8005b7a <memset>
  hadc.Instance = ADC1;
 800155a:	483a      	ldr	r0, [pc, #232]	; (8001644 <MX_ADC_Init+0xf8>)
 800155c:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <MX_ADC_Init+0xfc>)
 800155e:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001564:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001566:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001568:	2201      	movs	r2, #1
 800156a:	6102      	str	r2, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800156c:	2108      	movs	r1, #8
 800156e:	6141      	str	r1, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001570:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001572:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001574:	7682      	strb	r2, [r0, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001576:	76c3      	strb	r3, [r0, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001578:	21c2      	movs	r1, #194	; 0xc2
 800157a:	31ff      	adds	r1, #255	; 0xff
 800157c:	61c1      	str	r1, [r0, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157e:	6203      	str	r3, [r0, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001580:	399e      	subs	r1, #158	; 0x9e
 8001582:	39ff      	subs	r1, #255	; 0xff
 8001584:	5442      	strb	r2, [r0, r1]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001586:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001588:	f000 fa68 	bl	8001a5c <HAL_ADC_Init>
 800158c:	2800      	cmp	r0, #0
 800158e:	d146      	bne.n	800161e <MX_ADC_Init+0xd2>
  sConfig.Channel = ADC_CHANNEL_0;
 8001590:	2300      	movs	r3, #0
 8001592:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800159a:	2307      	movs	r3, #7
 800159c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800159e:	4829      	ldr	r0, [pc, #164]	; (8001644 <MX_ADC_Init+0xf8>)
 80015a0:	a901      	add	r1, sp, #4
 80015a2:	f000 fbbf 	bl	8001d24 <HAL_ADC_ConfigChannel>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d13b      	bne.n	8001622 <MX_ADC_Init+0xd6>
  sConfig.Channel = ADC_CHANNEL_1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ae:	4825      	ldr	r0, [pc, #148]	; (8001644 <MX_ADC_Init+0xf8>)
 80015b0:	a901      	add	r1, sp, #4
 80015b2:	f000 fbb7 	bl	8001d24 <HAL_ADC_ConfigChannel>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d135      	bne.n	8001626 <MX_ADC_Init+0xda>
  sConfig.Channel = ADC_CHANNEL_2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015be:	4821      	ldr	r0, [pc, #132]	; (8001644 <MX_ADC_Init+0xf8>)
 80015c0:	a901      	add	r1, sp, #4
 80015c2:	f000 fbaf 	bl	8001d24 <HAL_ADC_ConfigChannel>
 80015c6:	2800      	cmp	r0, #0
 80015c8:	d12f      	bne.n	800162a <MX_ADC_Init+0xde>
  sConfig.Channel = ADC_CHANNEL_3;
 80015ca:	2303      	movs	r3, #3
 80015cc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ce:	481d      	ldr	r0, [pc, #116]	; (8001644 <MX_ADC_Init+0xf8>)
 80015d0:	a901      	add	r1, sp, #4
 80015d2:	f000 fba7 	bl	8001d24 <HAL_ADC_ConfigChannel>
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d129      	bne.n	800162e <MX_ADC_Init+0xe2>
  sConfig.Channel = ADC_CHANNEL_4;
 80015da:	2304      	movs	r3, #4
 80015dc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015de:	4819      	ldr	r0, [pc, #100]	; (8001644 <MX_ADC_Init+0xf8>)
 80015e0:	a901      	add	r1, sp, #4
 80015e2:	f000 fb9f 	bl	8001d24 <HAL_ADC_ConfigChannel>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d123      	bne.n	8001632 <MX_ADC_Init+0xe6>
  sConfig.Channel = ADC_CHANNEL_5;
 80015ea:	2305      	movs	r3, #5
 80015ec:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ee:	4815      	ldr	r0, [pc, #84]	; (8001644 <MX_ADC_Init+0xf8>)
 80015f0:	a901      	add	r1, sp, #4
 80015f2:	f000 fb97 	bl	8001d24 <HAL_ADC_ConfigChannel>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d11d      	bne.n	8001636 <MX_ADC_Init+0xea>
  sConfig.Channel = ADC_CHANNEL_6;
 80015fa:	2306      	movs	r3, #6
 80015fc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015fe:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_ADC_Init+0xf8>)
 8001600:	a901      	add	r1, sp, #4
 8001602:	f000 fb8f 	bl	8001d24 <HAL_ADC_ConfigChannel>
 8001606:	2800      	cmp	r0, #0
 8001608:	d117      	bne.n	800163a <MX_ADC_Init+0xee>
  sConfig.Channel = ADC_CHANNEL_7;
 800160a:	2307      	movs	r3, #7
 800160c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_ADC_Init+0xf8>)
 8001610:	a901      	add	r1, sp, #4
 8001612:	f000 fb87 	bl	8001d24 <HAL_ADC_ConfigChannel>
 8001616:	2800      	cmp	r0, #0
 8001618:	d111      	bne.n	800163e <MX_ADC_Init+0xf2>
}
 800161a:	b005      	add	sp, #20
 800161c:	bd00      	pop	{pc}
    Error_Handler();
 800161e:	f7ff ff93 	bl	8001548 <Error_Handler>
    Error_Handler();
 8001622:	f7ff ff91 	bl	8001548 <Error_Handler>
    Error_Handler();
 8001626:	f7ff ff8f 	bl	8001548 <Error_Handler>
    Error_Handler();
 800162a:	f7ff ff8d 	bl	8001548 <Error_Handler>
    Error_Handler();
 800162e:	f7ff ff8b 	bl	8001548 <Error_Handler>
    Error_Handler();
 8001632:	f7ff ff89 	bl	8001548 <Error_Handler>
    Error_Handler();
 8001636:	f7ff ff87 	bl	8001548 <Error_Handler>
    Error_Handler();
 800163a:	f7ff ff85 	bl	8001548 <Error_Handler>
    Error_Handler();
 800163e:	f7ff ff83 	bl	8001548 <Error_Handler>
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	200001b8 	.word	0x200001b8
 8001648:	40012400 	.word	0x40012400

0800164c <SystemClock_Config>:
{
 800164c:	b500      	push	{lr}
 800164e:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001650:	2234      	movs	r2, #52	; 0x34
 8001652:	2100      	movs	r1, #0
 8001654:	a80b      	add	r0, sp, #44	; 0x2c
 8001656:	f004 fa90 	bl	8005b7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165a:	2210      	movs	r2, #16
 800165c:	2100      	movs	r1, #0
 800165e:	a807      	add	r0, sp, #28
 8001660:	f004 fa8b 	bl	8005b7a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	2218      	movs	r2, #24
 8001666:	2100      	movs	r1, #0
 8001668:	a801      	add	r0, sp, #4
 800166a:	f004 fa86 	bl	8005b7a <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 800166e:	2330      	movs	r3, #48	; 0x30
 8001670:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001672:	3b2f      	subs	r3, #47	; 0x2f
 8001674:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001676:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001678:	330f      	adds	r3, #15
 800167a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	a80b      	add	r0, sp, #44	; 0x2c
 800167e:	f001 fe21 	bl	80032c4 <HAL_RCC_OscConfig>
 8001682:	2800      	cmp	r0, #0
 8001684:	d118      	bne.n	80016b8 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001686:	2307      	movs	r3, #7
 8001688:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800168a:	3b04      	subs	r3, #4
 800168c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001692:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001694:	2101      	movs	r1, #1
 8001696:	a807      	add	r0, sp, #28
 8001698:	f002 f8f2 	bl	8003880 <HAL_RCC_ClockConfig>
 800169c:	2800      	cmp	r0, #0
 800169e:	d10d      	bne.n	80016bc <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	029b      	lsls	r3, r3, #10
 80016a4:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80016a6:	2300      	movs	r3, #0
 80016a8:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016aa:	a801      	add	r0, sp, #4
 80016ac:	f002 f98a 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d105      	bne.n	80016c0 <SystemClock_Config+0x74>
}
 80016b4:	b019      	add	sp, #100	; 0x64
 80016b6:	bd00      	pop	{pc}
    Error_Handler();
 80016b8:	f7ff ff46 	bl	8001548 <Error_Handler>
    Error_Handler();
 80016bc:	f7ff ff44 	bl	8001548 <Error_Handler>
    Error_Handler();
 80016c0:	f7ff ff42 	bl	8001548 <Error_Handler>

080016c4 <main>:
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	b082      	sub	sp, #8
  HAL_Init();
 80016c8:	f000 f93c 	bl	8001944 <HAL_Init>
  SystemClock_Config();
 80016cc:	f7ff ffbe 	bl	800164c <SystemClock_Config>
  MX_GPIO_Init();
 80016d0:	f7ff fe7e 	bl	80013d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016d4:	f7ff feb8 	bl	8001448 <MX_DMA_Init>
  MX_ADC_Init();
 80016d8:	f7ff ff38 	bl	800154c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80016dc:	f003 fffe 	bl	80056dc <MX_USB_DEVICE_Init>
  HAL_ADCEx_Calibration_Start(&hadc);
 80016e0:	4c19      	ldr	r4, [pc, #100]	; (8001748 <main+0x84>)
 80016e2:	0020      	movs	r0, r4
 80016e4:	f000 fbba 	bl	8001e5c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(5000); //TODO
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <main+0x88>)
 80016ea:	f000 f94d 	bl	8001988 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc, adc, 8); //Start AD conversion with DMA
 80016ee:	4918      	ldr	r1, [pc, #96]	; (8001750 <main+0x8c>)
 80016f0:	2208      	movs	r2, #8
 80016f2:	0020      	movs	r0, r4
 80016f4:	f000 fa74 	bl	8001be0 <HAL_ADC_Start_DMA>
  uint8_t data[7] = {0};
 80016f8:	2300      	movs	r3, #0
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2203      	movs	r2, #3
 80016fe:	2100      	movs	r1, #0
 8001700:	a801      	add	r0, sp, #4
 8001702:	f004 fa3a 	bl	8005b7a <memset>
  uint32_t avg = 0,cnt = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	2400      	movs	r4, #0
	  avg += adc[1];
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <main+0x8c>)
 800170c:	6850      	ldr	r0, [r2, #4]
 800170e:	1904      	adds	r4, r0, r4
	  avg /= 2;
 8001710:	0864      	lsrs	r4, r4, #1
	  cnt++;
 8001712:	3301      	adds	r3, #1
	  if (cnt == 640000) {
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <main+0x90>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d1f7      	bne.n	800170a <main+0x46>
		  res = avg*3.3/4096; //Convert it to voltage
 800171a:	0020      	movs	r0, r4
 800171c:	f7ff fca4 	bl	8001068 <__aeabi_ui2d>
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <main+0x94>)
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <main+0x98>)
 8001724:	f7ff f9de 	bl	8000ae4 <__aeabi_dmul>
 8001728:	2200      	movs	r2, #0
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <main+0x9c>)
 800172c:	f7ff f9da 	bl	8000ae4 <__aeabi_dmul>
 8001730:	f7ff fcc0 	bl	80010b4 <__aeabi_d2f>
		  toString(res, data, 7);
 8001734:	2207      	movs	r2, #7
 8001736:	4669      	mov	r1, sp
 8001738:	f7ff feac 	bl	8001494 <toString>
		  CDC_Transmit_FS(data, 7);
 800173c:	2107      	movs	r1, #7
 800173e:	4668      	mov	r0, sp
 8001740:	f004 f820 	bl	8005784 <CDC_Transmit_FS>
		  cnt = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	e7e0      	b.n	800170a <main+0x46>
 8001748:	200001b8 	.word	0x200001b8
 800174c:	00001388 	.word	0x00001388
 8001750:	20000198 	.word	0x20000198
 8001754:	0009c400 	.word	0x0009c400
 8001758:	66666666 	.word	0x66666666
 800175c:	400a6666 	.word	0x400a6666
 8001760:	3f300000 	.word	0x3f300000

08001764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_MspInit+0x34>)
 8001768:	6999      	ldr	r1, [r3, #24]
 800176a:	2201      	movs	r2, #1
 800176c:	4311      	orrs	r1, r2
 800176e:	6199      	str	r1, [r3, #24]
 8001770:	6999      	ldr	r1, [r3, #24]
 8001772:	400a      	ands	r2, r1
 8001774:	9200      	str	r2, [sp, #0]
 8001776:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	0549      	lsls	r1, r1, #21
 800177e:	430a      	orrs	r2, r1
 8001780:	61da      	str	r2, [r3, #28]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	400b      	ands	r3, r1
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_MspInit+0x38>)
 800178c:	6813      	ldr	r3, [r2, #0]
 800178e:	2110      	movs	r1, #16
 8001790:	430b      	orrs	r3, r1
 8001792:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001794:	b002      	add	sp, #8
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000

080017a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a0:	b530      	push	{r4, r5, lr}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	2214      	movs	r2, #20
 80017a8:	2100      	movs	r1, #0
 80017aa:	a803      	add	r0, sp, #12
 80017ac:	f004 f9e5 	bl	8005b7a <memset>
  if(hadc->Instance==ADC1)
 80017b0:	6822      	ldr	r2, [r4, #0]
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_ADC_MspInit+0x8c>)
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b8:	b009      	add	sp, #36	; 0x24
 80017ba:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_ADC_MspInit+0x90>)
 80017be:	699a      	ldr	r2, [r3, #24]
 80017c0:	2580      	movs	r5, #128	; 0x80
 80017c2:	00ad      	lsls	r5, r5, #2
 80017c4:	432a      	orrs	r2, r5
 80017c6:	619a      	str	r2, [r3, #24]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	402a      	ands	r2, r5
 80017cc:	9201      	str	r2, [sp, #4]
 80017ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0289      	lsls	r1, r1, #10
 80017d6:	430a      	orrs	r2, r1
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	400b      	ands	r3, r1
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017e2:	23ff      	movs	r3, #255	; 0xff
 80017e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e6:	3bfc      	subs	r3, #252	; 0xfc
 80017e8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	2090      	movs	r0, #144	; 0x90
 80017ec:	a903      	add	r1, sp, #12
 80017ee:	05c0      	lsls	r0, r0, #23
 80017f0:	f000 fcc8 	bl	8002184 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <HAL_ADC_MspInit+0x94>)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_ADC_MspInit+0x98>)
 80017f8:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017fa:	2300      	movs	r3, #0
 80017fc:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fe:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001800:	3380      	adds	r3, #128	; 0x80
 8001802:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001804:	6105      	str	r5, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800180c:	2320      	movs	r3, #32
 800180e:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	015b      	lsls	r3, r3, #5
 8001814:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001816:	f000 fbfd 	bl	8002014 <HAL_DMA_Init>
 800181a:	2800      	cmp	r0, #0
 800181c:	d103      	bne.n	8001826 <HAL_ADC_MspInit+0x86>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_ADC_MspInit+0x94>)
 8001820:	6323      	str	r3, [r4, #48]	; 0x30
 8001822:	625c      	str	r4, [r3, #36]	; 0x24
}
 8001824:	e7c8      	b.n	80017b8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001826:	f7ff fe8f 	bl	8001548 <Error_Handler>
 800182a:	e7f8      	b.n	800181e <HAL_ADC_MspInit+0x7e>
 800182c:	40012400 	.word	0x40012400
 8001830:	40021000 	.word	0x40021000
 8001834:	200001f8 	.word	0x200001f8
 8001838:	40020008 	.word	0x40020008

0800183c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler>

0800183e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler>

08001840 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001846:	f000 f88d 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bd10      	pop	{r4, pc}

0800184c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800184c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800184e:	4802      	ldr	r0, [pc, #8]	; (8001858 <DMA1_Channel1_IRQHandler+0xc>)
 8001850:	f000 fc43 	bl	80020da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001854:	bd10      	pop	{r4, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	200001f8 	.word	0x200001f8

0800185c <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800185c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800185e:	4802      	ldr	r0, [pc, #8]	; (8001868 <USB_IRQHandler+0xc>)
 8001860:	f001 fb04 	bl	8002e6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001864:	bd10      	pop	{r4, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	20000808 	.word	0x20000808

0800186c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800186c:	4770      	bx	lr
	...

08001870 <Reset_Handler>:
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <LoopForever+0x2>)
 8001872:	4685      	mov	sp, r0
 8001874:	f7ff fffa 	bl	800186c <SystemInit>
 8001878:	4812      	ldr	r0, [pc, #72]	; (80018c4 <LoopForever+0x6>)
 800187a:	6801      	ldr	r1, [r0, #0]
 800187c:	0e09      	lsrs	r1, r1, #24
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <LoopForever+0xa>)
 8001880:	4291      	cmp	r1, r2
 8001882:	d105      	bne.n	8001890 <ApplicationStart>
 8001884:	4811      	ldr	r0, [pc, #68]	; (80018cc <LoopForever+0xe>)
 8001886:	4912      	ldr	r1, [pc, #72]	; (80018d0 <LoopForever+0x12>)
 8001888:	6001      	str	r1, [r0, #0]
 800188a:	4812      	ldr	r0, [pc, #72]	; (80018d4 <LoopForever+0x16>)
 800188c:	4912      	ldr	r1, [pc, #72]	; (80018d8 <LoopForever+0x1a>)
 800188e:	6001      	str	r1, [r0, #0]

08001890 <ApplicationStart>:
 8001890:	4812      	ldr	r0, [pc, #72]	; (80018dc <LoopForever+0x1e>)
 8001892:	4913      	ldr	r1, [pc, #76]	; (80018e0 <LoopForever+0x22>)
 8001894:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <LoopForever+0x26>)
 8001896:	2300      	movs	r3, #0
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:
 800189a:	58d4      	ldr	r4, [r2, r3]
 800189c:	50c4      	str	r4, [r0, r3]
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:
 80018a0:	18c4      	adds	r4, r0, r3
 80018a2:	428c      	cmp	r4, r1
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <LoopForever+0x2a>)
 80018a8:	4c10      	ldr	r4, [pc, #64]	; (80018ec <LoopForever+0x2e>)
 80018aa:	2300      	movs	r3, #0
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:
 80018b2:	42a2      	cmp	r2, r4
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>
 80018b6:	f004 f969 	bl	8005b8c <__libc_init_array>
 80018ba:	f7ff ff03 	bl	80016c4 <main>

080018be <LoopForever>:
 80018be:	e7fe      	b.n	80018be <LoopForever>
 80018c0:	20001800 	.word	0x20001800
 80018c4:	00000004 	.word	0x00000004
 80018c8:	0000001f 	.word	0x0000001f
 80018cc:	40021018 	.word	0x40021018
 80018d0:	00000001 	.word	0x00000001
 80018d4:	40010000 	.word	0x40010000
 80018d8:	00000000 	.word	0x00000000
 80018dc:	20000000 	.word	0x20000000
 80018e0:	2000017c 	.word	0x2000017c
 80018e4:	08005ccc 	.word	0x08005ccc
 80018e8:	2000017c 	.word	0x2000017c
 80018ec:	20000d1c 	.word	0x20000d1c

080018f0 <ADC1_IRQHandler>:
 80018f0:	e7fe      	b.n	80018f0 <ADC1_IRQHandler>
	...

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b510      	push	{r4, lr}
 80018f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_InitTick+0x44>)
 80018fa:	7819      	ldrb	r1, [r3, #0]
 80018fc:	20fa      	movs	r0, #250	; 0xfa
 80018fe:	0080      	lsls	r0, r0, #2
 8001900:	f7fe fc02 	bl	8000108 <__udivsi3>
 8001904:	0001      	movs	r1, r0
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_InitTick+0x48>)
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	f7fe fbfd 	bl	8000108 <__udivsi3>
 800190e:	f000 fb3d 	bl	8001f8c <HAL_SYSTICK_Config>
 8001912:	2800      	cmp	r0, #0
 8001914:	d10d      	bne.n	8001932 <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	2c03      	cmp	r4, #3
 8001918:	d901      	bls.n	800191e <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800191a:	2001      	movs	r0, #1
 800191c:	e00a      	b.n	8001934 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191e:	3001      	adds	r0, #1
 8001920:	2200      	movs	r2, #0
 8001922:	0021      	movs	r1, r4
 8001924:	4240      	negs	r0, r0
 8001926:	f000 faf5 	bl	8001f14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_InitTick+0x4c>)
 800192c:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 800192e:	2000      	movs	r0, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x40>
    return HAL_ERROR;
 8001932:	2001      	movs	r0, #1
}
 8001934:	bd10      	pop	{r4, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	20000004 	.word	0x20000004
 800193c:	20000000 	.word	0x20000000
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_Init>:
{
 8001944:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001946:	4a06      	ldr	r2, [pc, #24]	; (8001960 <HAL_Init+0x1c>)
 8001948:	6813      	ldr	r3, [r2, #0]
 800194a:	2110      	movs	r1, #16
 800194c:	430b      	orrs	r3, r1
 800194e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001950:	2003      	movs	r0, #3
 8001952:	f7ff ffcf 	bl	80018f4 <HAL_InitTick>
  HAL_MspInit();
 8001956:	f7ff ff05 	bl	8001764 <HAL_MspInit>
}
 800195a:	2000      	movs	r0, #0
 800195c:	bd10      	pop	{r4, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40022000 	.word	0x40022000

08001964 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <HAL_IncTick+0x10>)
 8001966:	6811      	ldr	r1, [r2, #0]
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_IncTick+0x14>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	185b      	adds	r3, r3, r1
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	4770      	bx	lr
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	2000023c 	.word	0x2000023c
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800197c:	4b01      	ldr	r3, [pc, #4]	; (8001984 <HAL_GetTick+0x8>)
 800197e:	6818      	ldr	r0, [r3, #0]
}
 8001980:	4770      	bx	lr
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	2000023c 	.word	0x2000023c

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b570      	push	{r4, r5, r6, lr}
 800198a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff fff6 	bl	800197c <HAL_GetTick>
 8001990:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	1c63      	adds	r3, r4, #1
 8001994:	d002      	beq.n	800199c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_Delay+0x20>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800199c:	f7ff ffee 	bl	800197c <HAL_GetTick>
 80019a0:	1b40      	subs	r0, r0, r5
 80019a2:	42a0      	cmp	r0, r4
 80019a4:	d3fa      	bcc.n	800199c <HAL_Delay+0x14>
  {
  }
}
 80019a6:	bd70      	pop	{r4, r5, r6, pc}
 80019a8:	20000004 	.word	0x20000004

080019ac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019ac:	b530      	push	{r4, r5, lr}
 80019ae:	b083      	sub	sp, #12
 80019b0:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b6:	6803      	ldr	r3, [r0, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	2203      	movs	r2, #3
 80019bc:	400a      	ands	r2, r1
 80019be:	2a01      	cmp	r2, #1
 80019c0:	d014      	beq.n	80019ec <ADC_Enable+0x40>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019c2:	6899      	ldr	r1, [r3, #8]
 80019c4:	4a22      	ldr	r2, [pc, #136]	; (8001a50 <ADC_Enable+0xa4>)
 80019c6:	4211      	tst	r1, r2
 80019c8:	d118      	bne.n	80019fc <ADC_Enable+0x50>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	2101      	movs	r1, #1
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <ADC_Enable+0xa8>)
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	4920      	ldr	r1, [pc, #128]	; (8001a58 <ADC_Enable+0xac>)
 80019d8:	f7fe fb96 	bl	8000108 <__udivsi3>
 80019dc:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80019de:	9b01      	ldr	r3, [sp, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d015      	beq.n	8001a10 <ADC_Enable+0x64>
    {
      wait_loop_index--;
 80019e4:	9b01      	ldr	r3, [sp, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	e7f8      	b.n	80019de <ADC_Enable+0x32>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	07d2      	lsls	r2, r2, #31
 80019f0:	d42b      	bmi.n	8001a4a <ADC_Enable+0x9e>
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	0412      	lsls	r2, r2, #16
 80019f6:	d5e4      	bpl.n	80019c2 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019f8:	2000      	movs	r0, #0
 80019fa:	e024      	b.n	8001a46 <ADC_Enable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019fe:	2210      	movs	r2, #16
 8001a00:	4313      	orrs	r3, r2
 8001a02:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a06:	3a0f      	subs	r2, #15
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	e01a      	b.n	8001a46 <ADC_Enable+0x9a>
    tickstart = HAL_GetTick();
 8001a10:	f7ff ffb4 	bl	800197c <HAL_GetTick>
 8001a14:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	07db      	lsls	r3, r3, #31
 8001a1c:	d412      	bmi.n	8001a44 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a1e:	f7ff ffad 	bl	800197c <HAL_GetTick>
 8001a22:	1b40      	subs	r0, r0, r5
 8001a24:	2802      	cmp	r0, #2
 8001a26:	d9f6      	bls.n	8001a16 <ADC_Enable+0x6a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	07db      	lsls	r3, r3, #31
 8001a2e:	d4f2      	bmi.n	8001a16 <ADC_Enable+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a32:	2210      	movs	r2, #16
 8001a34:	4313      	orrs	r3, r2
 8001a36:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a3a:	3a0f      	subs	r2, #15
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001a40:	2001      	movs	r0, #1
 8001a42:	e000      	b.n	8001a46 <ADC_Enable+0x9a>
  return HAL_OK;
 8001a44:	2000      	movs	r0, #0
}
 8001a46:	b003      	add	sp, #12
 8001a48:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	e7fb      	b.n	8001a46 <ADC_Enable+0x9a>
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	80000017 	.word	0x80000017
 8001a54:	20000000 	.word	0x20000000
 8001a58:	000f4240 	.word	0x000f4240

08001a5c <HAL_ADC_Init>:
{
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8001a60:	d100      	bne.n	8001a64 <HAL_ADC_Init+0x8>
 8001a62:	e0b4      	b.n	8001bce <HAL_ADC_Init+0x172>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d100      	bne.n	8001a6c <HAL_ADC_Init+0x10>
 8001a6a:	e080      	b.n	8001b6e <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a6e:	06db      	lsls	r3, r3, #27
 8001a70:	d500      	bpl.n	8001a74 <HAL_ADC_Init+0x18>
 8001a72:	e0a6      	b.n	8001bc2 <HAL_ADC_Init+0x166>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	2104      	movs	r1, #4
 8001a7a:	0008      	movs	r0, r1
 8001a7c:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a7e:	4211      	tst	r1, r2
 8001a80:	d000      	beq.n	8001a84 <HAL_ADC_Init+0x28>
 8001a82:	e09e      	b.n	8001bc2 <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 8001a84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a86:	4953      	ldr	r1, [pc, #332]	; (8001bd4 <HAL_ADC_Init+0x178>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	3106      	adds	r1, #6
 8001a8c:	31ff      	adds	r1, #255	; 0xff
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a92:	6899      	ldr	r1, [r3, #8]
 8001a94:	2203      	movs	r2, #3
 8001a96:	400a      	ands	r2, r1
 8001a98:	2a01      	cmp	r2, #1
 8001a9a:	d06e      	beq.n	8001b7a <HAL_ADC_Init+0x11e>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	2118      	movs	r1, #24
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	68a1      	ldr	r1, [r4, #8]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001aa8:	6822      	ldr	r2, [r4, #0]
 8001aaa:	6913      	ldr	r3, [r2, #16]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	6861      	ldr	r1, [r4, #4]
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	68d3      	ldr	r3, [r2, #12]
 8001aba:	4947      	ldr	r1, [pc, #284]	; (8001bd8 <HAL_ADC_Init+0x17c>)
 8001abc:	400b      	ands	r3, r1
 8001abe:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac0:	7e23      	ldrb	r3, [r4, #24]
 8001ac2:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001ac4:	7e62      	ldrb	r2, [r4, #25]
 8001ac6:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac8:	4313      	orrs	r3, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001aca:	7ea1      	ldrb	r1, [r4, #26]
 8001acc:	034a      	lsls	r2, r1, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001ace:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001ad0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ad2:	2a01      	cmp	r2, #1
 8001ad4:	d058      	beq.n	8001b88 <HAL_ADC_Init+0x12c>
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	0152      	lsls	r2, r2, #5
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ada:	4313      	orrs	r3, r2
                 hadc->Init.DataAlign                                             |
 8001adc:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001ade:	4313      	orrs	r3, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001ae0:	6922      	ldr	r2, [r4, #16]
 8001ae2:	2a02      	cmp	r2, #2
 8001ae4:	d052      	beq.n	8001b8c <HAL_ADC_Init+0x130>
                 hadc->Init.DataAlign                                             |
 8001ae6:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001ae8:	2224      	movs	r2, #36	; 0x24
 8001aea:	5ca2      	ldrb	r2, [r4, r2]
 8001aec:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001aee:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001af0:	7ee2      	ldrb	r2, [r4, #27]
 8001af2:	2a01      	cmp	r2, #1
 8001af4:	d04c      	beq.n	8001b90 <HAL_ADC_Init+0x134>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af6:	69e2      	ldr	r2, [r4, #28]
 8001af8:	21c2      	movs	r1, #194	; 0xc2
 8001afa:	31ff      	adds	r1, #255	; 0xff
 8001afc:	428a      	cmp	r2, r1
 8001afe:	d002      	beq.n	8001b06 <HAL_ADC_Init+0xaa>
                    hadc->Init.ExternalTrigConvEdge );
 8001b00:	6a21      	ldr	r1, [r4, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b02:	430a      	orrs	r2, r1
 8001b04:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001b06:	6821      	ldr	r1, [r4, #0]
 8001b08:	68ca      	ldr	r2, [r1, #12]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0549      	lsls	r1, r1, #21
 8001b14:	428a      	cmp	r2, r1
 8001b16:	d00d      	beq.n	8001b34 <HAL_ADC_Init+0xd8>
 8001b18:	2a01      	cmp	r2, #1
 8001b1a:	d00b      	beq.n	8001b34 <HAL_ADC_Init+0xd8>
 8001b1c:	2a02      	cmp	r2, #2
 8001b1e:	d009      	beq.n	8001b34 <HAL_ADC_Init+0xd8>
 8001b20:	2a03      	cmp	r2, #3
 8001b22:	d007      	beq.n	8001b34 <HAL_ADC_Init+0xd8>
 8001b24:	2a04      	cmp	r2, #4
 8001b26:	d005      	beq.n	8001b34 <HAL_ADC_Init+0xd8>
 8001b28:	2a05      	cmp	r2, #5
 8001b2a:	d003      	beq.n	8001b34 <HAL_ADC_Init+0xd8>
 8001b2c:	2a06      	cmp	r2, #6
 8001b2e:	d001      	beq.n	8001b34 <HAL_ADC_Init+0xd8>
 8001b30:	2a07      	cmp	r2, #7
 8001b32:	d10a      	bne.n	8001b4a <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b34:	6820      	ldr	r0, [r4, #0]
 8001b36:	6941      	ldr	r1, [r0, #20]
 8001b38:	2207      	movs	r2, #7
 8001b3a:	4391      	bics	r1, r2
 8001b3c:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b3e:	6820      	ldr	r0, [r4, #0]
 8001b40:	6941      	ldr	r1, [r0, #20]
 8001b42:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001b44:	402a      	ands	r2, r5
 8001b46:	430a      	orrs	r2, r1
 8001b48:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	68d2      	ldr	r2, [r2, #12]
 8001b4e:	4923      	ldr	r1, [pc, #140]	; (8001bdc <HAL_ADC_Init+0x180>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d02b      	beq.n	8001bae <HAL_ADC_Init+0x152>
      ADC_STATE_CLR_SET(hadc->State,
 8001b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b58:	2212      	movs	r2, #18
 8001b5a:	4393      	bics	r3, r2
 8001b5c:	3a02      	subs	r2, #2
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b64:	3a0f      	subs	r2, #15
 8001b66:	4313      	orrs	r3, r2
 8001b68:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	e02e      	b.n	8001bcc <HAL_ADC_Init+0x170>
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8001b70:	2234      	movs	r2, #52	; 0x34
 8001b72:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8001b74:	f7ff fe14 	bl	80017a0 <HAL_ADC_MspInit>
 8001b78:	e778      	b.n	8001a6c <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	07d2      	lsls	r2, r2, #31
 8001b7e:	d49a      	bmi.n	8001ab6 <HAL_ADC_Init+0x5a>
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	0412      	lsls	r2, r2, #16
 8001b84:	d497      	bmi.n	8001ab6 <HAL_ADC_Init+0x5a>
 8001b86:	e789      	b.n	8001a9c <HAL_ADC_Init+0x40>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b88:	0002      	movs	r2, r0
 8001b8a:	e7a6      	b.n	8001ada <HAL_ADC_Init+0x7e>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b8c:	2004      	movs	r0, #4
 8001b8e:	e7aa      	b.n	8001ae6 <HAL_ADC_Init+0x8a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d103      	bne.n	8001b9c <HAL_ADC_Init+0x140>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	0252      	lsls	r2, r2, #9
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	e7ac      	b.n	8001af6 <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	63a2      	str	r2, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ba6:	391f      	subs	r1, #31
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	63e2      	str	r2, [r4, #60]	; 0x3c
 8001bac:	e7a3      	b.n	8001af6 <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	4393      	bics	r3, r2
 8001bb8:	3a02      	subs	r2, #2
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	63a3      	str	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	e004      	b.n	8001bcc <HAL_ADC_Init+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001bca:	2001      	movs	r0, #1
}
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001bce:	2001      	movs	r0, #1
 8001bd0:	e7fc      	b.n	8001bcc <HAL_ADC_Init+0x170>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	fffffefd 	.word	0xfffffefd
 8001bd8:	fffe0219 	.word	0xfffe0219
 8001bdc:	833fffe7 	.word	0x833fffe7

08001be0 <HAL_ADC_Start_DMA>:
{
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	0004      	movs	r4, r0
 8001be4:	000d      	movs	r5, r1
 8001be6:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001be8:	6803      	ldr	r3, [r0, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	075b      	lsls	r3, r3, #29
 8001bee:	d43e      	bmi.n	8001c6e <HAL_ADC_Start_DMA+0x8e>
    __HAL_LOCK(hadc);
 8001bf0:	2334      	movs	r3, #52	; 0x34
 8001bf2:	5cc3      	ldrb	r3, [r0, r3]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d03c      	beq.n	8001c72 <HAL_ADC_Start_DMA+0x92>
 8001bf8:	2334      	movs	r3, #52	; 0x34
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001bfe:	7e43      	ldrb	r3, [r0, #25]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d004      	beq.n	8001c0e <HAL_ADC_Start_DMA+0x2e>
      tmp_hal_status = ADC_Enable(hadc);
 8001c04:	f7ff fed2 	bl	80019ac <ADC_Enable>
 8001c08:	1e07      	subs	r7, r0, #0
    if (tmp_hal_status == HAL_OK)
 8001c0a:	d12e      	bne.n	8001c6a <HAL_ADC_Start_DMA+0x8a>
 8001c0c:	e000      	b.n	8001c10 <HAL_ADC_Start_DMA+0x30>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c0e:	2700      	movs	r7, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001c10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_ADC_Start_DMA+0x98>)
 8001c14:	401a      	ands	r2, r3
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	63a3      	str	r3, [r4, #56]	; 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001c22:	2234      	movs	r2, #52	; 0x34
 8001c24:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <HAL_ADC_Start_DMA+0x9c>)
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c2e:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_ADC_Start_DMA+0xa0>)
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c34:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <HAL_ADC_Start_DMA+0xa4>)
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	221c      	movs	r2, #28
 8001c3c:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c3e:	6822      	ldr	r2, [r4, #0]
 8001c40:	6853      	ldr	r3, [r2, #4]
 8001c42:	2110      	movs	r1, #16
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001c48:	6822      	ldr	r2, [r4, #0]
 8001c4a:	68d3      	ldr	r3, [r2, #12]
 8001c4c:	390f      	subs	r1, #15
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c52:	6821      	ldr	r1, [r4, #0]
 8001c54:	3140      	adds	r1, #64	; 0x40
 8001c56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001c58:	0033      	movs	r3, r6
 8001c5a:	002a      	movs	r2, r5
 8001c5c:	f000 fa02 	bl	8002064 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001c60:	6822      	ldr	r2, [r4, #0]
 8001c62:	6893      	ldr	r3, [r2, #8]
 8001c64:	2104      	movs	r1, #4
 8001c66:	430b      	orrs	r3, r1
 8001c68:	6093      	str	r3, [r2, #8]
}
 8001c6a:	0038      	movs	r0, r7
 8001c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 8001c6e:	2702      	movs	r7, #2
 8001c70:	e7fb      	b.n	8001c6a <HAL_ADC_Start_DMA+0x8a>
    __HAL_LOCK(hadc);
 8001c72:	2702      	movs	r7, #2
 8001c74:	e7f9      	b.n	8001c6a <HAL_ADC_Start_DMA+0x8a>
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	fffff0fe 	.word	0xfffff0fe
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001cff 	.word	0x08001cff
 8001c84:	08001d0b 	.word	0x08001d0b

08001c88 <HAL_ADC_ConvCpltCallback>:
}
 8001c88:	4770      	bx	lr
	...

08001c8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c92:	2150      	movs	r1, #80	; 0x50
 8001c94:	4211      	tst	r1, r2
 8001c96:	d12b      	bne.n	8001cf0 <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c98:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68d0      	ldr	r0, [r2, #12]
 8001ca6:	21c0      	movs	r1, #192	; 0xc0
 8001ca8:	0109      	lsls	r1, r1, #4
 8001caa:	4208      	tst	r0, r1
 8001cac:	d113      	bne.n	8001cd6 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cae:	7e99      	ldrb	r1, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cb0:	2900      	cmp	r1, #0
 8001cb2:	d110      	bne.n	8001cd6 <ADC_DMAConvCplt+0x4a>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001cb4:	6811      	ldr	r1, [r2, #0]
 8001cb6:	0709      	lsls	r1, r1, #28
 8001cb8:	d50d      	bpl.n	8001cd6 <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cba:	6891      	ldr	r1, [r2, #8]
 8001cbc:	0749      	lsls	r1, r1, #29
 8001cbe:	d40e      	bmi.n	8001cde <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001cc0:	6851      	ldr	r1, [r2, #4]
 8001cc2:	200c      	movs	r0, #12
 8001cc4:	4381      	bics	r1, r0
 8001cc6:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cca:	490b      	ldr	r1, [pc, #44]	; (8001cf8 <ADC_DMAConvCplt+0x6c>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	3104      	adds	r1, #4
 8001cd0:	31ff      	adds	r1, #255	; 0xff
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7ff ffd6 	bl	8001c88 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001cdc:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce8:	391f      	subs	r1, #31
 8001cea:	430a      	orrs	r2, r1
 8001cec:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cee:	e7f2      	b.n	8001cd6 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4798      	blx	r3
}
 8001cf6:	e7f1      	b.n	8001cdc <ADC_DMAConvCplt+0x50>
 8001cf8:	fffffefe 	.word	0xfffffefe

08001cfc <HAL_ADC_ConvHalfCpltCallback>:
}
 8001cfc:	4770      	bx	lr

08001cfe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cfe:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d00:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001d02:	f7ff fffb 	bl	8001cfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d06:	bd10      	pop	{r4, pc}

08001d08 <HAL_ADC_ErrorCallback>:
}
 8001d08:	4770      	bx	lr

08001d0a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d0a:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d10:	2240      	movs	r2, #64	; 0x40
 8001d12:	4313      	orrs	r3, r2
 8001d14:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d16:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001d18:	3a3c      	subs	r2, #60	; 0x3c
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001d1e:	f7ff fff3 	bl	8001d08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d22:	bd10      	pop	{r4, pc}

08001d24 <HAL_ADC_ConfigChannel>:
{
 8001d24:	b530      	push	{r4, r5, lr}
 8001d26:	b083      	sub	sp, #12
 8001d28:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001d2e:	3334      	adds	r3, #52	; 0x34
 8001d30:	5cc3      	ldrb	r3, [r0, r3]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d100      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x14>
 8001d36:	e080      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x116>
 8001d38:	2334      	movs	r3, #52	; 0x34
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d3e:	6802      	ldr	r2, [r0, #0]
 8001d40:	6893      	ldr	r3, [r2, #8]
 8001d42:	075b      	lsls	r3, r3, #29
 8001d44:	d46b      	bmi.n	8001e1e <HAL_ADC_ConfigChannel+0xfa>
    if (sConfig->Rank != ADC_RANK_NONE)
 8001d46:	6848      	ldr	r0, [r1, #4]
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_ADC_ConfigChannel+0x11c>)
 8001d4a:	4298      	cmp	r0, r3
 8001d4c:	d04c      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0xc4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001d50:	680d      	ldr	r5, [r1, #0]
 8001d52:	2001      	movs	r0, #1
 8001d54:	40a8      	lsls	r0, r5
 8001d56:	4303      	orrs	r3, r0
 8001d58:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	0552      	lsls	r2, r2, #21
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_ADC_ConfigChannel+0x68>
 8001d64:	3b01      	subs	r3, #1
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d910      	bls.n	8001d8c <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001d6a:	6888      	ldr	r0, [r1, #8]
 8001d6c:	6822      	ldr	r2, [r4, #0]
 8001d6e:	6955      	ldr	r5, [r2, #20]
 8001d70:	2307      	movs	r3, #7
 8001d72:	402b      	ands	r3, r5
 8001d74:	4298      	cmp	r0, r3
 8001d76:	d009      	beq.n	8001d8c <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d78:	6950      	ldr	r0, [r2, #20]
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	4398      	bics	r0, r3
 8001d7e:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001d80:	6820      	ldr	r0, [r4, #0]
 8001d82:	6942      	ldr	r2, [r0, #20]
 8001d84:	688d      	ldr	r5, [r1, #8]
 8001d86:	402b      	ands	r3, r5
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d8c:	680b      	ldr	r3, [r1, #0]
 8001d8e:	001a      	movs	r2, r3
 8001d90:	3a10      	subs	r2, #16
 8001d92:	2a02      	cmp	r2, #2
 8001d94:	d84d      	bhi.n	8001e32 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d96:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_ADC_ConfigChannel+0x120>)
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d00e      	beq.n	8001dbc <HAL_ADC_ConfigChannel+0x98>
 8001d9e:	2b11      	cmp	r3, #17
 8001da0:	d009      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x92>
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	045b      	lsls	r3, r3, #17
 8001da6:	4313      	orrs	r3, r2
 8001da8:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <HAL_ADC_ConfigChannel+0x120>)
 8001daa:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dac:	680b      	ldr	r3, [r1, #0]
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d007      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x9e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db2:	2000      	movs	r0, #0
 8001db4:	e038      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x104>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	03db      	lsls	r3, r3, #15
 8001dba:	e7f4      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x82>
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	e7f1      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x82>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc2:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <HAL_ADC_ConfigChannel+0x124>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	4921      	ldr	r1, [pc, #132]	; (8001e4c <HAL_ADC_ConfigChannel+0x128>)
 8001dc8:	f7fe f99e 	bl	8000108 <__udivsi3>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	0080      	lsls	r0, r0, #2
 8001dd0:	18c0      	adds	r0, r0, r3
 8001dd2:	0040      	lsls	r0, r0, #1
 8001dd4:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001dd6:	e002      	b.n	8001dde <HAL_ADC_ConfigChannel+0xba>
            wait_loop_index--;
 8001dd8:	9b01      	ldr	r3, [sp, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001dde:	9b01      	ldr	r3, [sp, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de4:	2000      	movs	r0, #0
 8001de6:	e01f      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x104>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001de8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001dea:	680d      	ldr	r5, [r1, #0]
 8001dec:	2001      	movs	r0, #1
 8001dee:	40a8      	lsls	r0, r5
 8001df0:	4383      	bics	r3, r0
 8001df2:	6293      	str	r3, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001df4:	680b      	ldr	r3, [r1, #0]
 8001df6:	001a      	movs	r2, r3
 8001df8:	3a10      	subs	r2, #16
 8001dfa:	2a02      	cmp	r2, #2
 8001dfc:	d81b      	bhi.n	8001e36 <HAL_ADC_ConfigChannel+0x112>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_ADC_ConfigChannel+0x120>)
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d009      	beq.n	8001e1a <HAL_ADC_ConfigChannel+0xf6>
 8001e06:	2b11      	cmp	r3, #17
 8001e08:	d005      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0xf2>
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_ADC_ConfigChannel+0x12c>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <HAL_ADC_ConfigChannel+0x120>)
 8001e10:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e12:	2000      	movs	r0, #0
 8001e14:	e008      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x104>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <HAL_ADC_ConfigChannel+0x130>)
 8001e18:	e7f8      	b.n	8001e0c <HAL_ADC_ConfigChannel+0xe8>
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_ADC_ConfigChannel+0x134>)
 8001e1c:	e7f6      	b.n	8001e0c <HAL_ADC_ConfigChannel+0xe8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001e20:	2220      	movs	r2, #32
 8001e22:	4313      	orrs	r3, r2
 8001e24:	6383      	str	r3, [r0, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001e28:	2334      	movs	r3, #52	; 0x34
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	54e2      	strb	r2, [r4, r3]
}
 8001e2e:	b003      	add	sp, #12
 8001e30:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e32:	2000      	movs	r0, #0
 8001e34:	e7f8      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x104>
 8001e36:	2000      	movs	r0, #0
 8001e38:	e7f6      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x104>
  __HAL_LOCK(hadc);
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	e7f7      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x10a>
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	00001001 	.word	0x00001001
 8001e44:	40012708 	.word	0x40012708
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	000f4240 	.word	0x000f4240
 8001e50:	feffffff 	.word	0xfeffffff
 8001e54:	ffbfffff 	.word	0xffbfffff
 8001e58:	ff7fffff 	.word	0xff7fffff

08001e5c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e60:	2334      	movs	r3, #52	; 0x34
 8001e62:	5cc3      	ldrb	r3, [r0, r3]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d050      	beq.n	8001f0a <HAL_ADCEx_Calibration_Start+0xae>
 8001e68:	2334      	movs	r3, #52	; 0x34
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e6e:	6803      	ldr	r3, [r0, #0]
 8001e70:	6899      	ldr	r1, [r3, #8]
 8001e72:	3202      	adds	r2, #2
 8001e74:	400a      	ands	r2, r1
 8001e76:	2a01      	cmp	r2, #1
 8001e78:	d105      	bne.n	8001e86 <HAL_ADCEx_Calibration_Start+0x2a>
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	07d2      	lsls	r2, r2, #31
 8001e7e:	d43e      	bmi.n	8001efe <HAL_ADCEx_Calibration_Start+0xa2>
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	0412      	lsls	r2, r2, #16
 8001e84:	d43b      	bmi.n	8001efe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001e86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e88:	4921      	ldr	r1, [pc, #132]	; (8001f10 <HAL_ADCEx_Calibration_Start+0xb4>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	3106      	adds	r1, #6
 8001e8e:	31ff      	adds	r1, #255	; 0xff
 8001e90:	430a      	orrs	r2, r1
 8001e92:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001e94:	68de      	ldr	r6, [r3, #12]
 8001e96:	3101      	adds	r1, #1
 8001e98:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001ea0:	6822      	ldr	r2, [r4, #0]
 8001ea2:	6891      	ldr	r1, [r2, #8]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	061b      	lsls	r3, r3, #24
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 8001eac:	f7ff fd66 	bl	800197c <HAL_GetTick>
 8001eb0:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	2a00      	cmp	r2, #0
 8001eb8:	da13      	bge.n	8001ee2 <HAL_ADCEx_Calibration_Start+0x86>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001eba:	f7ff fd5f 	bl	800197c <HAL_GetTick>
 8001ebe:	1b40      	subs	r0, r0, r5
 8001ec0:	2802      	cmp	r0, #2
 8001ec2:	d9f6      	bls.n	8001eb2 <HAL_ADCEx_Calibration_Start+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	daf2      	bge.n	8001eb2 <HAL_ADCEx_Calibration_Start+0x56>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ece:	2212      	movs	r2, #18
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	3a02      	subs	r2, #2
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	63a3      	str	r3, [r4, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ed8:	2334      	movs	r3, #52	; 0x34
 8001eda:	2200      	movs	r2, #0
 8001edc:	54e2      	strb	r2, [r4, r3]

          return HAL_ERROR;
 8001ede:	2001      	movs	r0, #1
 8001ee0:	e00c      	b.n	8001efc <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4332      	orrs	r2, r6
 8001ee6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001eea:	2203      	movs	r2, #3
 8001eec:	4393      	bics	r3, r2
 8001eee:	3a02      	subs	r2, #2
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	63a3      	str	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef4:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef6:	2334      	movs	r3, #52	; 0x34
 8001ef8:	2200      	movs	r2, #0
 8001efa:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001efc:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f00:	2220      	movs	r2, #32
 8001f02:	4313      	orrs	r3, r2
 8001f04:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001f06:	2001      	movs	r0, #1
 8001f08:	e7f5      	b.n	8001ef6 <HAL_ADCEx_Calibration_Start+0x9a>
  __HAL_LOCK(hadc);
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	e7f6      	b.n	8001efc <HAL_ADCEx_Calibration_Start+0xa0>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	fffffefd 	.word	0xfffffefd

08001f14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f14:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001f16:	2800      	cmp	r0, #0
 8001f18:	db11      	blt.n	8001f3e <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1a:	0883      	lsrs	r3, r0, #2
 8001f1c:	4d13      	ldr	r5, [pc, #76]	; (8001f6c <HAL_NVIC_SetPriority+0x58>)
 8001f1e:	33c0      	adds	r3, #192	; 0xc0
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	595c      	ldr	r4, [r3, r5]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4010      	ands	r0, r2
 8001f28:	00c0      	lsls	r0, r0, #3
 8001f2a:	32fc      	adds	r2, #252	; 0xfc
 8001f2c:	0016      	movs	r6, r2
 8001f2e:	4086      	lsls	r6, r0
 8001f30:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f32:	0189      	lsls	r1, r1, #6
 8001f34:	400a      	ands	r2, r1
 8001f36:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f38:	4322      	orrs	r2, r4
 8001f3a:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001f3c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f3e:	230f      	movs	r3, #15
 8001f40:	4003      	ands	r3, r0
 8001f42:	3b08      	subs	r3, #8
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3306      	adds	r3, #6
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_NVIC_SetPriority+0x5c>)
 8001f4c:	4694      	mov	ip, r2
 8001f4e:	4463      	add	r3, ip
 8001f50:	685c      	ldr	r4, [r3, #4]
 8001f52:	2203      	movs	r2, #3
 8001f54:	4010      	ands	r0, r2
 8001f56:	00c0      	lsls	r0, r0, #3
 8001f58:	32fc      	adds	r2, #252	; 0xfc
 8001f5a:	0015      	movs	r5, r2
 8001f5c:	4085      	lsls	r5, r0
 8001f5e:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f60:	0189      	lsls	r1, r1, #6
 8001f62:	400a      	ands	r2, r1
 8001f64:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f66:	4322      	orrs	r2, r4
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	e7e7      	b.n	8001f3c <HAL_NVIC_SetPriority+0x28>
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f74:	2800      	cmp	r0, #0
 8001f76:	db05      	blt.n	8001f84 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f78:	231f      	movs	r3, #31
 8001f7a:	4018      	ands	r0, r3
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	4083      	lsls	r3, r0
 8001f80:	4a01      	ldr	r2, [pc, #4]	; (8001f88 <HAL_NVIC_EnableIRQ+0x14>)
 8001f82:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f84:	4770      	bx	lr
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	3801      	subs	r0, #1
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	045b      	lsls	r3, r3, #17
 8001f92:	4298      	cmp	r0, r3
 8001f94:	d20f      	bcs.n	8001fb6 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_SYSTICK_Config+0x30>)
 8001f98:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f9a:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <HAL_SYSTICK_Config+0x34>)
 8001f9c:	6a03      	ldr	r3, [r0, #32]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	21c0      	movs	r1, #192	; 0xc0
 8001fa4:	0609      	lsls	r1, r1, #24
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001faa:	2300      	movs	r3, #0
 8001fac:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	3307      	adds	r3, #7
 8001fb0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb2:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fb4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001fb8:	e7fc      	b.n	8001fb4 <HAL_SYSTICK_Config+0x28>
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	e000e010 	.word	0xe000e010
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc4:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fc6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001fc8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001fca:	2401      	movs	r4, #1
 8001fcc:	40b4      	lsls	r4, r6
 8001fce:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fd0:	6804      	ldr	r4, [r0, #0]
 8001fd2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd4:	6843      	ldr	r3, [r0, #4]
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d004      	beq.n	8001fe4 <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001fda:	6803      	ldr	r3, [r0, #0]
 8001fdc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001fde:	6803      	ldr	r3, [r0, #0]
 8001fe0:	60da      	str	r2, [r3, #12]
  }
}
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8001fe4:	6803      	ldr	r3, [r0, #0]
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001fe8:	6803      	ldr	r3, [r0, #0]
 8001fea:	60d9      	str	r1, [r3, #12]
 8001fec:	e7f9      	b.n	8001fe2 <DMA_SetConfig+0x1e>
	...

08001ff0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ff4:	6800      	ldr	r0, [r0, #0]
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <DMA_CalcBaseAndBitshift+0x1c>)
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	4460      	add	r0, ip
 8001ffc:	2114      	movs	r1, #20
 8001ffe:	f7fe f883 	bl	8000108 <__udivsi3>
 8002002:	0080      	lsls	r0, r0, #2
 8002004:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002006:	4b02      	ldr	r3, [pc, #8]	; (8002010 <DMA_CalcBaseAndBitshift+0x20>)
 8002008:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 800200a:	bd10      	pop	{r4, pc}
 800200c:	bffdfff8 	.word	0xbffdfff8
 8002010:	40020000 	.word	0x40020000

08002014 <HAL_DMA_Init>:
{
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	1e04      	subs	r4, r0, #0
  if (NULL == hdma)
 8002018:	d020      	beq.n	800205c <HAL_DMA_Init+0x48>
  hdma->State = HAL_DMA_STATE_BUSY;
 800201a:	2521      	movs	r5, #33	; 0x21
 800201c:	2302      	movs	r3, #2
 800201e:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 8002020:	6801      	ldr	r1, [r0, #0]
 8002022:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_DMA_Init+0x4c>)
 8002026:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002028:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 800202c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	68e0      	ldr	r0, [r4, #12]
 8002030:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002032:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002034:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	6960      	ldr	r0, [r4, #20]
 8002038:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800203a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800203e:	69e0      	ldr	r0, [r4, #28]
 8002040:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002042:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8002044:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8002046:	0020      	movs	r0, r4
 8002048:	f7ff ffd2 	bl	8001ff0 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204c:	2300      	movs	r3, #0
 800204e:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002050:	2201      	movs	r2, #1
 8002052:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8002054:	321f      	adds	r2, #31
 8002056:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002058:	2000      	movs	r0, #0
}
 800205a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800205c:	2001      	movs	r0, #1
 800205e:	e7fc      	b.n	800205a <HAL_DMA_Init+0x46>
 8002060:	ffffc00f 	.word	0xffffc00f

08002064 <HAL_DMA_Start_IT>:
{
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002068:	2020      	movs	r0, #32
 800206a:	5c20      	ldrb	r0, [r4, r0]
 800206c:	2801      	cmp	r0, #1
 800206e:	d032      	beq.n	80020d6 <HAL_DMA_Start_IT+0x72>
 8002070:	2020      	movs	r0, #32
 8002072:	2501      	movs	r5, #1
 8002074:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8002076:	3001      	adds	r0, #1
 8002078:	5c20      	ldrb	r0, [r4, r0]
 800207a:	2801      	cmp	r0, #1
 800207c:	d004      	beq.n	8002088 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 800207e:	2320      	movs	r3, #32
 8002080:	2200      	movs	r2, #0
 8002082:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8002084:	2002      	movs	r0, #2
}
 8002086:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002088:	3020      	adds	r0, #32
 800208a:	3501      	adds	r5, #1
 800208c:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208e:	2000      	movs	r0, #0
 8002090:	63a0      	str	r0, [r4, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002092:	6825      	ldr	r5, [r4, #0]
 8002094:	6828      	ldr	r0, [r5, #0]
 8002096:	2601      	movs	r6, #1
 8002098:	43b0      	bics	r0, r6
 800209a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800209c:	0020      	movs	r0, r4
 800209e:	f7ff ff91 	bl	8001fc4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80020a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00b      	beq.n	80020c0 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020a8:	6822      	ldr	r2, [r4, #0]
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	210e      	movs	r1, #14
 80020ae:	430b      	orrs	r3, r1
 80020b0:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80020b2:	6822      	ldr	r2, [r4, #0]
 80020b4:	6813      	ldr	r3, [r2, #0]
 80020b6:	2101      	movs	r1, #1
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2000      	movs	r0, #0
 80020be:	e7e2      	b.n	8002086 <HAL_DMA_Start_IT+0x22>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80020c0:	6822      	ldr	r2, [r4, #0]
 80020c2:	6813      	ldr	r3, [r2, #0]
 80020c4:	210a      	movs	r1, #10
 80020c6:	430b      	orrs	r3, r1
 80020c8:	6013      	str	r3, [r2, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	3906      	subs	r1, #6
 80020d0:	438b      	bics	r3, r1
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e7ed      	b.n	80020b2 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80020d6:	2002      	movs	r0, #2
 80020d8:	e7d5      	b.n	8002086 <HAL_DMA_Start_IT+0x22>

080020da <HAL_DMA_IRQHandler>:
{
 80020da:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020dc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80020de:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80020e0:	6804      	ldr	r4, [r0, #0]
 80020e2:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80020e6:	2304      	movs	r3, #4
 80020e8:	408b      	lsls	r3, r1
 80020ea:	421a      	tst	r2, r3
 80020ec:	d012      	beq.n	8002114 <HAL_DMA_IRQHandler+0x3a>
 80020ee:	076b      	lsls	r3, r5, #29
 80020f0:	d510      	bpl.n	8002114 <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	069b      	lsls	r3, r3, #26
 80020f6:	d403      	bmi.n	8002100 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	2204      	movs	r2, #4
 80020fc:	4393      	bics	r3, r2
 80020fe:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002100:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002102:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002104:	2304      	movs	r3, #4
 8002106:	408b      	lsls	r3, r1
 8002108:	6053      	str	r3, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800210a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d000      	beq.n	8002112 <HAL_DMA_IRQHandler+0x38>
      hdma->XferHalfCpltCallback(hdma);
 8002110:	4798      	blx	r3
}
 8002112:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002114:	2302      	movs	r3, #2
 8002116:	408b      	lsls	r3, r1
 8002118:	421a      	tst	r2, r3
 800211a:	d018      	beq.n	800214e <HAL_DMA_IRQHandler+0x74>
 800211c:	07ab      	lsls	r3, r5, #30
 800211e:	d516      	bpl.n	800214e <HAL_DMA_IRQHandler+0x74>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	069b      	lsls	r3, r3, #26
 8002124:	d406      	bmi.n	8002134 <HAL_DMA_IRQHandler+0x5a>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	220a      	movs	r2, #10
 800212a:	4393      	bics	r3, r2
 800212c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800212e:	2321      	movs	r3, #33	; 0x21
 8002130:	3a09      	subs	r2, #9
 8002132:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002134:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002136:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002138:	2302      	movs	r3, #2
 800213a:	408b      	lsls	r3, r1
 800213c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800213e:	2320      	movs	r3, #32
 8002140:	2200      	movs	r2, #0
 8002142:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8002144:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0e3      	beq.n	8002112 <HAL_DMA_IRQHandler+0x38>
      hdma->XferCpltCallback(hdma);
 800214a:	4798      	blx	r3
 800214c:	e7e1      	b.n	8002112 <HAL_DMA_IRQHandler+0x38>
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800214e:	2308      	movs	r3, #8
 8002150:	408b      	lsls	r3, r1
 8002152:	421a      	tst	r2, r3
 8002154:	d0dd      	beq.n	8002112 <HAL_DMA_IRQHandler+0x38>
 8002156:	072d      	lsls	r5, r5, #28
 8002158:	d5db      	bpl.n	8002112 <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	220e      	movs	r2, #14
 800215e:	4393      	bics	r3, r2
 8002160:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002162:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002164:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002166:	2301      	movs	r3, #1
 8002168:	001c      	movs	r4, r3
 800216a:	408c      	lsls	r4, r1
 800216c:	6054      	str	r4, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800216e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002170:	2221      	movs	r2, #33	; 0x21
 8002172:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8002174:	331f      	adds	r3, #31
 8002176:	2200      	movs	r2, #0
 8002178:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 800217a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0c8      	beq.n	8002112 <HAL_DMA_IRQHandler+0x38>
      hdma->XferErrorCallback(hdma);
 8002180:	4798      	blx	r3
}
 8002182:	e7c6      	b.n	8002112 <HAL_DMA_IRQHandler+0x38>

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002188:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218a:	e056      	b.n	800223a <HAL_GPIO_Init+0xb6>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800218c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800218e:	005f      	lsls	r7, r3, #1
 8002190:	2403      	movs	r4, #3
 8002192:	40bc      	lsls	r4, r7
 8002194:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002196:	68cc      	ldr	r4, [r1, #12]
 8002198:	40bc      	lsls	r4, r7
 800219a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800219c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a0:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a2:	684e      	ldr	r6, [r1, #4]
 80021a4:	0936      	lsrs	r6, r6, #4
 80021a6:	2201      	movs	r2, #1
 80021a8:	4032      	ands	r2, r6
 80021aa:	409a      	lsls	r2, r3
 80021ac:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80021ae:	6042      	str	r2, [r0, #4]
 80021b0:	e053      	b.n	800225a <HAL_GPIO_Init+0xd6>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021b2:	08de      	lsrs	r6, r3, #3
 80021b4:	3608      	adds	r6, #8
 80021b6:	00b6      	lsls	r6, r6, #2
 80021b8:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ba:	3205      	adds	r2, #5
 80021bc:	401a      	ands	r2, r3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	240f      	movs	r4, #15
 80021c2:	4094      	lsls	r4, r2
 80021c4:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021c6:	690c      	ldr	r4, [r1, #16]
 80021c8:	4094      	lsls	r4, r2
 80021ca:	0022      	movs	r2, r4
 80021cc:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 80021ce:	5032      	str	r2, [r6, r0]
 80021d0:	e056      	b.n	8002280 <HAL_GPIO_Init+0xfc>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021d2:	2602      	movs	r6, #2
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x54>
 80021d6:	2600      	movs	r6, #0
 80021d8:	40a6      	lsls	r6, r4
 80021da:	0034      	movs	r4, r6
 80021dc:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021de:	3202      	adds	r2, #2
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	4e42      	ldr	r6, [pc, #264]	; (80022ec <HAL_GPIO_Init+0x168>)
 80021e4:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e6:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <HAL_GPIO_Init+0x16c>)
 80021e8:	6897      	ldr	r7, [r2, #8]
        temp &= ~(iocurrent);
 80021ea:	43ea      	mvns	r2, r5
 80021ec:	003e      	movs	r6, r7
 80021ee:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f0:	684c      	ldr	r4, [r1, #4]
 80021f2:	02e4      	lsls	r4, r4, #11
 80021f4:	d501      	bpl.n	80021fa <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80021f6:	003e      	movs	r6, r7
 80021f8:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 80021fa:	4c3d      	ldr	r4, [pc, #244]	; (80022f0 <HAL_GPIO_Init+0x16c>)
 80021fc:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80021fe:	68e7      	ldr	r7, [r4, #12]
        temp &= ~(iocurrent);
 8002200:	003e      	movs	r6, r7
 8002202:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002204:	684c      	ldr	r4, [r1, #4]
 8002206:	02a4      	lsls	r4, r4, #10
 8002208:	d501      	bpl.n	800220e <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800220a:	003e      	movs	r6, r7
 800220c:	432e      	orrs	r6, r5
        }
        EXTI->FTSR = temp;
 800220e:	4c38      	ldr	r4, [pc, #224]	; (80022f0 <HAL_GPIO_Init+0x16c>)
 8002210:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002212:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8002214:	003e      	movs	r6, r7
 8002216:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002218:	684c      	ldr	r4, [r1, #4]
 800221a:	03a4      	lsls	r4, r4, #14
 800221c:	d501      	bpl.n	8002222 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800221e:	003e      	movs	r6, r7
 8002220:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 8002222:	4c33      	ldr	r4, [pc, #204]	; (80022f0 <HAL_GPIO_Init+0x16c>)
 8002224:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 8002226:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8002228:	4032      	ands	r2, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800222a:	684c      	ldr	r4, [r1, #4]
 800222c:	03e4      	lsls	r4, r4, #15
 800222e:	d501      	bpl.n	8002234 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8002230:	002a      	movs	r2, r5
 8002232:	4332      	orrs	r2, r6
        }
        EXTI->IMR = temp;
 8002234:	4c2e      	ldr	r4, [pc, #184]	; (80022f0 <HAL_GPIO_Init+0x16c>)
 8002236:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 8002238:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	680c      	ldr	r4, [r1, #0]
 800223c:	0022      	movs	r2, r4
 800223e:	40da      	lsrs	r2, r3
 8002240:	d051      	beq.n	80022e6 <HAL_GPIO_Init+0x162>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002242:	2201      	movs	r2, #1
 8002244:	409a      	lsls	r2, r3
 8002246:	0025      	movs	r5, r4
 8002248:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 800224a:	4214      	tst	r4, r2
 800224c:	d0f4      	beq.n	8002238 <HAL_GPIO_Init+0xb4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800224e:	684e      	ldr	r6, [r1, #4]
 8002250:	2403      	movs	r4, #3
 8002252:	4034      	ands	r4, r6
 8002254:	3c01      	subs	r4, #1
 8002256:	2c01      	cmp	r4, #1
 8002258:	d998      	bls.n	800218c <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225a:	684c      	ldr	r4, [r1, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	4022      	ands	r2, r4
 8002260:	2a03      	cmp	r2, #3
 8002262:	d008      	beq.n	8002276 <HAL_GPIO_Init+0xf2>
        temp = GPIOx->PUPDR;
 8002264:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002266:	005e      	lsls	r6, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	40b2      	lsls	r2, r6
 800226c:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800226e:	688a      	ldr	r2, [r1, #8]
 8002270:	40b2      	lsls	r2, r6
 8002272:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002274:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002276:	684c      	ldr	r4, [r1, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	4022      	ands	r2, r4
 800227c:	2a02      	cmp	r2, #2
 800227e:	d098      	beq.n	80021b2 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8002280:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002282:	005e      	lsls	r6, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	0017      	movs	r7, r2
 8002288:	40b7      	lsls	r7, r6
 800228a:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800228c:	684f      	ldr	r7, [r1, #4]
 800228e:	403a      	ands	r2, r7
 8002290:	40b2      	lsls	r2, r6
 8002292:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002294:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002296:	684c      	ldr	r4, [r1, #4]
 8002298:	22c0      	movs	r2, #192	; 0xc0
 800229a:	0292      	lsls	r2, r2, #10
 800229c:	4214      	tst	r4, r2
 800229e:	d0cb      	beq.n	8002238 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a0:	4c14      	ldr	r4, [pc, #80]	; (80022f4 <HAL_GPIO_Init+0x170>)
 80022a2:	69a6      	ldr	r6, [r4, #24]
 80022a4:	2201      	movs	r2, #1
 80022a6:	4316      	orrs	r6, r2
 80022a8:	61a6      	str	r6, [r4, #24]
 80022aa:	69a4      	ldr	r4, [r4, #24]
 80022ac:	4022      	ands	r2, r4
 80022ae:	9201      	str	r2, [sp, #4]
 80022b0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80022b2:	089a      	lsrs	r2, r3, #2
 80022b4:	1c94      	adds	r4, r2, #2
 80022b6:	00a4      	lsls	r4, r4, #2
 80022b8:	4e0c      	ldr	r6, [pc, #48]	; (80022ec <HAL_GPIO_Init+0x168>)
 80022ba:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022bc:	2403      	movs	r4, #3
 80022be:	401c      	ands	r4, r3
 80022c0:	00a4      	lsls	r4, r4, #2
 80022c2:	260f      	movs	r6, #15
 80022c4:	40a6      	lsls	r6, r4
 80022c6:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022c8:	2690      	movs	r6, #144	; 0x90
 80022ca:	05f6      	lsls	r6, r6, #23
 80022cc:	42b0      	cmp	r0, r6
 80022ce:	d082      	beq.n	80021d6 <HAL_GPIO_Init+0x52>
 80022d0:	4e09      	ldr	r6, [pc, #36]	; (80022f8 <HAL_GPIO_Init+0x174>)
 80022d2:	42b0      	cmp	r0, r6
 80022d4:	d005      	beq.n	80022e2 <HAL_GPIO_Init+0x15e>
 80022d6:	4e09      	ldr	r6, [pc, #36]	; (80022fc <HAL_GPIO_Init+0x178>)
 80022d8:	42b0      	cmp	r0, r6
 80022da:	d100      	bne.n	80022de <HAL_GPIO_Init+0x15a>
 80022dc:	e779      	b.n	80021d2 <HAL_GPIO_Init+0x4e>
 80022de:	2605      	movs	r6, #5
 80022e0:	e77a      	b.n	80021d8 <HAL_GPIO_Init+0x54>
 80022e2:	2601      	movs	r6, #1
 80022e4:	e778      	b.n	80021d8 <HAL_GPIO_Init+0x54>
  } 
}
 80022e6:	b003      	add	sp, #12
 80022e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	40010000 	.word	0x40010000
 80022f0:	40010400 	.word	0x40010400
 80022f4:	40021000 	.word	0x40021000
 80022f8:	48000400 	.word	0x48000400
 80022fc:	48000800 	.word	0x48000800

08002300 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002300:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002302:	0453      	lsls	r3, r2, #17
 8002304:	d53c      	bpl.n	8002380 <HAL_PCD_EP_DB_Receive+0x80>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002306:	6804      	ldr	r4, [r0, #0]
 8002308:	2350      	movs	r3, #80	; 0x50
 800230a:	5ae3      	ldrh	r3, [r4, r3]
 800230c:	780d      	ldrb	r5, [r1, #0]
 800230e:	00ee      	lsls	r6, r5, #3
 8002310:	199b      	adds	r3, r3, r6
 8002312:	191b      	adds	r3, r3, r4
 8002314:	4c38      	ldr	r4, [pc, #224]	; (80023f8 <HAL_PCD_EP_DB_Receive+0xf8>)
 8002316:	46a4      	mov	ip, r4
 8002318:	4463      	add	r3, ip
 800231a:	881c      	ldrh	r4, [r3, #0]
 800231c:	05a4      	lsls	r4, r4, #22
 800231e:	0da4      	lsrs	r4, r4, #22

    if (ep->xfer_len >= count)
 8002320:	698b      	ldr	r3, [r1, #24]
 8002322:	42a3      	cmp	r3, r4
 8002324:	d322      	bcc.n	800236c <HAL_PCD_EP_DB_Receive+0x6c>
    {
      ep->xfer_len -= count;
 8002326:	1b1b      	subs	r3, r3, r4
 8002328:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800232a:	698b      	ldr	r3, [r1, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10c      	bne.n	800234a <HAL_PCD_EP_DB_Receive+0x4a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002330:	6803      	ldr	r3, [r0, #0]
 8002332:	00ad      	lsls	r5, r5, #2
 8002334:	195d      	adds	r5, r3, r5
 8002336:	882b      	ldrh	r3, [r5, #0]
 8002338:	4e30      	ldr	r6, [pc, #192]	; (80023fc <HAL_PCD_EP_DB_Receive+0xfc>)
 800233a:	4033      	ands	r3, r6
 800233c:	2680      	movs	r6, #128	; 0x80
 800233e:	01b6      	lsls	r6, r6, #6
 8002340:	405e      	eors	r6, r3
 8002342:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <HAL_PCD_EP_DB_Receive+0x100>)
 8002344:	4333      	orrs	r3, r6
 8002346:	b29b      	uxth	r3, r3
 8002348:	802b      	strh	r3, [r5, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800234a:	0652      	lsls	r2, r2, #25
 800234c:	d50a      	bpl.n	8002364 <HAL_PCD_EP_DB_Receive+0x64>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800234e:	6802      	ldr	r2, [r0, #0]
 8002350:	780b      	ldrb	r3, [r1, #0]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	18d2      	adds	r2, r2, r3
 8002356:	8815      	ldrh	r5, [r2, #0]
 8002358:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <HAL_PCD_EP_DB_Receive+0x104>)
 800235a:	401d      	ands	r5, r3
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <HAL_PCD_EP_DB_Receive+0x108>)
 800235e:	432b      	orrs	r3, r5
 8002360:	b29b      	uxth	r3, r3
 8002362:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002364:	2c00      	cmp	r4, #0
 8002366:	d104      	bne.n	8002372 <HAL_PCD_EP_DB_Receive+0x72>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8002368:	0020      	movs	r0, r4
 800236a:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	618b      	str	r3, [r1, #24]
 8002370:	e7db      	b.n	800232a <HAL_PCD_EP_DB_Receive+0x2a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002372:	6800      	ldr	r0, [r0, #0]
 8002374:	890a      	ldrh	r2, [r1, #8]
 8002376:	6949      	ldr	r1, [r1, #20]
 8002378:	0023      	movs	r3, r4
 800237a:	f002 fa6b 	bl	8004854 <USB_ReadPMA>
 800237e:	e7f3      	b.n	8002368 <HAL_PCD_EP_DB_Receive+0x68>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002380:	6804      	ldr	r4, [r0, #0]
 8002382:	2350      	movs	r3, #80	; 0x50
 8002384:	5ae3      	ldrh	r3, [r4, r3]
 8002386:	780d      	ldrb	r5, [r1, #0]
 8002388:	00ee      	lsls	r6, r5, #3
 800238a:	199b      	adds	r3, r3, r6
 800238c:	191b      	adds	r3, r3, r4
 800238e:	4c1f      	ldr	r4, [pc, #124]	; (800240c <HAL_PCD_EP_DB_Receive+0x10c>)
 8002390:	46a4      	mov	ip, r4
 8002392:	4463      	add	r3, ip
 8002394:	881c      	ldrh	r4, [r3, #0]
 8002396:	05a4      	lsls	r4, r4, #22
 8002398:	0da4      	lsrs	r4, r4, #22
    if (ep->xfer_len >= count)
 800239a:	698b      	ldr	r3, [r1, #24]
 800239c:	42a3      	cmp	r3, r4
 800239e:	d327      	bcc.n	80023f0 <HAL_PCD_EP_DB_Receive+0xf0>
      ep->xfer_len -= count;
 80023a0:	1b1b      	subs	r3, r3, r4
 80023a2:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80023a4:	698b      	ldr	r3, [r1, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_PCD_EP_DB_Receive+0xc4>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023aa:	6803      	ldr	r3, [r0, #0]
 80023ac:	00ad      	lsls	r5, r5, #2
 80023ae:	195d      	adds	r5, r3, r5
 80023b0:	882b      	ldrh	r3, [r5, #0]
 80023b2:	4e12      	ldr	r6, [pc, #72]	; (80023fc <HAL_PCD_EP_DB_Receive+0xfc>)
 80023b4:	4033      	ands	r3, r6
 80023b6:	2680      	movs	r6, #128	; 0x80
 80023b8:	01b6      	lsls	r6, r6, #6
 80023ba:	405e      	eors	r6, r3
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_PCD_EP_DB_Receive+0x100>)
 80023be:	4333      	orrs	r3, r6
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	802b      	strh	r3, [r5, #0]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023c4:	0652      	lsls	r2, r2, #25
 80023c6:	d40a      	bmi.n	80023de <HAL_PCD_EP_DB_Receive+0xde>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023c8:	6802      	ldr	r2, [r0, #0]
 80023ca:	780b      	ldrb	r3, [r1, #0]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	18d2      	adds	r2, r2, r3
 80023d0:	8815      	ldrh	r5, [r2, #0]
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_PCD_EP_DB_Receive+0x104>)
 80023d4:	401d      	ands	r5, r3
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_PCD_EP_DB_Receive+0x108>)
 80023d8:	432b      	orrs	r3, r5
 80023da:	b29b      	uxth	r3, r3
 80023dc:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 80023de:	2c00      	cmp	r4, #0
 80023e0:	d0c2      	beq.n	8002368 <HAL_PCD_EP_DB_Receive+0x68>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023e2:	6800      	ldr	r0, [r0, #0]
 80023e4:	894a      	ldrh	r2, [r1, #10]
 80023e6:	6949      	ldr	r1, [r1, #20]
 80023e8:	0023      	movs	r3, r4
 80023ea:	f002 fa33 	bl	8004854 <USB_ReadPMA>
 80023ee:	e7bb      	b.n	8002368 <HAL_PCD_EP_DB_Receive+0x68>
      ep->xfer_len = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	618b      	str	r3, [r1, #24]
 80023f4:	e7d6      	b.n	80023a4 <HAL_PCD_EP_DB_Receive+0xa4>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	00000402 	.word	0x00000402
 80023fc:	ffffbf8f 	.word	0xffffbf8f
 8002400:	ffff8080 	.word	0xffff8080
 8002404:	ffff8f8f 	.word	0xffff8f8f
 8002408:	ffff80c0 	.word	0xffff80c0
 800240c:	00000406 	.word	0x00000406

08002410 <HAL_PCD_Init>:
{
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	1e04      	subs	r4, r0, #0
  if (hpcd == NULL)
 8002416:	d066      	beq.n	80024e6 <HAL_PCD_Init+0xd6>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002418:	4b34      	ldr	r3, [pc, #208]	; (80024ec <HAL_PCD_Init+0xdc>)
 800241a:	5cc3      	ldrb	r3, [r0, r3]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_PCD_Init+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002420:	4b32      	ldr	r3, [pc, #200]	; (80024ec <HAL_PCD_Init+0xdc>)
 8002422:	2203      	movs	r2, #3
 8002424:	54e2      	strb	r2, [r4, r3]
  __HAL_PCD_DISABLE(hpcd);
 8002426:	6820      	ldr	r0, [r4, #0]
 8002428:	f001 fb7a 	bl	8003b20 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242c:	2200      	movs	r2, #0
 800242e:	e01b      	b.n	8002468 <HAL_PCD_Init+0x58>
    hpcd->Lock = HAL_UNLOCKED;
 8002430:	23aa      	movs	r3, #170	; 0xaa
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	2200      	movs	r2, #0
 8002436:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 8002438:	f003 fa64 	bl	8005904 <HAL_PCD_MspInit>
 800243c:	e7f0      	b.n	8002420 <HAL_PCD_Init+0x10>
    hpcd->IN_ep[i].is_in = 1U;
 800243e:	1c50      	adds	r0, r2, #1
 8002440:	0083      	lsls	r3, r0, #2
 8002442:	1819      	adds	r1, r3, r0
 8002444:	00c9      	lsls	r1, r1, #3
 8002446:	1861      	adds	r1, r4, r1
 8002448:	2501      	movs	r5, #1
 800244a:	704d      	strb	r5, [r1, #1]
    hpcd->IN_ep[i].num = i;
 800244c:	1819      	adds	r1, r3, r0
 800244e:	00c9      	lsls	r1, r1, #3
 8002450:	550a      	strb	r2, [r1, r4]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002452:	1863      	adds	r3, r4, r1
 8002454:	2500      	movs	r5, #0
 8002456:	70dd      	strb	r5, [r3, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002458:	0093      	lsls	r3, r2, #2
 800245a:	1899      	adds	r1, r3, r2
 800245c:	00c9      	lsls	r1, r1, #3
 800245e:	1861      	adds	r1, r4, r1
 8002460:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002462:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002464:	640d      	str	r5, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002466:	b2c2      	uxtb	r2, r0
 8002468:	6860      	ldr	r0, [r4, #4]
 800246a:	4282      	cmp	r2, r0
 800246c:	d3e7      	bcc.n	800243e <HAL_PCD_Init+0x2e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	2100      	movs	r1, #0
 8002470:	e019      	b.n	80024a6 <HAL_PCD_Init+0x96>
    hpcd->OUT_ep[i].is_in = 0U;
 8002472:	008a      	lsls	r2, r1, #2
 8002474:	1853      	adds	r3, r2, r1
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	18e3      	adds	r3, r4, r3
 800247a:	001e      	movs	r6, r3
 800247c:	366a      	adds	r6, #106	; 0x6a
 800247e:	36ff      	adds	r6, #255	; 0xff
 8002480:	2500      	movs	r5, #0
 8002482:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].num = i;
 8002484:	3e01      	subs	r6, #1
 8002486:	7031      	strb	r1, [r6, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002488:	3603      	adds	r6, #3
 800248a:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800248c:	360d      	adds	r6, #13
 800248e:	6035      	str	r5, [r6, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002490:	337d      	adds	r3, #125	; 0x7d
 8002492:	33ff      	adds	r3, #255	; 0xff
 8002494:	601d      	str	r5, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002496:	1852      	adds	r2, r2, r1
 8002498:	00d2      	lsls	r2, r2, #3
 800249a:	18a2      	adds	r2, r4, r2
 800249c:	3281      	adds	r2, #129	; 0x81
 800249e:	32ff      	adds	r2, #255	; 0xff
 80024a0:	6015      	str	r5, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a2:	3101      	adds	r1, #1
 80024a4:	b2c9      	uxtb	r1, r1
 80024a6:	4288      	cmp	r0, r1
 80024a8:	d8e3      	bhi.n	8002472 <HAL_PCD_Init+0x62>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80024aa:	6820      	ldr	r0, [r4, #0]
 80024ac:	0023      	movs	r3, r4
 80024ae:	3310      	adds	r3, #16
 80024b0:	466a      	mov	r2, sp
 80024b2:	cb62      	ldmia	r3!, {r1, r5, r6}
 80024b4:	c262      	stmia	r2!, {r1, r5, r6}
 80024b6:	cb22      	ldmia	r3!, {r1, r5}
 80024b8:	c222      	stmia	r2!, {r1, r5}
 80024ba:	6861      	ldr	r1, [r4, #4]
 80024bc:	68a2      	ldr	r2, [r4, #8]
 80024be:	68e3      	ldr	r3, [r4, #12]
 80024c0:	f001 fb38 	bl	8003b34 <USB_DevInit>
  hpcd->USB_Address = 0U;
 80024c4:	2324      	movs	r3, #36	; 0x24
 80024c6:	2200      	movs	r2, #0
 80024c8:	54e2      	strb	r2, [r4, r3]
  hpcd->State = HAL_PCD_STATE_READY;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_PCD_Init+0xdc>)
 80024cc:	3201      	adds	r2, #1
 80024ce:	54e2      	strb	r2, [r4, r3]
  if (hpcd->Init.lpm_enable == 1U)
 80024d0:	69e3      	ldr	r3, [r4, #28]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d002      	beq.n	80024dc <HAL_PCD_Init+0xcc>
  return HAL_OK;
 80024d6:	2000      	movs	r0, #0
}
 80024d8:	b006      	add	sp, #24
 80024da:	bd70      	pop	{r4, r5, r6, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024dc:	0020      	movs	r0, r4
 80024de:	f000 fedb 	bl	8003298 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 80024e2:	2000      	movs	r0, #0
 80024e4:	e7f8      	b.n	80024d8 <HAL_PCD_Init+0xc8>
    return HAL_ERROR;
 80024e6:	2001      	movs	r0, #1
 80024e8:	e7f6      	b.n	80024d8 <HAL_PCD_Init+0xc8>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	000002a9 	.word	0x000002a9

080024f0 <HAL_PCD_Start>:
{
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80024f4:	23aa      	movs	r3, #170	; 0xaa
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	5cc3      	ldrb	r3, [r0, r3]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d00d      	beq.n	800251a <HAL_PCD_Start+0x2a>
 80024fe:	25aa      	movs	r5, #170	; 0xaa
 8002500:	00ad      	lsls	r5, r5, #2
 8002502:	2301      	movs	r3, #1
 8002504:	5543      	strb	r3, [r0, r5]
  __HAL_PCD_ENABLE(hpcd);
 8002506:	6800      	ldr	r0, [r0, #0]
 8002508:	f001 fb00 	bl	8003b0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800250c:	6820      	ldr	r0, [r4, #0]
 800250e:	f001 fde9 	bl	80040e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002512:	2300      	movs	r3, #0
 8002514:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002516:	2000      	movs	r0, #0
}
 8002518:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800251a:	2002      	movs	r0, #2
 800251c:	e7fc      	b.n	8002518 <HAL_PCD_Start+0x28>
	...

08002520 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	0005      	movs	r5, r0
 8002524:	000c      	movs	r4, r1
 8002526:	0016      	movs	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002528:	0653      	lsls	r3, r2, #25
 800252a:	d400      	bmi.n	800252e <HAL_PCD_EP_DB_Transmit+0xe>
 800252c:	e0ee      	b.n	800270c <HAL_PCD_EP_DB_Transmit+0x1ec>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800252e:	6802      	ldr	r2, [r0, #0]
 8002530:	2350      	movs	r3, #80	; 0x50
 8002532:	5ad3      	ldrh	r3, [r2, r3]
 8002534:	7809      	ldrb	r1, [r1, #0]
 8002536:	00c8      	lsls	r0, r1, #3
 8002538:	181b      	adds	r3, r3, r0
 800253a:	189b      	adds	r3, r3, r2
 800253c:	4aab      	ldr	r2, [pc, #684]	; (80027ec <HAL_PCD_EP_DB_Transmit+0x2cc>)
 800253e:	4694      	mov	ip, r2
 8002540:	4463      	add	r3, ip
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	0592      	lsls	r2, r2, #22
 8002546:	0d92      	lsrs	r2, r2, #22

    if (ep->xfer_len > TxPctSize)
 8002548:	69a3      	ldr	r3, [r4, #24]
 800254a:	4293      	cmp	r3, r2
 800254c:	d940      	bls.n	80025d0 <HAL_PCD_EP_DB_Transmit+0xb0>
    {
      ep->xfer_len -= TxPctSize;
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002552:	69a3      	ldr	r3, [r4, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d159      	bne.n	800260c <HAL_PCD_EP_DB_Transmit+0xec>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002558:	7863      	ldrb	r3, [r4, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d13b      	bne.n	80025d6 <HAL_PCD_EP_DB_Transmit+0xb6>
 800255e:	682b      	ldr	r3, [r5, #0]
 8002560:	2250      	movs	r2, #80	; 0x50
 8002562:	5a9a      	ldrh	r2, [r3, r2]
 8002564:	189b      	adds	r3, r3, r2
 8002566:	18c3      	adds	r3, r0, r3
 8002568:	4aa0      	ldr	r2, [pc, #640]	; (80027ec <HAL_PCD_EP_DB_Transmit+0x2cc>)
 800256a:	4694      	mov	ip, r2
 800256c:	4463      	add	r3, ip
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	0592      	lsls	r2, r2, #22
 8002572:	0d92      	lsrs	r2, r2, #22
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	499d      	ldr	r1, [pc, #628]	; (80027f0 <HAL_PCD_EP_DB_Transmit+0x2d0>)
 800257a:	430a      	orrs	r2, r1
 800257c:	b292      	uxth	r2, r2
 800257e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002580:	682b      	ldr	r3, [r5, #0]
 8002582:	7862      	ldrb	r2, [r4, #1]
 8002584:	2a00      	cmp	r2, #0
 8002586:	d133      	bne.n	80025f0 <HAL_PCD_EP_DB_Transmit+0xd0>
 8002588:	3250      	adds	r2, #80	; 0x50
 800258a:	5a9a      	ldrh	r2, [r3, r2]
 800258c:	189a      	adds	r2, r3, r2
 800258e:	7823      	ldrb	r3, [r4, #0]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	189b      	adds	r3, r3, r2
 8002594:	4a97      	ldr	r2, [pc, #604]	; (80027f4 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 8002596:	4694      	mov	ip, r2
 8002598:	4463      	add	r3, ip
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	0592      	lsls	r2, r2, #22
 800259e:	0d92      	lsrs	r2, r2, #22
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	4992      	ldr	r1, [pc, #584]	; (80027f0 <HAL_PCD_EP_DB_Transmit+0x2d0>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	b292      	uxth	r2, r2
 80025aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025ac:	7821      	ldrb	r1, [r4, #0]
 80025ae:	0028      	movs	r0, r5
 80025b0:	f003 f9e2 	bl	8005978 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025b4:	0476      	lsls	r6, r6, #17
 80025b6:	d539      	bpl.n	800262c <HAL_PCD_EP_DB_Transmit+0x10c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025b8:	682a      	ldr	r2, [r5, #0]
 80025ba:	7823      	ldrb	r3, [r4, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	18d2      	adds	r2, r2, r3
 80025c0:	8811      	ldrh	r1, [r2, #0]
 80025c2:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x2d8>)
 80025c4:	4019      	ands	r1, r3
 80025c6:	4b8d      	ldr	r3, [pc, #564]	; (80027fc <HAL_PCD_EP_DB_Transmit+0x2dc>)
 80025c8:	430b      	orrs	r3, r1
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	8013      	strh	r3, [r2, #0]
 80025ce:	e02d      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x10c>
      ep->xfer_len = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61a3      	str	r3, [r4, #24]
 80025d4:	e7bd      	b.n	8002552 <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d1d2      	bne.n	8002580 <HAL_PCD_EP_DB_Transmit+0x60>
 80025da:	682b      	ldr	r3, [r5, #0]
 80025dc:	2250      	movs	r2, #80	; 0x50
 80025de:	5a9a      	ldrh	r2, [r3, r2]
 80025e0:	189b      	adds	r3, r3, r2
 80025e2:	18c0      	adds	r0, r0, r3
 80025e4:	4b81      	ldr	r3, [pc, #516]	; (80027ec <HAL_PCD_EP_DB_Transmit+0x2cc>)
 80025e6:	469c      	mov	ip, r3
 80025e8:	4460      	add	r0, ip
 80025ea:	2300      	movs	r3, #0
 80025ec:	8003      	strh	r3, [r0, #0]
 80025ee:	e7c7      	b.n	8002580 <HAL_PCD_EP_DB_Transmit+0x60>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025f0:	2a01      	cmp	r2, #1
 80025f2:	d1db      	bne.n	80025ac <HAL_PCD_EP_DB_Transmit+0x8c>
 80025f4:	324f      	adds	r2, #79	; 0x4f
 80025f6:	5a9a      	ldrh	r2, [r3, r2]
 80025f8:	189b      	adds	r3, r3, r2
 80025fa:	7822      	ldrb	r2, [r4, #0]
 80025fc:	00d2      	lsls	r2, r2, #3
 80025fe:	18d3      	adds	r3, r2, r3
 8002600:	4a7c      	ldr	r2, [pc, #496]	; (80027f4 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 8002602:	4694      	mov	ip, r2
 8002604:	4463      	add	r3, ip
 8002606:	2200      	movs	r2, #0
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	e7cf      	b.n	80025ac <HAL_PCD_EP_DB_Transmit+0x8c>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800260c:	0476      	lsls	r6, r6, #17
 800260e:	d509      	bpl.n	8002624 <HAL_PCD_EP_DB_Transmit+0x104>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	0089      	lsls	r1, r1, #2
 8002614:	1859      	adds	r1, r3, r1
 8002616:	8808      	ldrh	r0, [r1, #0]
 8002618:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x2d8>)
 800261a:	4018      	ands	r0, r3
 800261c:	4b77      	ldr	r3, [pc, #476]	; (80027fc <HAL_PCD_EP_DB_Transmit+0x2dc>)
 800261e:	4303      	orrs	r3, r0
 8002620:	b29b      	uxth	r3, r3
 8002622:	800b      	strh	r3, [r1, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002624:	2324      	movs	r3, #36	; 0x24
 8002626:	5ce3      	ldrb	r3, [r4, r3]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00f      	beq.n	800264c <HAL_PCD_EP_DB_Transmit+0x12c>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800262c:	6829      	ldr	r1, [r5, #0]
 800262e:	7823      	ldrb	r3, [r4, #0]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	18c9      	adds	r1, r1, r3
 8002634:	880b      	ldrh	r3, [r1, #0]
 8002636:	4a72      	ldr	r2, [pc, #456]	; (8002800 <HAL_PCD_EP_DB_Transmit+0x2e0>)
 8002638:	4013      	ands	r3, r2
 800263a:	2230      	movs	r2, #48	; 0x30
 800263c:	4053      	eors	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	4a70      	ldr	r2, [pc, #448]	; (8002804 <HAL_PCD_EP_DB_Transmit+0x2e4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	b29b      	uxth	r3, r3
 8002646:	800b      	strh	r3, [r1, #0]

  return HAL_OK;
}
 8002648:	2000      	movs	r0, #0
 800264a:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 800264c:	6963      	ldr	r3, [r4, #20]
 800264e:	189b      	adds	r3, r3, r2
 8002650:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002652:	69e3      	ldr	r3, [r4, #28]
 8002654:	189b      	adds	r3, r3, r2
 8002656:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002658:	6a21      	ldr	r1, [r4, #32]
 800265a:	6923      	ldr	r3, [r4, #16]
 800265c:	4299      	cmp	r1, r3
 800265e:	d321      	bcc.n	80026a4 <HAL_PCD_EP_DB_Transmit+0x184>
          ep->xfer_len_db -= len;
 8002660:	1ac9      	subs	r1, r1, r3
 8002662:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002664:	7862      	ldrb	r2, [r4, #1]
 8002666:	2a00      	cmp	r2, #0
 8002668:	d13a      	bne.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x1c0>
 800266a:	682a      	ldr	r2, [r5, #0]
 800266c:	2150      	movs	r1, #80	; 0x50
 800266e:	5a51      	ldrh	r1, [r2, r1]
 8002670:	1851      	adds	r1, r2, r1
 8002672:	7822      	ldrb	r2, [r4, #0]
 8002674:	00d2      	lsls	r2, r2, #3
 8002676:	1852      	adds	r2, r2, r1
 8002678:	495c      	ldr	r1, [pc, #368]	; (80027ec <HAL_PCD_EP_DB_Transmit+0x2cc>)
 800267a:	468c      	mov	ip, r1
 800267c:	4462      	add	r2, ip
 800267e:	8811      	ldrh	r1, [r2, #0]
 8002680:	0589      	lsls	r1, r1, #22
 8002682:	0d89      	lsrs	r1, r1, #22
 8002684:	8011      	strh	r1, [r2, #0]
 8002686:	2b3e      	cmp	r3, #62	; 0x3e
 8002688:	d918      	bls.n	80026bc <HAL_PCD_EP_DB_Transmit+0x19c>
 800268a:	0959      	lsrs	r1, r3, #5
 800268c:	06d8      	lsls	r0, r3, #27
 800268e:	d100      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0x172>
 8002690:	3901      	subs	r1, #1
 8002692:	8810      	ldrh	r0, [r2, #0]
 8002694:	0289      	lsls	r1, r1, #10
 8002696:	b289      	uxth	r1, r1
 8002698:	4308      	orrs	r0, r1
 800269a:	4955      	ldr	r1, [pc, #340]	; (80027f0 <HAL_PCD_EP_DB_Transmit+0x2d0>)
 800269c:	4301      	orrs	r1, r0
 800269e:	b289      	uxth	r1, r1
 80026a0:	8011      	strh	r1, [r2, #0]
 80026a2:	e01f      	b.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x1c4>
        else if (ep->xfer_len_db == 0U)
 80026a4:	2900      	cmp	r1, #0
 80026a6:	d103      	bne.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x190>
          ep->xfer_fill_db = 0U;
 80026a8:	2324      	movs	r3, #36	; 0x24
 80026aa:	54e1      	strb	r1, [r4, r3]
          len = TxPctSize;
 80026ac:	0013      	movs	r3, r2
 80026ae:	e7d9      	b.n	8002664 <HAL_PCD_EP_DB_Transmit+0x144>
          ep->xfer_fill_db = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	54a3      	strb	r3, [r4, r2]
          ep->xfer_len_db = 0U;
 80026b6:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80026b8:	000b      	movs	r3, r1
 80026ba:	e7d3      	b.n	8002664 <HAL_PCD_EP_DB_Transmit+0x144>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_PCD_EP_DB_Transmit+0x1ac>
 80026c0:	8811      	ldrh	r1, [r2, #0]
 80026c2:	484b      	ldr	r0, [pc, #300]	; (80027f0 <HAL_PCD_EP_DB_Transmit+0x2d0>)
 80026c4:	4301      	orrs	r1, r0
 80026c6:	b289      	uxth	r1, r1
 80026c8:	8011      	strh	r1, [r2, #0]
 80026ca:	e00b      	b.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x1c4>
 80026cc:	0859      	lsrs	r1, r3, #1
 80026ce:	07d8      	lsls	r0, r3, #31
 80026d0:	d500      	bpl.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x1b4>
 80026d2:	3101      	adds	r1, #1
 80026d4:	8810      	ldrh	r0, [r2, #0]
 80026d6:	0289      	lsls	r1, r1, #10
 80026d8:	b289      	uxth	r1, r1
 80026da:	4301      	orrs	r1, r0
 80026dc:	8011      	strh	r1, [r2, #0]
 80026de:	e001      	b.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x1c4>
 80026e0:	2a01      	cmp	r2, #1
 80026e2:	d006      	beq.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x1d2>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026e4:	6828      	ldr	r0, [r5, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	8922      	ldrh	r2, [r4, #8]
 80026ea:	6961      	ldr	r1, [r4, #20]
 80026ec:	f001 fd08 	bl	8004100 <USB_WritePMA>
 80026f0:	e79c      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x10c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026f2:	682a      	ldr	r2, [r5, #0]
 80026f4:	2150      	movs	r1, #80	; 0x50
 80026f6:	5a51      	ldrh	r1, [r2, r1]
 80026f8:	1851      	adds	r1, r2, r1
 80026fa:	7822      	ldrb	r2, [r4, #0]
 80026fc:	00d2      	lsls	r2, r2, #3
 80026fe:	1852      	adds	r2, r2, r1
 8002700:	493a      	ldr	r1, [pc, #232]	; (80027ec <HAL_PCD_EP_DB_Transmit+0x2cc>)
 8002702:	468c      	mov	ip, r1
 8002704:	4462      	add	r2, ip
 8002706:	b299      	uxth	r1, r3
 8002708:	8011      	strh	r1, [r2, #0]
 800270a:	e7eb      	b.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x1c4>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800270c:	6802      	ldr	r2, [r0, #0]
 800270e:	2350      	movs	r3, #80	; 0x50
 8002710:	5ad3      	ldrh	r3, [r2, r3]
 8002712:	7809      	ldrb	r1, [r1, #0]
 8002714:	00c8      	lsls	r0, r1, #3
 8002716:	181b      	adds	r3, r3, r0
 8002718:	189b      	adds	r3, r3, r2
 800271a:	4a36      	ldr	r2, [pc, #216]	; (80027f4 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 800271c:	4694      	mov	ip, r2
 800271e:	4463      	add	r3, ip
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	0592      	lsls	r2, r2, #22
 8002724:	0d92      	lsrs	r2, r2, #22
    if (ep->xfer_len >= TxPctSize)
 8002726:	69a3      	ldr	r3, [r4, #24]
 8002728:	4293      	cmp	r3, r2
 800272a:	d341      	bcc.n	80027b0 <HAL_PCD_EP_DB_Transmit+0x290>
      ep->xfer_len -= TxPctSize;
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002730:	69a3      	ldr	r3, [r4, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d168      	bne.n	8002808 <HAL_PCD_EP_DB_Transmit+0x2e8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002736:	7863      	ldrb	r3, [r4, #1]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d13c      	bne.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x296>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	2250      	movs	r2, #80	; 0x50
 8002740:	5a9a      	ldrh	r2, [r3, r2]
 8002742:	189b      	adds	r3, r3, r2
 8002744:	181b      	adds	r3, r3, r0
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <HAL_PCD_EP_DB_Transmit+0x2cc>)
 8002748:	4694      	mov	ip, r2
 800274a:	4463      	add	r3, ip
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	0592      	lsls	r2, r2, #22
 8002750:	0d92      	lsrs	r2, r2, #22
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	4926      	ldr	r1, [pc, #152]	; (80027f0 <HAL_PCD_EP_DB_Transmit+0x2d0>)
 8002758:	430a      	orrs	r2, r1
 800275a:	b292      	uxth	r2, r2
 800275c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800275e:	682b      	ldr	r3, [r5, #0]
 8002760:	7862      	ldrb	r2, [r4, #1]
 8002762:	2a00      	cmp	r2, #0
 8002764:	d134      	bne.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8002766:	3250      	adds	r2, #80	; 0x50
 8002768:	5a9a      	ldrh	r2, [r3, r2]
 800276a:	189b      	adds	r3, r3, r2
 800276c:	7822      	ldrb	r2, [r4, #0]
 800276e:	00d2      	lsls	r2, r2, #3
 8002770:	189b      	adds	r3, r3, r2
 8002772:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 8002774:	4694      	mov	ip, r2
 8002776:	4463      	add	r3, ip
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	0592      	lsls	r2, r2, #22
 800277c:	0d92      	lsrs	r2, r2, #22
 800277e:	801a      	strh	r2, [r3, #0]
 8002780:	881a      	ldrh	r2, [r3, #0]
 8002782:	491b      	ldr	r1, [pc, #108]	; (80027f0 <HAL_PCD_EP_DB_Transmit+0x2d0>)
 8002784:	430a      	orrs	r2, r1
 8002786:	b292      	uxth	r2, r2
 8002788:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800278a:	7821      	ldrb	r1, [r4, #0]
 800278c:	0028      	movs	r0, r5
 800278e:	f003 f8f3 	bl	8005978 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002792:	0476      	lsls	r6, r6, #17
 8002794:	d500      	bpl.n	8002798 <HAL_PCD_EP_DB_Transmit+0x278>
 8002796:	e749      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x10c>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002798:	682a      	ldr	r2, [r5, #0]
 800279a:	7823      	ldrb	r3, [r4, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	18d2      	adds	r2, r2, r3
 80027a0:	8811      	ldrh	r1, [r2, #0]
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x2d8>)
 80027a4:	4019      	ands	r1, r3
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_PCD_EP_DB_Transmit+0x2dc>)
 80027a8:	430b      	orrs	r3, r1
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	8013      	strh	r3, [r2, #0]
 80027ae:	e73d      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x10c>
      ep->xfer_len = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61a3      	str	r3, [r4, #24]
 80027b4:	e7bc      	b.n	8002730 <HAL_PCD_EP_DB_Transmit+0x210>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d1d1      	bne.n	800275e <HAL_PCD_EP_DB_Transmit+0x23e>
 80027ba:	682b      	ldr	r3, [r5, #0]
 80027bc:	2250      	movs	r2, #80	; 0x50
 80027be:	5a9a      	ldrh	r2, [r3, r2]
 80027c0:	189b      	adds	r3, r3, r2
 80027c2:	181b      	adds	r3, r3, r0
 80027c4:	4a09      	ldr	r2, [pc, #36]	; (80027ec <HAL_PCD_EP_DB_Transmit+0x2cc>)
 80027c6:	4694      	mov	ip, r2
 80027c8:	4463      	add	r3, ip
 80027ca:	2200      	movs	r2, #0
 80027cc:	801a      	strh	r2, [r3, #0]
 80027ce:	e7c6      	b.n	800275e <HAL_PCD_EP_DB_Transmit+0x23e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027d0:	2a01      	cmp	r2, #1
 80027d2:	d1da      	bne.n	800278a <HAL_PCD_EP_DB_Transmit+0x26a>
 80027d4:	324f      	adds	r2, #79	; 0x4f
 80027d6:	5a9a      	ldrh	r2, [r3, r2]
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	7822      	ldrb	r2, [r4, #0]
 80027dc:	00d2      	lsls	r2, r2, #3
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 80027e2:	4694      	mov	ip, r2
 80027e4:	4463      	add	r3, ip
 80027e6:	2200      	movs	r2, #0
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	e7ce      	b.n	800278a <HAL_PCD_EP_DB_Transmit+0x26a>
 80027ec:	00000402 	.word	0x00000402
 80027f0:	ffff8000 	.word	0xffff8000
 80027f4:	00000406 	.word	0x00000406
 80027f8:	ffff8f8f 	.word	0xffff8f8f
 80027fc:	ffffc080 	.word	0xffffc080
 8002800:	ffff8fbf 	.word	0xffff8fbf
 8002804:	ffff8080 	.word	0xffff8080
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002808:	0476      	lsls	r6, r6, #17
 800280a:	d409      	bmi.n	8002820 <HAL_PCD_EP_DB_Transmit+0x300>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800280c:	682b      	ldr	r3, [r5, #0]
 800280e:	0089      	lsls	r1, r1, #2
 8002810:	1859      	adds	r1, r3, r1
 8002812:	8808      	ldrh	r0, [r1, #0]
 8002814:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <HAL_PCD_EP_DB_Transmit+0x3c8>)
 8002816:	4018      	ands	r0, r3
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_PCD_EP_DB_Transmit+0x3cc>)
 800281a:	4303      	orrs	r3, r0
 800281c:	b29b      	uxth	r3, r3
 800281e:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8002820:	2324      	movs	r3, #36	; 0x24
 8002822:	5ce3      	ldrb	r3, [r4, r3]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d000      	beq.n	800282a <HAL_PCD_EP_DB_Transmit+0x30a>
 8002828:	e700      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x10c>
        ep->xfer_buff += TxPctSize;
 800282a:	6963      	ldr	r3, [r4, #20]
 800282c:	189b      	adds	r3, r3, r2
 800282e:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002830:	69e3      	ldr	r3, [r4, #28]
 8002832:	189b      	adds	r3, r3, r2
 8002834:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002836:	6a21      	ldr	r1, [r4, #32]
 8002838:	6923      	ldr	r3, [r4, #16]
 800283a:	4299      	cmp	r1, r3
 800283c:	d321      	bcc.n	8002882 <HAL_PCD_EP_DB_Transmit+0x362>
          ep->xfer_len_db -= len;
 800283e:	1ac9      	subs	r1, r1, r3
 8002840:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002842:	682a      	ldr	r2, [r5, #0]
 8002844:	7861      	ldrb	r1, [r4, #1]
 8002846:	2900      	cmp	r1, #0
 8002848:	d139      	bne.n	80028be <HAL_PCD_EP_DB_Transmit+0x39e>
 800284a:	3150      	adds	r1, #80	; 0x50
 800284c:	5a51      	ldrh	r1, [r2, r1]
 800284e:	1852      	adds	r2, r2, r1
 8002850:	7821      	ldrb	r1, [r4, #0]
 8002852:	00c9      	lsls	r1, r1, #3
 8002854:	1852      	adds	r2, r2, r1
 8002856:	4926      	ldr	r1, [pc, #152]	; (80028f0 <HAL_PCD_EP_DB_Transmit+0x3d0>)
 8002858:	468c      	mov	ip, r1
 800285a:	4462      	add	r2, ip
 800285c:	8811      	ldrh	r1, [r2, #0]
 800285e:	0589      	lsls	r1, r1, #22
 8002860:	0d89      	lsrs	r1, r1, #22
 8002862:	8011      	strh	r1, [r2, #0]
 8002864:	2b3e      	cmp	r3, #62	; 0x3e
 8002866:	d918      	bls.n	800289a <HAL_PCD_EP_DB_Transmit+0x37a>
 8002868:	0959      	lsrs	r1, r3, #5
 800286a:	06d8      	lsls	r0, r3, #27
 800286c:	d100      	bne.n	8002870 <HAL_PCD_EP_DB_Transmit+0x350>
 800286e:	3901      	subs	r1, #1
 8002870:	8810      	ldrh	r0, [r2, #0]
 8002872:	0289      	lsls	r1, r1, #10
 8002874:	b289      	uxth	r1, r1
 8002876:	4308      	orrs	r0, r1
 8002878:	491e      	ldr	r1, [pc, #120]	; (80028f4 <HAL_PCD_EP_DB_Transmit+0x3d4>)
 800287a:	4301      	orrs	r1, r0
 800287c:	b289      	uxth	r1, r1
 800287e:	8011      	strh	r1, [r2, #0]
 8002880:	e01f      	b.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x3a2>
        else if (ep->xfer_len_db == 0U)
 8002882:	2900      	cmp	r1, #0
 8002884:	d103      	bne.n	800288e <HAL_PCD_EP_DB_Transmit+0x36e>
          ep->xfer_fill_db = 0U;
 8002886:	2324      	movs	r3, #36	; 0x24
 8002888:	54e1      	strb	r1, [r4, r3]
          len = TxPctSize;
 800288a:	0013      	movs	r3, r2
 800288c:	e7d9      	b.n	8002842 <HAL_PCD_EP_DB_Transmit+0x322>
          ep->xfer_len_db = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8002892:	2224      	movs	r2, #36	; 0x24
 8002894:	54a3      	strb	r3, [r4, r2]
          len = ep->xfer_len_db;
 8002896:	000b      	movs	r3, r1
 8002898:	e7d3      	b.n	8002842 <HAL_PCD_EP_DB_Transmit+0x322>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <HAL_PCD_EP_DB_Transmit+0x38a>
 800289e:	8811      	ldrh	r1, [r2, #0]
 80028a0:	4814      	ldr	r0, [pc, #80]	; (80028f4 <HAL_PCD_EP_DB_Transmit+0x3d4>)
 80028a2:	4301      	orrs	r1, r0
 80028a4:	b289      	uxth	r1, r1
 80028a6:	8011      	strh	r1, [r2, #0]
 80028a8:	e00b      	b.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x3a2>
 80028aa:	0859      	lsrs	r1, r3, #1
 80028ac:	07d8      	lsls	r0, r3, #31
 80028ae:	d500      	bpl.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x392>
 80028b0:	3101      	adds	r1, #1
 80028b2:	8810      	ldrh	r0, [r2, #0]
 80028b4:	0289      	lsls	r1, r1, #10
 80028b6:	b289      	uxth	r1, r1
 80028b8:	4301      	orrs	r1, r0
 80028ba:	8011      	strh	r1, [r2, #0]
 80028bc:	e001      	b.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x3a2>
 80028be:	2901      	cmp	r1, #1
 80028c0:	d006      	beq.n	80028d0 <HAL_PCD_EP_DB_Transmit+0x3b0>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028c2:	6828      	ldr	r0, [r5, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	8962      	ldrh	r2, [r4, #10]
 80028c8:	6961      	ldr	r1, [r4, #20]
 80028ca:	f001 fc19 	bl	8004100 <USB_WritePMA>
 80028ce:	e6ad      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x10c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028d0:	314f      	adds	r1, #79	; 0x4f
 80028d2:	5a51      	ldrh	r1, [r2, r1]
 80028d4:	1852      	adds	r2, r2, r1
 80028d6:	7821      	ldrb	r1, [r4, #0]
 80028d8:	00c9      	lsls	r1, r1, #3
 80028da:	1852      	adds	r2, r2, r1
 80028dc:	4904      	ldr	r1, [pc, #16]	; (80028f0 <HAL_PCD_EP_DB_Transmit+0x3d0>)
 80028de:	468c      	mov	ip, r1
 80028e0:	4462      	add	r2, ip
 80028e2:	b299      	uxth	r1, r3
 80028e4:	8011      	strh	r1, [r2, #0]
 80028e6:	e7ec      	b.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x3a2>
 80028e8:	ffff8f8f 	.word	0xffff8f8f
 80028ec:	ffffc080 	.word	0xffffc080
 80028f0:	00000406 	.word	0x00000406
 80028f4:	ffff8000 	.word	0xffff8000

080028f8 <PCD_EP_ISR_Handler>:
{
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	46ce      	mov	lr, r9
 80028fc:	4647      	mov	r7, r8
 80028fe:	b580      	push	{r7, lr}
 8002900:	0004      	movs	r4, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002902:	6820      	ldr	r0, [r4, #0]
 8002904:	2344      	movs	r3, #68	; 0x44
 8002906:	5ac3      	ldrh	r3, [r0, r3]
 8002908:	b21b      	sxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	db00      	blt.n	8002910 <PCD_EP_ISR_Handler+0x18>
 800290e:	e287      	b.n	8002e20 <PCD_EP_ISR_Handler+0x528>
    wIstr = hpcd->Instance->ISTR;
 8002910:	2344      	movs	r3, #68	; 0x44
 8002912:	5ac3      	ldrh	r3, [r0, r3]
 8002914:	b299      	uxth	r1, r3
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002916:	220f      	movs	r2, #15
 8002918:	001d      	movs	r5, r3
 800291a:	4015      	ands	r5, r2
    if (epindex == 0U)
 800291c:	4213      	tst	r3, r2
 800291e:	d000      	beq.n	8002922 <PCD_EP_ISR_Handler+0x2a>
 8002920:	e0ce      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002922:	06c9      	lsls	r1, r1, #27
 8002924:	d564      	bpl.n	80029f0 <PCD_EP_ISR_Handler+0xf8>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002926:	8803      	ldrh	r3, [r0, #0]
 8002928:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800292a:	051b      	lsls	r3, r3, #20
 800292c:	d500      	bpl.n	8002930 <PCD_EP_ISR_Handler+0x38>
 800292e:	e091      	b.n	8002a54 <PCD_EP_ISR_Handler+0x15c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002930:	b212      	sxth	r2, r2
 8002932:	2a00      	cmp	r2, #0
 8002934:	dae5      	bge.n	8002902 <PCD_EP_ISR_Handler+0xa>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002936:	8803      	ldrh	r3, [r0, #0]
 8002938:	4ab8      	ldr	r2, [pc, #736]	; (8002c1c <PCD_EP_ISR_Handler+0x324>)
 800293a:	4013      	ands	r3, r2
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	4313      	orrs	r3, r2
 8002940:	b29b      	uxth	r3, r3
 8002942:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002944:	6820      	ldr	r0, [r4, #0]
 8002946:	2350      	movs	r3, #80	; 0x50
 8002948:	5ac3      	ldrh	r3, [r0, r3]
 800294a:	22b4      	movs	r2, #180	; 0xb4
 800294c:	0052      	lsls	r2, r2, #1
 800294e:	5ca2      	ldrb	r2, [r4, r2]
 8002950:	00d2      	lsls	r2, r2, #3
 8002952:	189b      	adds	r3, r3, r2
 8002954:	181b      	adds	r3, r3, r0
 8002956:	4ab2      	ldr	r2, [pc, #712]	; (8002c20 <PCD_EP_ISR_Handler+0x328>)
 8002958:	4694      	mov	ip, r2
 800295a:	4463      	add	r3, ip
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	059b      	lsls	r3, r3, #22
 8002960:	0d9b      	lsrs	r3, r3, #22
 8002962:	0022      	movs	r2, r4
 8002964:	3269      	adds	r2, #105	; 0x69
 8002966:	32ff      	adds	r2, #255	; 0xff
 8002968:	61d3      	str	r3, [r2, #28]
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00e      	beq.n	800298c <PCD_EP_ISR_Handler+0x94>
 800296e:	6951      	ldr	r1, [r2, #20]
 8002970:	2900      	cmp	r1, #0
 8002972:	d00b      	beq.n	800298c <PCD_EP_ISR_Handler+0x94>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002974:	0015      	movs	r5, r2
 8002976:	88d2      	ldrh	r2, [r2, #6]
 8002978:	f001 ff6c 	bl	8004854 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800297c:	69ea      	ldr	r2, [r5, #28]
 800297e:	696b      	ldr	r3, [r5, #20]
 8002980:	189b      	adds	r3, r3, r2
 8002982:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002984:	2100      	movs	r1, #0
 8002986:	0020      	movs	r0, r4
 8002988:	f002 ffe7 	bl	800595a <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800298c:	6822      	ldr	r2, [r4, #0]
 800298e:	8813      	ldrh	r3, [r2, #0]
 8002990:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002992:	051b      	lsls	r3, r3, #20
 8002994:	d4b5      	bmi.n	8002902 <PCD_EP_ISR_Handler+0xa>
 8002996:	23c0      	movs	r3, #192	; 0xc0
 8002998:	019b      	lsls	r3, r3, #6
 800299a:	4019      	ands	r1, r3
 800299c:	4299      	cmp	r1, r3
 800299e:	d0b0      	beq.n	8002902 <PCD_EP_ISR_Handler+0xa>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029a0:	2350      	movs	r3, #80	; 0x50
 80029a2:	5ad3      	ldrh	r3, [r2, r3]
 80029a4:	18d2      	adds	r2, r2, r3
 80029a6:	4b9e      	ldr	r3, [pc, #632]	; (8002c20 <PCD_EP_ISR_Handler+0x328>)
 80029a8:	469c      	mov	ip, r3
 80029aa:	4462      	add	r2, ip
 80029ac:	8813      	ldrh	r3, [r2, #0]
 80029ae:	059b      	lsls	r3, r3, #22
 80029b0:	0d9b      	lsrs	r3, r3, #22
 80029b2:	8013      	strh	r3, [r2, #0]
 80029b4:	0023      	movs	r3, r4
 80029b6:	3369      	adds	r3, #105	; 0x69
 80029b8:	33ff      	adds	r3, #255	; 0xff
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b3e      	cmp	r3, #62	; 0x3e
 80029be:	d96d      	bls.n	8002a9c <PCD_EP_ISR_Handler+0x1a4>
 80029c0:	0959      	lsrs	r1, r3, #5
 80029c2:	06db      	lsls	r3, r3, #27
 80029c4:	d100      	bne.n	80029c8 <PCD_EP_ISR_Handler+0xd0>
 80029c6:	3901      	subs	r1, #1
 80029c8:	8813      	ldrh	r3, [r2, #0]
 80029ca:	0289      	lsls	r1, r1, #10
 80029cc:	b289      	uxth	r1, r1
 80029ce:	4319      	orrs	r1, r3
 80029d0:	4b94      	ldr	r3, [pc, #592]	; (8002c24 <PCD_EP_ISR_Handler+0x32c>)
 80029d2:	430b      	orrs	r3, r1
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029d8:	6821      	ldr	r1, [r4, #0]
 80029da:	880b      	ldrh	r3, [r1, #0]
 80029dc:	4a92      	ldr	r2, [pc, #584]	; (8002c28 <PCD_EP_ISR_Handler+0x330>)
 80029de:	4013      	ands	r3, r2
 80029e0:	22c0      	movs	r2, #192	; 0xc0
 80029e2:	0192      	lsls	r2, r2, #6
 80029e4:	405a      	eors	r2, r3
 80029e6:	4b91      	ldr	r3, [pc, #580]	; (8002c2c <PCD_EP_ISR_Handler+0x334>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	800b      	strh	r3, [r1, #0]
 80029ee:	e788      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029f0:	8802      	ldrh	r2, [r0, #0]
 80029f2:	4b8f      	ldr	r3, [pc, #572]	; (8002c30 <PCD_EP_ISR_Handler+0x338>)
 80029f4:	401a      	ands	r2, r3
 80029f6:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <PCD_EP_ISR_Handler+0x32c>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029fe:	6821      	ldr	r1, [r4, #0]
 8002a00:	2350      	movs	r3, #80	; 0x50
 8002a02:	5acb      	ldrh	r3, [r1, r3]
 8002a04:	2228      	movs	r2, #40	; 0x28
 8002a06:	5ca2      	ldrb	r2, [r4, r2]
 8002a08:	00d2      	lsls	r2, r2, #3
 8002a0a:	189b      	adds	r3, r3, r2
 8002a0c:	185b      	adds	r3, r3, r1
 8002a0e:	4a89      	ldr	r2, [pc, #548]	; (8002c34 <PCD_EP_ISR_Handler+0x33c>)
 8002a10:	4694      	mov	ip, r2
 8002a12:	4463      	add	r3, ip
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	059b      	lsls	r3, r3, #22
 8002a18:	0d9b      	lsrs	r3, r3, #22
 8002a1a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002a1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a1e:	18d3      	adds	r3, r2, r3
 8002a20:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a22:	2100      	movs	r1, #0
 8002a24:	0020      	movs	r0, r4
 8002a26:	f002 ffa7 	bl	8005978 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a2a:	2324      	movs	r3, #36	; 0x24
 8002a2c:	5ce3      	ldrb	r3, [r4, r3]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d100      	bne.n	8002a34 <PCD_EP_ISR_Handler+0x13c>
 8002a32:	e766      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
 8002a34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d000      	beq.n	8002a3c <PCD_EP_ISR_Handler+0x144>
 8002a3a:	e762      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a3c:	2224      	movs	r2, #36	; 0x24
 8002a3e:	5ca3      	ldrb	r3, [r4, r2]
 8002a40:	6820      	ldr	r0, [r4, #0]
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	4249      	negs	r1, r1
 8002a46:	430b      	orrs	r3, r1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	31cc      	adds	r1, #204	; 0xcc
 8002a4c:	5243      	strh	r3, [r0, r1]
          hpcd->USB_Address = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	54a3      	strb	r3, [r4, r2]
 8002a52:	e756      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a54:	2350      	movs	r3, #80	; 0x50
 8002a56:	5ac3      	ldrh	r3, [r0, r3]
 8002a58:	22b4      	movs	r2, #180	; 0xb4
 8002a5a:	0052      	lsls	r2, r2, #1
 8002a5c:	5ca2      	ldrb	r2, [r4, r2]
 8002a5e:	00d2      	lsls	r2, r2, #3
 8002a60:	189b      	adds	r3, r3, r2
 8002a62:	181b      	adds	r3, r3, r0
 8002a64:	4a6e      	ldr	r2, [pc, #440]	; (8002c20 <PCD_EP_ISR_Handler+0x328>)
 8002a66:	4694      	mov	ip, r2
 8002a68:	4463      	add	r3, ip
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	059b      	lsls	r3, r3, #22
 8002a6e:	0d9b      	lsrs	r3, r3, #22
 8002a70:	0022      	movs	r2, r4
 8002a72:	3269      	adds	r2, #105	; 0x69
 8002a74:	32ff      	adds	r2, #255	; 0xff
 8002a76:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a78:	21ac      	movs	r1, #172	; 0xac
 8002a7a:	0089      	lsls	r1, r1, #2
 8002a7c:	1861      	adds	r1, r4, r1
 8002a7e:	88d2      	ldrh	r2, [r2, #6]
 8002a80:	f001 fee8 	bl	8004854 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	8813      	ldrh	r3, [r2, #0]
 8002a88:	4964      	ldr	r1, [pc, #400]	; (8002c1c <PCD_EP_ISR_Handler+0x324>)
 8002a8a:	400b      	ands	r3, r1
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002a94:	0020      	movs	r0, r4
 8002a96:	f002 ff55 	bl	8005944 <HAL_PCD_SetupStageCallback>
 8002a9a:	e732      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <PCD_EP_ISR_Handler+0x1b4>
 8002aa0:	8813      	ldrh	r3, [r2, #0]
 8002aa2:	4960      	ldr	r1, [pc, #384]	; (8002c24 <PCD_EP_ISR_Handler+0x32c>)
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	8013      	strh	r3, [r2, #0]
 8002aaa:	e795      	b.n	80029d8 <PCD_EP_ISR_Handler+0xe0>
 8002aac:	0859      	lsrs	r1, r3, #1
 8002aae:	07db      	lsls	r3, r3, #31
 8002ab0:	d500      	bpl.n	8002ab4 <PCD_EP_ISR_Handler+0x1bc>
 8002ab2:	3101      	adds	r1, #1
 8002ab4:	8813      	ldrh	r3, [r2, #0]
 8002ab6:	0289      	lsls	r1, r1, #10
 8002ab8:	b289      	uxth	r1, r1
 8002aba:	430b      	orrs	r3, r1
 8002abc:	8013      	strh	r3, [r2, #0]
 8002abe:	e78b      	b.n	80029d8 <PCD_EP_ISR_Handler+0xe0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ac0:	00ae      	lsls	r6, r5, #2
 8002ac2:	1980      	adds	r0, r0, r6
 8002ac4:	8803      	ldrh	r3, [r0, #0]
 8002ac6:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db45      	blt.n	8002b5a <PCD_EP_ISR_Handler+0x262>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ace:	063b      	lsls	r3, r7, #24
 8002ad0:	d400      	bmi.n	8002ad4 <PCD_EP_ISR_Handler+0x1dc>
 8002ad2:	e716      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
        ep = &hpcd->IN_ep[epindex];
 8002ad4:	1c6b      	adds	r3, r5, #1
 8002ad6:	469c      	mov	ip, r3
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4662      	mov	r2, ip
 8002adc:	1899      	adds	r1, r3, r2
 8002ade:	00c9      	lsls	r1, r1, #3
 8002ae0:	1861      	adds	r1, r4, r1
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ae2:	6820      	ldr	r0, [r4, #0]
 8002ae4:	1980      	adds	r0, r0, r6
 8002ae6:	8806      	ldrh	r6, [r0, #0]
 8002ae8:	4a51      	ldr	r2, [pc, #324]	; (8002c30 <PCD_EP_ISR_Handler+0x338>)
 8002aea:	4016      	ands	r6, r2
 8002aec:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <PCD_EP_ISR_Handler+0x32c>)
 8002aee:	4332      	orrs	r2, r6
 8002af0:	b292      	uxth	r2, r2
 8002af2:	8002      	strh	r2, [r0, #0]
        if (ep->type == EP_TYPE_ISOC)
 8002af4:	78cb      	ldrb	r3, [r1, #3]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d100      	bne.n	8002afc <PCD_EP_ISR_Handler+0x204>
 8002afa:	e105      	b.n	8002d08 <PCD_EP_ISR_Handler+0x410>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002afc:	05fb      	lsls	r3, r7, #23
 8002afe:	d500      	bpl.n	8002b02 <PCD_EP_ISR_Handler+0x20a>
 8002b00:	e189      	b.n	8002e16 <PCD_EP_ISR_Handler+0x51e>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b02:	6820      	ldr	r0, [r4, #0]
 8002b04:	2350      	movs	r3, #80	; 0x50
 8002b06:	5ac3      	ldrh	r3, [r0, r3]
 8002b08:	1c6e      	adds	r6, r5, #1
 8002b0a:	00b2      	lsls	r2, r6, #2
 8002b0c:	1992      	adds	r2, r2, r6
 8002b0e:	00d2      	lsls	r2, r2, #3
 8002b10:	5d16      	ldrb	r6, [r2, r4]
 8002b12:	00f2      	lsls	r2, r6, #3
 8002b14:	189b      	adds	r3, r3, r2
 8002b16:	181b      	adds	r3, r3, r0
 8002b18:	4a46      	ldr	r2, [pc, #280]	; (8002c34 <PCD_EP_ISR_Handler+0x33c>)
 8002b1a:	4694      	mov	ip, r2
 8002b1c:	4463      	add	r3, ip
 8002b1e:	881a      	ldrh	r2, [r3, #0]
 8002b20:	0592      	lsls	r2, r2, #22
 8002b22:	0d92      	lsrs	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 8002b24:	00ab      	lsls	r3, r5, #2
 8002b26:	195b      	adds	r3, r3, r5
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	18e3      	adds	r3, r4, r3
 8002b2c:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8002b2e:	4297      	cmp	r7, r2
 8002b30:	d800      	bhi.n	8002b34 <PCD_EP_ISR_Handler+0x23c>
 8002b32:	e15c      	b.n	8002dee <PCD_EP_ISR_Handler+0x4f6>
              ep->xfer_len -= TxPctSize;
 8002b34:	00ab      	lsls	r3, r5, #2
 8002b36:	195b      	adds	r3, r3, r5
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	18e3      	adds	r3, r4, r3
 8002b3c:	1abf      	subs	r7, r7, r2
 8002b3e:	641f      	str	r7, [r3, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8002b40:	00ab      	lsls	r3, r5, #2
 8002b42:	195b      	adds	r3, r3, r5
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	18e3      	adds	r3, r4, r3
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d000      	beq.n	8002b50 <PCD_EP_ISR_Handler+0x258>
 8002b4e:	e155      	b.n	8002dfc <PCD_EP_ISR_Handler+0x504>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b50:	0031      	movs	r1, r6
 8002b52:	0020      	movs	r0, r4
 8002b54:	f002 ff10 	bl	8005978 <HAL_PCD_DataInStageCallback>
 8002b58:	e6d3      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b5a:	8803      	ldrh	r3, [r0, #0]
 8002b5c:	4a2f      	ldr	r2, [pc, #188]	; (8002c1c <PCD_EP_ISR_Handler+0x324>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	4313      	orrs	r3, r2
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b68:	1972      	adds	r2, r6, r5
 8002b6a:	00d2      	lsls	r2, r2, #3
 8002b6c:	3269      	adds	r2, #105	; 0x69
 8002b6e:	32ff      	adds	r2, #255	; 0xff
 8002b70:	4690      	mov	r8, r2
 8002b72:	44a0      	add	r8, r4
        if (ep->doublebuffer == 0U)
 8002b74:	1973      	adds	r3, r6, r5
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	18e3      	adds	r3, r4, r3
 8002b7a:	3375      	adds	r3, #117	; 0x75
 8002b7c:	33ff      	adds	r3, #255	; 0xff
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d159      	bne.n	8002c38 <PCD_EP_ISR_Handler+0x340>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b84:	6820      	ldr	r0, [r4, #0]
 8002b86:	3350      	adds	r3, #80	; 0x50
 8002b88:	5ac2      	ldrh	r2, [r0, r3]
 8002b8a:	1973      	adds	r3, r6, r5
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	18e3      	adds	r3, r4, r3
 8002b90:	3369      	adds	r3, #105	; 0x69
 8002b92:	33ff      	adds	r3, #255	; 0xff
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	18d3      	adds	r3, r2, r3
 8002b9a:	181b      	adds	r3, r3, r0
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <PCD_EP_ISR_Handler+0x328>)
 8002b9e:	4694      	mov	ip, r2
 8002ba0:	4463      	add	r3, ip
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	059b      	lsls	r3, r3, #22
 8002ba6:	0d9a      	lsrs	r2, r3, #22
 8002ba8:	4691      	mov	r9, r2
          if (count != 0U)
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d128      	bne.n	8002c00 <PCD_EP_ISR_Handler+0x308>
        ep->xfer_count += count;
 8002bae:	4649      	mov	r1, r9
 8002bb0:	00aa      	lsls	r2, r5, #2
 8002bb2:	1952      	adds	r2, r2, r5
 8002bb4:	00d2      	lsls	r2, r2, #3
 8002bb6:	18a2      	adds	r2, r4, r2
 8002bb8:	0010      	movs	r0, r2
 8002bba:	3085      	adds	r0, #133	; 0x85
 8002bbc:	30ff      	adds	r0, #255	; 0xff
 8002bbe:	6803      	ldr	r3, [r0, #0]
 8002bc0:	444b      	add	r3, r9
 8002bc2:	6003      	str	r3, [r0, #0]
        ep->xfer_buff += count;
 8002bc4:	3808      	subs	r0, #8
 8002bc6:	6803      	ldr	r3, [r0, #0]
 8002bc8:	444b      	add	r3, r9
 8002bca:	6003      	str	r3, [r0, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bcc:	3281      	adds	r2, #129	; 0x81
 8002bce:	32ff      	adds	r2, #255	; 0xff
 8002bd0:	6813      	ldr	r3, [r2, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <PCD_EP_ISR_Handler+0x2f2>
 8002bd6:	00ab      	lsls	r3, r5, #2
 8002bd8:	195b      	adds	r3, r3, r5
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	18e3      	adds	r3, r4, r3
 8002bde:	3379      	adds	r3, #121	; 0x79
 8002be0:	33ff      	adds	r3, #255	; 0xff
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4299      	cmp	r1, r3
 8002be6:	d300      	bcc.n	8002bea <PCD_EP_ISR_Handler+0x2f2>
 8002be8:	e089      	b.n	8002cfe <PCD_EP_ISR_Handler+0x406>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bea:	00ab      	lsls	r3, r5, #2
 8002bec:	195b      	adds	r3, r3, r5
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	18e3      	adds	r3, r4, r3
 8002bf2:	3369      	adds	r3, #105	; 0x69
 8002bf4:	33ff      	adds	r3, #255	; 0xff
 8002bf6:	7819      	ldrb	r1, [r3, #0]
 8002bf8:	0020      	movs	r0, r4
 8002bfa:	f002 feae 	bl	800595a <HAL_PCD_DataOutStageCallback>
 8002bfe:	e766      	b.n	8002ace <PCD_EP_ISR_Handler+0x1d6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c00:	1973      	adds	r3, r6, r5
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	18e3      	adds	r3, r4, r3
 8002c06:	001a      	movs	r2, r3
 8002c08:	326f      	adds	r2, #111	; 0x6f
 8002c0a:	32ff      	adds	r2, #255	; 0xff
 8002c0c:	8812      	ldrh	r2, [r2, #0]
 8002c0e:	337d      	adds	r3, #125	; 0x7d
 8002c10:	33ff      	adds	r3, #255	; 0xff
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	464b      	mov	r3, r9
 8002c16:	f001 fe1d 	bl	8004854 <USB_ReadPMA>
 8002c1a:	e7c8      	b.n	8002bae <PCD_EP_ISR_Handler+0x2b6>
 8002c1c:	00000f8f 	.word	0x00000f8f
 8002c20:	00000406 	.word	0x00000406
 8002c24:	ffff8000 	.word	0xffff8000
 8002c28:	ffffbf8f 	.word	0xffffbf8f
 8002c2c:	ffff8080 	.word	0xffff8080
 8002c30:	ffff8f0f 	.word	0xffff8f0f
 8002c34:	00000402 	.word	0x00000402
          if (ep->type == EP_TYPE_BULK)
 8002c38:	00ab      	lsls	r3, r5, #2
 8002c3a:	195b      	adds	r3, r3, r5
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	18e3      	adds	r3, r4, r3
 8002c40:	336c      	adds	r3, #108	; 0x6c
 8002c42:	33ff      	adds	r3, #255	; 0xff
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d034      	beq.n	8002cb4 <PCD_EP_ISR_Handler+0x3bc>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c4a:	6821      	ldr	r1, [r4, #0]
 8002c4c:	00ab      	lsls	r3, r5, #2
 8002c4e:	195b      	adds	r3, r3, r5
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	18e3      	adds	r3, r4, r3
 8002c54:	3369      	adds	r3, #105	; 0x69
 8002c56:	33ff      	adds	r3, #255	; 0xff
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	1889      	adds	r1, r1, r2
 8002c5e:	8808      	ldrh	r0, [r1, #0]
 8002c60:	4a72      	ldr	r2, [pc, #456]	; (8002e2c <PCD_EP_ISR_Handler+0x534>)
 8002c62:	4010      	ands	r0, r2
 8002c64:	4a72      	ldr	r2, [pc, #456]	; (8002e30 <PCD_EP_ISR_Handler+0x538>)
 8002c66:	4302      	orrs	r2, r0
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	800a      	strh	r2, [r1, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009a      	lsls	r2, r3, #2
 8002c72:	1882      	adds	r2, r0, r2
 8002c74:	8812      	ldrh	r2, [r2, #0]
 8002c76:	0452      	lsls	r2, r2, #17
 8002c78:	d523      	bpl.n	8002cc2 <PCD_EP_ISR_Handler+0x3ca>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c7a:	2250      	movs	r2, #80	; 0x50
 8002c7c:	5a82      	ldrh	r2, [r0, r2]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	18d3      	adds	r3, r2, r3
 8002c82:	181b      	adds	r3, r3, r0
 8002c84:	4a6b      	ldr	r2, [pc, #428]	; (8002e34 <PCD_EP_ISR_Handler+0x53c>)
 8002c86:	4694      	mov	ip, r2
 8002c88:	4463      	add	r3, ip
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	059b      	lsls	r3, r3, #22
 8002c8e:	0d9a      	lsrs	r2, r3, #22
 8002c90:	4691      	mov	r9, r2
              if (count != 0U)
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d08b      	beq.n	8002bae <PCD_EP_ISR_Handler+0x2b6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c96:	00ab      	lsls	r3, r5, #2
 8002c98:	195b      	adds	r3, r3, r5
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	18e3      	adds	r3, r4, r3
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	3271      	adds	r2, #113	; 0x71
 8002ca2:	32ff      	adds	r2, #255	; 0xff
 8002ca4:	8812      	ldrh	r2, [r2, #0]
 8002ca6:	337d      	adds	r3, #125	; 0x7d
 8002ca8:	33ff      	adds	r3, #255	; 0xff
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	464b      	mov	r3, r9
 8002cae:	f001 fdd1 	bl	8004854 <USB_ReadPMA>
 8002cb2:	e77c      	b.n	8002bae <PCD_EP_ISR_Handler+0x2b6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002cb4:	003a      	movs	r2, r7
 8002cb6:	4641      	mov	r1, r8
 8002cb8:	0020      	movs	r0, r4
 8002cba:	f7ff fb21 	bl	8002300 <HAL_PCD_EP_DB_Receive>
 8002cbe:	4681      	mov	r9, r0
 8002cc0:	e775      	b.n	8002bae <PCD_EP_ISR_Handler+0x2b6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cc2:	2250      	movs	r2, #80	; 0x50
 8002cc4:	5a82      	ldrh	r2, [r0, r2]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	18d3      	adds	r3, r2, r3
 8002cca:	181b      	adds	r3, r3, r0
 8002ccc:	4a5a      	ldr	r2, [pc, #360]	; (8002e38 <PCD_EP_ISR_Handler+0x540>)
 8002cce:	4694      	mov	ip, r2
 8002cd0:	4463      	add	r3, ip
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	059b      	lsls	r3, r3, #22
 8002cd6:	0d9a      	lsrs	r2, r3, #22
 8002cd8:	4691      	mov	r9, r2
              if (count != 0U)
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d100      	bne.n	8002ce0 <PCD_EP_ISR_Handler+0x3e8>
 8002cde:	e766      	b.n	8002bae <PCD_EP_ISR_Handler+0x2b6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ce0:	00ab      	lsls	r3, r5, #2
 8002ce2:	195b      	adds	r3, r3, r5
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	18e3      	adds	r3, r4, r3
 8002ce8:	001a      	movs	r2, r3
 8002cea:	3273      	adds	r2, #115	; 0x73
 8002cec:	32ff      	adds	r2, #255	; 0xff
 8002cee:	8812      	ldrh	r2, [r2, #0]
 8002cf0:	337d      	adds	r3, #125	; 0x7d
 8002cf2:	33ff      	adds	r3, #255	; 0xff
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	f001 fdac 	bl	8004854 <USB_ReadPMA>
 8002cfc:	e757      	b.n	8002bae <PCD_EP_ISR_Handler+0x2b6>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cfe:	6820      	ldr	r0, [r4, #0]
 8002d00:	4641      	mov	r1, r8
 8002d02:	f001 fa11 	bl	8004128 <USB_EPStartXfer>
 8002d06:	e6e2      	b.n	8002ace <PCD_EP_ISR_Handler+0x1d6>
          ep->xfer_len = 0U;
 8002d08:	00ab      	lsls	r3, r5, #2
 8002d0a:	195b      	adds	r3, r3, r5
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	18e3      	adds	r3, r4, r3
 8002d10:	2200      	movs	r2, #0
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8002d14:	3334      	adds	r3, #52	; 0x34
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <PCD_EP_ISR_Handler+0x45c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d1c:	067f      	lsls	r7, r7, #25
 8002d1e:	d535      	bpl.n	8002d8c <PCD_EP_ISR_Handler+0x494>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d20:	784b      	ldrb	r3, [r1, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11f      	bne.n	8002d66 <PCD_EP_ISR_Handler+0x46e>
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	2250      	movs	r2, #80	; 0x50
 8002d2a:	5a9a      	ldrh	r2, [r3, r2]
 8002d2c:	189a      	adds	r2, r3, r2
 8002d2e:	4661      	mov	r1, ip
 8002d30:	008b      	lsls	r3, r1, #2
 8002d32:	185b      	adds	r3, r3, r1
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	5d1b      	ldrb	r3, [r3, r4]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	189b      	adds	r3, r3, r2
 8002d3c:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <PCD_EP_ISR_Handler+0x53c>)
 8002d3e:	4694      	mov	ip, r2
 8002d40:	4463      	add	r3, ip
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	0592      	lsls	r2, r2, #22
 8002d46:	0d92      	lsrs	r2, r2, #22
 8002d48:	801a      	strh	r2, [r3, #0]
 8002d4a:	881a      	ldrh	r2, [r3, #0]
 8002d4c:	493b      	ldr	r1, [pc, #236]	; (8002e3c <PCD_EP_ISR_Handler+0x544>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	b292      	uxth	r2, r2
 8002d52:	801a      	strh	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d54:	1c6b      	adds	r3, r5, #1
 8002d56:	009d      	lsls	r5, r3, #2
 8002d58:	18ed      	adds	r5, r5, r3
 8002d5a:	00ed      	lsls	r5, r5, #3
 8002d5c:	5d29      	ldrb	r1, [r5, r4]
 8002d5e:	0020      	movs	r0, r4
 8002d60:	f002 fe0a 	bl	8005978 <HAL_PCD_DataInStageCallback>
 8002d64:	e5cd      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d1f4      	bne.n	8002d54 <PCD_EP_ISR_Handler+0x45c>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	2250      	movs	r2, #80	; 0x50
 8002d6e:	5a9a      	ldrh	r2, [r3, r2]
 8002d70:	189a      	adds	r2, r3, r2
 8002d72:	1c69      	adds	r1, r5, #1
 8002d74:	008b      	lsls	r3, r1, #2
 8002d76:	185b      	adds	r3, r3, r1
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	5d1b      	ldrb	r3, [r3, r4]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	189b      	adds	r3, r3, r2
 8002d80:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <PCD_EP_ISR_Handler+0x53c>)
 8002d82:	4694      	mov	ip, r2
 8002d84:	4463      	add	r3, ip
 8002d86:	2200      	movs	r2, #0
 8002d88:	801a      	strh	r2, [r3, #0]
 8002d8a:	e7e3      	b.n	8002d54 <PCD_EP_ISR_Handler+0x45c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d8c:	6822      	ldr	r2, [r4, #0]
 8002d8e:	1c69      	adds	r1, r5, #1
 8002d90:	008b      	lsls	r3, r1, #2
 8002d92:	185b      	adds	r3, r3, r1
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	785b      	ldrb	r3, [r3, #1]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d115      	bne.n	8002dca <PCD_EP_ISR_Handler+0x4d2>
 8002d9e:	3350      	adds	r3, #80	; 0x50
 8002da0:	5ad3      	ldrh	r3, [r2, r3]
 8002da2:	18d2      	adds	r2, r2, r3
 8002da4:	008b      	lsls	r3, r1, #2
 8002da6:	185b      	adds	r3, r3, r1
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	5d1b      	ldrb	r3, [r3, r4]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <PCD_EP_ISR_Handler+0x540>)
 8002db2:	4694      	mov	ip, r2
 8002db4:	4463      	add	r3, ip
 8002db6:	881a      	ldrh	r2, [r3, #0]
 8002db8:	0592      	lsls	r2, r2, #22
 8002dba:	0d92      	lsrs	r2, r2, #22
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	881a      	ldrh	r2, [r3, #0]
 8002dc0:	491e      	ldr	r1, [pc, #120]	; (8002e3c <PCD_EP_ISR_Handler+0x544>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	e7c4      	b.n	8002d54 <PCD_EP_ISR_Handler+0x45c>
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d1c2      	bne.n	8002d54 <PCD_EP_ISR_Handler+0x45c>
 8002dce:	334f      	adds	r3, #79	; 0x4f
 8002dd0:	5ad3      	ldrh	r3, [r2, r3]
 8002dd2:	18d2      	adds	r2, r2, r3
 8002dd4:	1c69      	adds	r1, r5, #1
 8002dd6:	008b      	lsls	r3, r1, #2
 8002dd8:	185b      	adds	r3, r3, r1
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	5d1b      	ldrb	r3, [r3, r4]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <PCD_EP_ISR_Handler+0x540>)
 8002de4:	4694      	mov	ip, r2
 8002de6:	4463      	add	r3, ip
 8002de8:	2200      	movs	r2, #0
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	e7b2      	b.n	8002d54 <PCD_EP_ISR_Handler+0x45c>
              ep->xfer_len = 0U;
 8002dee:	00ab      	lsls	r3, r5, #2
 8002df0:	195b      	adds	r3, r3, r5
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	18e3      	adds	r3, r4, r3
 8002df6:	2700      	movs	r7, #0
 8002df8:	641f      	str	r7, [r3, #64]	; 0x40
 8002dfa:	e6a1      	b.n	8002b40 <PCD_EP_ISR_Handler+0x248>
              ep->xfer_buff += TxPctSize;
 8002dfc:	00ab      	lsls	r3, r5, #2
 8002dfe:	195e      	adds	r6, r3, r5
 8002e00:	00f6      	lsls	r6, r6, #3
 8002e02:	19a6      	adds	r6, r4, r6
 8002e04:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
 8002e06:	18bf      	adds	r7, r7, r2
 8002e08:	63f7      	str	r7, [r6, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8002e0a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002e0c:	189b      	adds	r3, r3, r2
 8002e0e:	6473      	str	r3, [r6, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e10:	f001 f98a 	bl	8004128 <USB_EPStartXfer>
 8002e14:	e575      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e16:	003a      	movs	r2, r7
 8002e18:	0020      	movs	r0, r4
 8002e1a:	f7ff fb81 	bl	8002520 <HAL_PCD_EP_DB_Transmit>
 8002e1e:	e570      	b.n	8002902 <PCD_EP_ISR_Handler+0xa>
}
 8002e20:	2000      	movs	r0, #0
 8002e22:	bcc0      	pop	{r6, r7}
 8002e24:	46b9      	mov	r9, r7
 8002e26:	46b0      	mov	r8, r6
 8002e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	ffff8f8f 	.word	0xffff8f8f
 8002e30:	ffff80c0 	.word	0xffff80c0
 8002e34:	00000402 	.word	0x00000402
 8002e38:	00000406 	.word	0x00000406
 8002e3c:	ffff8000 	.word	0xffff8000

08002e40 <HAL_PCD_SetAddress>:
{
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8002e44:	23aa      	movs	r3, #170	; 0xaa
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	5cc3      	ldrb	r3, [r0, r3]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d00c      	beq.n	8002e68 <HAL_PCD_SetAddress+0x28>
 8002e4e:	25aa      	movs	r5, #170	; 0xaa
 8002e50:	00ad      	lsls	r5, r5, #2
 8002e52:	2301      	movs	r3, #1
 8002e54:	5543      	strb	r3, [r0, r5]
  hpcd->USB_Address = address;
 8002e56:	3323      	adds	r3, #35	; 0x23
 8002e58:	54c1      	strb	r1, [r0, r3]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e5a:	6800      	ldr	r0, [r0, #0]
 8002e5c:	f001 f93a 	bl	80040d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e60:	2300      	movs	r3, #0
 8002e62:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002e64:	2000      	movs	r0, #0
}
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8002e68:	2002      	movs	r0, #2
 8002e6a:	e7fc      	b.n	8002e66 <HAL_PCD_SetAddress+0x26>

08002e6c <HAL_PCD_IRQHandler>:
{
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	0004      	movs	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e70:	6800      	ldr	r0, [r0, #0]
 8002e72:	f001 f941 	bl	80040f8 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e76:	0403      	lsls	r3, r0, #16
 8002e78:	d418      	bmi.n	8002eac <HAL_PCD_IRQHandler+0x40>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e7a:	0543      	lsls	r3, r0, #21
 8002e7c:	d41a      	bmi.n	8002eb4 <HAL_PCD_IRQHandler+0x48>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e7e:	0443      	lsls	r3, r0, #17
 8002e80:	d426      	bmi.n	8002ed0 <HAL_PCD_IRQHandler+0x64>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e82:	0483      	lsls	r3, r0, #18
 8002e84:	d42b      	bmi.n	8002ede <HAL_PCD_IRQHandler+0x72>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e86:	04c3      	lsls	r3, r0, #19
 8002e88:	d430      	bmi.n	8002eec <HAL_PCD_IRQHandler+0x80>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e8a:	0503      	lsls	r3, r0, #20
 8002e8c:	d451      	bmi.n	8002f32 <HAL_PCD_IRQHandler+0xc6>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002e8e:	0603      	lsls	r3, r0, #24
 8002e90:	d500      	bpl.n	8002e94 <HAL_PCD_IRQHandler+0x28>
 8002e92:	e065      	b.n	8002f60 <HAL_PCD_IRQHandler+0xf4>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e94:	0583      	lsls	r3, r0, #22
 8002e96:	d500      	bpl.n	8002e9a <HAL_PCD_IRQHandler+0x2e>
 8002e98:	e090      	b.n	8002fbc <HAL_PCD_IRQHandler+0x150>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e9a:	05c0      	lsls	r0, r0, #23
 8002e9c:	d51e      	bpl.n	8002edc <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e9e:	6821      	ldr	r1, [r4, #0]
 8002ea0:	2244      	movs	r2, #68	; 0x44
 8002ea2:	5a8b      	ldrh	r3, [r1, r2]
 8002ea4:	484a      	ldr	r0, [pc, #296]	; (8002fd0 <HAL_PCD_IRQHandler+0x164>)
 8002ea6:	4003      	ands	r3, r0
 8002ea8:	528b      	strh	r3, [r1, r2]
    return;
 8002eaa:	e017      	b.n	8002edc <HAL_PCD_IRQHandler+0x70>
    (void)PCD_EP_ISR_Handler(hpcd);
 8002eac:	0020      	movs	r0, r4
 8002eae:	f7ff fd23 	bl	80028f8 <PCD_EP_ISR_Handler>
    return;
 8002eb2:	e013      	b.n	8002edc <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002eb4:	6821      	ldr	r1, [r4, #0]
 8002eb6:	2244      	movs	r2, #68	; 0x44
 8002eb8:	5a8b      	ldrh	r3, [r1, r2]
 8002eba:	4846      	ldr	r0, [pc, #280]	; (8002fd4 <HAL_PCD_IRQHandler+0x168>)
 8002ebc:	4003      	ands	r3, r0
 8002ebe:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResetCallback(hpcd);
 8002ec0:	0020      	movs	r0, r4
 8002ec2:	f002 fd6d 	bl	80059a0 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	0020      	movs	r0, r4
 8002eca:	f7ff ffb9 	bl	8002e40 <HAL_PCD_SetAddress>
    return;
 8002ece:	e005      	b.n	8002edc <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ed0:	6821      	ldr	r1, [r4, #0]
 8002ed2:	2244      	movs	r2, #68	; 0x44
 8002ed4:	5a8b      	ldrh	r3, [r1, r2]
 8002ed6:	4840      	ldr	r0, [pc, #256]	; (8002fd8 <HAL_PCD_IRQHandler+0x16c>)
 8002ed8:	4003      	ands	r3, r0
 8002eda:	528b      	strh	r3, [r1, r2]
}
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ede:	6821      	ldr	r1, [r4, #0]
 8002ee0:	2244      	movs	r2, #68	; 0x44
 8002ee2:	5a8b      	ldrh	r3, [r1, r2]
 8002ee4:	483d      	ldr	r0, [pc, #244]	; (8002fdc <HAL_PCD_IRQHandler+0x170>)
 8002ee6:	4003      	ands	r3, r0
 8002ee8:	528b      	strh	r3, [r1, r2]
    return;
 8002eea:	e7f7      	b.n	8002edc <HAL_PCD_IRQHandler+0x70>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002eec:	6821      	ldr	r1, [r4, #0]
 8002eee:	2340      	movs	r3, #64	; 0x40
 8002ef0:	5aca      	ldrh	r2, [r1, r3]
 8002ef2:	2004      	movs	r0, #4
 8002ef4:	4382      	bics	r2, r0
 8002ef6:	52ca      	strh	r2, [r1, r3]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ef8:	6821      	ldr	r1, [r4, #0]
 8002efa:	5aca      	ldrh	r2, [r1, r3]
 8002efc:	3004      	adds	r0, #4
 8002efe:	4382      	bics	r2, r0
 8002f00:	52ca      	strh	r2, [r1, r3]
    if (hpcd->LPM_State == LPM_L1)
 8002f02:	23b8      	movs	r3, #184	; 0xb8
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	5ce3      	ldrb	r3, [r4, r3]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d009      	beq.n	8002f20 <HAL_PCD_IRQHandler+0xb4>
    HAL_PCD_ResumeCallback(hpcd);
 8002f0c:	0020      	movs	r0, r4
 8002f0e:	f002 fd6b 	bl	80059e8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f12:	6821      	ldr	r1, [r4, #0]
 8002f14:	2244      	movs	r2, #68	; 0x44
 8002f16:	5a8b      	ldrh	r3, [r1, r2]
 8002f18:	4831      	ldr	r0, [pc, #196]	; (8002fe0 <HAL_PCD_IRQHandler+0x174>)
 8002f1a:	4003      	ands	r3, r0
 8002f1c:	528b      	strh	r3, [r1, r2]
    return;
 8002f1e:	e7dd      	b.n	8002edc <HAL_PCD_IRQHandler+0x70>
      hpcd->LPM_State = LPM_L0;
 8002f20:	23b8      	movs	r3, #184	; 0xb8
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	2200      	movs	r2, #0
 8002f26:	54e2      	strb	r2, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f28:	2100      	movs	r1, #0
 8002f2a:	0020      	movs	r0, r4
 8002f2c:	f000 f9c9 	bl	80032c2 <HAL_PCDEx_LPM_Callback>
 8002f30:	e7ec      	b.n	8002f0c <HAL_PCD_IRQHandler+0xa0>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f32:	6821      	ldr	r1, [r4, #0]
 8002f34:	2240      	movs	r2, #64	; 0x40
 8002f36:	5a8b      	ldrh	r3, [r1, r2]
 8002f38:	2008      	movs	r0, #8
 8002f3a:	4303      	orrs	r3, r0
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	528b      	strh	r3, [r1, r2]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	2144      	movs	r1, #68	; 0x44
 8002f44:	5a43      	ldrh	r3, [r0, r1]
 8002f46:	4d27      	ldr	r5, [pc, #156]	; (8002fe4 <HAL_PCD_IRQHandler+0x178>)
 8002f48:	402b      	ands	r3, r5
 8002f4a:	5243      	strh	r3, [r0, r1]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f4c:	6821      	ldr	r1, [r4, #0]
 8002f4e:	5a8b      	ldrh	r3, [r1, r2]
 8002f50:	2004      	movs	r0, #4
 8002f52:	4303      	orrs	r3, r0
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	528b      	strh	r3, [r1, r2]
    HAL_PCD_SuspendCallback(hpcd);
 8002f58:	0020      	movs	r0, r4
 8002f5a:	f002 fd33 	bl	80059c4 <HAL_PCD_SuspendCallback>
    return;
 8002f5e:	e7bd      	b.n	8002edc <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002f60:	6821      	ldr	r1, [r4, #0]
 8002f62:	2244      	movs	r2, #68	; 0x44
 8002f64:	5a8b      	ldrh	r3, [r1, r2]
 8002f66:	2080      	movs	r0, #128	; 0x80
 8002f68:	4383      	bics	r3, r0
 8002f6a:	528b      	strh	r3, [r1, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002f6c:	23b8      	movs	r3, #184	; 0xb8
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	5ce3      	ldrb	r3, [r4, r3]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d11e      	bne.n	8002fb4 <HAL_PCD_IRQHandler+0x148>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f76:	6821      	ldr	r1, [r4, #0]
 8002f78:	3a04      	subs	r2, #4
 8002f7a:	5a8b      	ldrh	r3, [r1, r2]
 8002f7c:	2004      	movs	r0, #4
 8002f7e:	4303      	orrs	r3, r0
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	528b      	strh	r3, [r1, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f84:	6821      	ldr	r1, [r4, #0]
 8002f86:	5a8b      	ldrh	r3, [r1, r2]
 8002f88:	2008      	movs	r0, #8
 8002f8a:	4303      	orrs	r3, r0
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	528b      	strh	r3, [r1, r2]
      hpcd->LPM_State = LPM_L1;
 8002f90:	23b8      	movs	r3, #184	; 0xb8
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	3a3f      	subs	r2, #63	; 0x3f
 8002f96:	54e2      	strb	r2, [r4, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	2354      	movs	r3, #84	; 0x54
 8002f9c:	5ad2      	ldrh	r2, [r2, r3]
 8002f9e:	0892      	lsrs	r2, r2, #2
 8002fa0:	3b18      	subs	r3, #24
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	22b9      	movs	r2, #185	; 0xb9
 8002fa6:	0092      	lsls	r2, r2, #2
 8002fa8:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002faa:	2101      	movs	r1, #1
 8002fac:	0020      	movs	r0, r4
 8002fae:	f000 f988 	bl	80032c2 <HAL_PCDEx_LPM_Callback>
 8002fb2:	e793      	b.n	8002edc <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 8002fb4:	0020      	movs	r0, r4
 8002fb6:	f002 fd05 	bl	80059c4 <HAL_PCD_SuspendCallback>
    return;
 8002fba:	e78f      	b.n	8002edc <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fbc:	6821      	ldr	r1, [r4, #0]
 8002fbe:	2244      	movs	r2, #68	; 0x44
 8002fc0:	5a8b      	ldrh	r3, [r1, r2]
 8002fc2:	4809      	ldr	r0, [pc, #36]	; (8002fe8 <HAL_PCD_IRQHandler+0x17c>)
 8002fc4:	4003      	ands	r3, r0
 8002fc6:	528b      	strh	r3, [r1, r2]
    HAL_PCD_SOFCallback(hpcd);
 8002fc8:	0020      	movs	r0, r4
 8002fca:	f002 fce2 	bl	8005992 <HAL_PCD_SOFCallback>
    return;
 8002fce:	e785      	b.n	8002edc <HAL_PCD_IRQHandler+0x70>
 8002fd0:	fffffeff 	.word	0xfffffeff
 8002fd4:	fffffbff 	.word	0xfffffbff
 8002fd8:	ffffbfff 	.word	0xffffbfff
 8002fdc:	ffffdfff 	.word	0xffffdfff
 8002fe0:	ffffefff 	.word	0xffffefff
 8002fe4:	fffff7ff 	.word	0xfffff7ff
 8002fe8:	fffffdff 	.word	0xfffffdff

08002fec <HAL_PCD_EP_Open>:
{
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	0004      	movs	r4, r0
 8002ff0:	000d      	movs	r5, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002ff2:	b249      	sxtb	r1, r1
 8002ff4:	2900      	cmp	r1, #0
 8002ff6:	db25      	blt.n	8003044 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	2607      	movs	r6, #7
 8002ffa:	402e      	ands	r6, r5
 8002ffc:	00b0      	lsls	r0, r6, #2
 8002ffe:	1981      	adds	r1, r0, r6
 8003000:	00c9      	lsls	r1, r1, #3
 8003002:	3169      	adds	r1, #105	; 0x69
 8003004:	31ff      	adds	r1, #255	; 0xff
 8003006:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003008:	1980      	adds	r0, r0, r6
 800300a:	00c0      	lsls	r0, r0, #3
 800300c:	1820      	adds	r0, r4, r0
 800300e:	306a      	adds	r0, #106	; 0x6a
 8003010:	30ff      	adds	r0, #255	; 0xff
 8003012:	2600      	movs	r6, #0
 8003014:	7006      	strb	r6, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003016:	2007      	movs	r0, #7
 8003018:	4028      	ands	r0, r5
 800301a:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 800301c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800301e:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8003020:	2b02      	cmp	r3, #2
 8003022:	d019      	beq.n	8003058 <HAL_PCD_EP_Open+0x6c>
  __HAL_LOCK(hpcd);
 8003024:	23aa      	movs	r3, #170	; 0xaa
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	5ce3      	ldrb	r3, [r4, r3]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d017      	beq.n	800305e <HAL_PCD_EP_Open+0x72>
 800302e:	25aa      	movs	r5, #170	; 0xaa
 8003030:	00ad      	lsls	r5, r5, #2
 8003032:	2301      	movs	r3, #1
 8003034:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	f000 fd8c 	bl	8003b54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800303c:	2300      	movs	r3, #0
 800303e:	5563      	strb	r3, [r4, r5]
  return ret;
 8003040:	2000      	movs	r0, #0
}
 8003042:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003044:	2607      	movs	r6, #7
 8003046:	402e      	ands	r6, r5
 8003048:	3601      	adds	r6, #1
 800304a:	00b0      	lsls	r0, r6, #2
 800304c:	1981      	adds	r1, r0, r6
 800304e:	00c9      	lsls	r1, r1, #3
 8003050:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003052:	2601      	movs	r6, #1
 8003054:	704e      	strb	r6, [r1, #1]
 8003056:	e7de      	b.n	8003016 <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	710b      	strb	r3, [r1, #4]
 800305c:	e7e2      	b.n	8003024 <HAL_PCD_EP_Open+0x38>
  __HAL_LOCK(hpcd);
 800305e:	2002      	movs	r0, #2
 8003060:	e7ef      	b.n	8003042 <HAL_PCD_EP_Open+0x56>

08003062 <HAL_PCD_EP_Close>:
{
 8003062:	b570      	push	{r4, r5, r6, lr}
 8003064:	0004      	movs	r4, r0
 8003066:	000a      	movs	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003068:	b24b      	sxtb	r3, r1
 800306a:	2b00      	cmp	r3, #0
 800306c:	db21      	blt.n	80030b2 <HAL_PCD_EP_Close+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800306e:	2007      	movs	r0, #7
 8003070:	4008      	ands	r0, r1
 8003072:	0083      	lsls	r3, r0, #2
 8003074:	1819      	adds	r1, r3, r0
 8003076:	00c9      	lsls	r1, r1, #3
 8003078:	3169      	adds	r1, #105	; 0x69
 800307a:	31ff      	adds	r1, #255	; 0xff
 800307c:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 800307e:	181b      	adds	r3, r3, r0
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	18e3      	adds	r3, r4, r3
 8003084:	336a      	adds	r3, #106	; 0x6a
 8003086:	33ff      	adds	r3, #255	; 0xff
 8003088:	2000      	movs	r0, #0
 800308a:	7018      	strb	r0, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800308c:	2307      	movs	r3, #7
 800308e:	4013      	ands	r3, r2
 8003090:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003092:	23aa      	movs	r3, #170	; 0xaa
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	5ce3      	ldrb	r3, [r4, r3]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d014      	beq.n	80030c6 <HAL_PCD_EP_Close+0x64>
 800309c:	25aa      	movs	r5, #170	; 0xaa
 800309e:	00ad      	lsls	r5, r5, #2
 80030a0:	2301      	movs	r3, #1
 80030a2:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030a4:	6820      	ldr	r0, [r4, #0]
 80030a6:	f000 fee9 	bl	8003e7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030aa:	2300      	movs	r3, #0
 80030ac:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80030ae:	2000      	movs	r0, #0
}
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b2:	2007      	movs	r0, #7
 80030b4:	4008      	ands	r0, r1
 80030b6:	3001      	adds	r0, #1
 80030b8:	0083      	lsls	r3, r0, #2
 80030ba:	1819      	adds	r1, r3, r0
 80030bc:	00c9      	lsls	r1, r1, #3
 80030be:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80030c0:	2001      	movs	r0, #1
 80030c2:	7048      	strb	r0, [r1, #1]
 80030c4:	e7e2      	b.n	800308c <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80030c6:	2002      	movs	r0, #2
 80030c8:	e7f2      	b.n	80030b0 <HAL_PCD_EP_Close+0x4e>

080030ca <HAL_PCD_EP_Receive>:
{
 80030ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030cc:	2607      	movs	r6, #7
 80030ce:	400e      	ands	r6, r1
 80030d0:	00b4      	lsls	r4, r6, #2
 80030d2:	19a1      	adds	r1, r4, r6
 80030d4:	00c9      	lsls	r1, r1, #3
 80030d6:	3169      	adds	r1, #105	; 0x69
 80030d8:	31ff      	adds	r1, #255	; 0xff
 80030da:	1841      	adds	r1, r0, r1
  ep->xfer_buff = pBuf;
 80030dc:	19a5      	adds	r5, r4, r6
 80030de:	00ed      	lsls	r5, r5, #3
 80030e0:	1945      	adds	r5, r0, r5
 80030e2:	002f      	movs	r7, r5
 80030e4:	377d      	adds	r7, #125	; 0x7d
 80030e6:	37ff      	adds	r7, #255	; 0xff
 80030e8:	603a      	str	r2, [r7, #0]
  ep->xfer_len = len;
 80030ea:	002a      	movs	r2, r5
 80030ec:	3281      	adds	r2, #129	; 0x81
 80030ee:	32ff      	adds	r2, #255	; 0xff
 80030f0:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 80030f2:	3204      	adds	r2, #4
 80030f4:	2300      	movs	r3, #0
 80030f6:	6013      	str	r3, [r2, #0]
  ep->is_in = 0U;
 80030f8:	356a      	adds	r5, #106	; 0x6a
 80030fa:	35ff      	adds	r5, #255	; 0xff
 80030fc:	702b      	strb	r3, [r5, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fe:	19a4      	adds	r4, r4, r6
 8003100:	00e4      	lsls	r4, r4, #3
 8003102:	1904      	adds	r4, r0, r4
 8003104:	3469      	adds	r4, #105	; 0x69
 8003106:	34ff      	adds	r4, #255	; 0xff
 8003108:	7026      	strb	r6, [r4, #0]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800310a:	6800      	ldr	r0, [r0, #0]
 800310c:	f001 f80c 	bl	8004128 <USB_EPStartXfer>
}
 8003110:	2000      	movs	r0, #0
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003114 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003114:	2307      	movs	r3, #7
 8003116:	400b      	ands	r3, r1
 8003118:	0099      	lsls	r1, r3, #2
 800311a:	18c9      	adds	r1, r1, r3
 800311c:	00c9      	lsls	r1, r1, #3
 800311e:	1840      	adds	r0, r0, r1
 8003120:	3085      	adds	r0, #133	; 0x85
 8003122:	30ff      	adds	r0, #255	; 0xff
 8003124:	6800      	ldr	r0, [r0, #0]
}
 8003126:	4770      	bx	lr

08003128 <HAL_PCD_EP_Transmit>:
{
 8003128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312a:	46c6      	mov	lr, r8
 800312c:	b500      	push	{lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312e:	2607      	movs	r6, #7
 8003130:	400e      	ands	r6, r1
 8003132:	1c77      	adds	r7, r6, #1
 8003134:	00bd      	lsls	r5, r7, #2
 8003136:	19e9      	adds	r1, r5, r7
 8003138:	00c9      	lsls	r1, r1, #3
 800313a:	4688      	mov	r8, r1
 800313c:	4480      	add	r8, r0
  ep->xfer_buff = pBuf;
 800313e:	00b4      	lsls	r4, r6, #2
 8003140:	19a4      	adds	r4, r4, r6
 8003142:	00e4      	lsls	r4, r4, #3
 8003144:	1904      	adds	r4, r0, r4
 8003146:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8003148:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800314a:	224c      	movs	r2, #76	; 0x4c
 800314c:	4694      	mov	ip, r2
 800314e:	44a4      	add	ip, r4
 8003150:	3a4b      	subs	r2, #75	; 0x4b
 8003152:	4661      	mov	r1, ip
 8003154:	700a      	strb	r2, [r1, #0]
  ep->xfer_len_db = len;
 8003156:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	6463      	str	r3, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800315c:	4643      	mov	r3, r8
 800315e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003160:	19ed      	adds	r5, r5, r7
 8003162:	00ed      	lsls	r5, r5, #3
 8003164:	542e      	strb	r6, [r5, r0]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	4641      	mov	r1, r8
 800316a:	f000 ffdd 	bl	8004128 <USB_EPStartXfer>
}
 800316e:	2000      	movs	r0, #0
 8003170:	bc80      	pop	{r7}
 8003172:	46b8      	mov	r8, r7
 8003174:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003176 <HAL_PCD_EP_SetStall>:
{
 8003176:	b570      	push	{r4, r5, r6, lr}
 8003178:	0004      	movs	r4, r0
 800317a:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800317c:	2207      	movs	r2, #7
 800317e:	400a      	ands	r2, r1
 8003180:	6841      	ldr	r1, [r0, #4]
 8003182:	428a      	cmp	r2, r1
 8003184:	d82a      	bhi.n	80031dc <HAL_PCD_EP_SetStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8003186:	b259      	sxtb	r1, r3
 8003188:	2900      	cmp	r1, #0
 800318a:	db1f      	blt.n	80031cc <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800318c:	0098      	lsls	r0, r3, #2
 800318e:	18c1      	adds	r1, r0, r3
 8003190:	00c9      	lsls	r1, r1, #3
 8003192:	3169      	adds	r1, #105	; 0x69
 8003194:	31ff      	adds	r1, #255	; 0xff
 8003196:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003198:	18c0      	adds	r0, r0, r3
 800319a:	00c0      	lsls	r0, r0, #3
 800319c:	1820      	adds	r0, r4, r0
 800319e:	306a      	adds	r0, #106	; 0x6a
 80031a0:	30ff      	adds	r0, #255	; 0xff
 80031a2:	2300      	movs	r3, #0
 80031a4:	7003      	strb	r3, [r0, #0]
  ep->is_stall = 1U;
 80031a6:	2301      	movs	r3, #1
 80031a8:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031aa:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80031ac:	23aa      	movs	r3, #170	; 0xaa
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	5ce3      	ldrb	r3, [r4, r3]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d014      	beq.n	80031e0 <HAL_PCD_EP_SetStall+0x6a>
 80031b6:	25aa      	movs	r5, #170	; 0xaa
 80031b8:	00ad      	lsls	r5, r5, #2
 80031ba:	2301      	movs	r3, #1
 80031bc:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	f000 ff14 	bl	8003fec <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80031c4:	2300      	movs	r3, #0
 80031c6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80031c8:	2000      	movs	r0, #0
}
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031cc:	1c50      	adds	r0, r2, #1
 80031ce:	0083      	lsls	r3, r0, #2
 80031d0:	1819      	adds	r1, r3, r0
 80031d2:	00c9      	lsls	r1, r1, #3
 80031d4:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80031d6:	2001      	movs	r0, #1
 80031d8:	7048      	strb	r0, [r1, #1]
 80031da:	e7e4      	b.n	80031a6 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 80031dc:	2001      	movs	r0, #1
 80031de:	e7f4      	b.n	80031ca <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80031e0:	2002      	movs	r0, #2
 80031e2:	e7f2      	b.n	80031ca <HAL_PCD_EP_SetStall+0x54>

080031e4 <HAL_PCD_EP_ClrStall>:
{
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	0004      	movs	r4, r0
 80031e8:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ea:	220f      	movs	r2, #15
 80031ec:	400a      	ands	r2, r1
 80031ee:	6841      	ldr	r1, [r0, #4]
 80031f0:	428a      	cmp	r2, r1
 80031f2:	d830      	bhi.n	8003256 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 80031f4:	b25a      	sxtb	r2, r3
 80031f6:	2a00      	cmp	r2, #0
 80031f8:	db23      	blt.n	8003242 <HAL_PCD_EP_ClrStall+0x5e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fa:	2007      	movs	r0, #7
 80031fc:	4018      	ands	r0, r3
 80031fe:	0082      	lsls	r2, r0, #2
 8003200:	1811      	adds	r1, r2, r0
 8003202:	00c9      	lsls	r1, r1, #3
 8003204:	3169      	adds	r1, #105	; 0x69
 8003206:	31ff      	adds	r1, #255	; 0xff
 8003208:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 800320a:	1812      	adds	r2, r2, r0
 800320c:	00d2      	lsls	r2, r2, #3
 800320e:	18a2      	adds	r2, r4, r2
 8003210:	326a      	adds	r2, #106	; 0x6a
 8003212:	32ff      	adds	r2, #255	; 0xff
 8003214:	2000      	movs	r0, #0
 8003216:	7010      	strb	r0, [r2, #0]
  ep->is_stall = 0U;
 8003218:	2200      	movs	r2, #0
 800321a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321c:	3207      	adds	r2, #7
 800321e:	4013      	ands	r3, r2
 8003220:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003222:	23aa      	movs	r3, #170	; 0xaa
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	5ce3      	ldrb	r3, [r4, r3]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d016      	beq.n	800325a <HAL_PCD_EP_ClrStall+0x76>
 800322c:	25aa      	movs	r5, #170	; 0xaa
 800322e:	00ad      	lsls	r5, r5, #2
 8003230:	2301      	movs	r3, #1
 8003232:	5563      	strb	r3, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	f000 feff 	bl	8004038 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800323a:	2300      	movs	r3, #0
 800323c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800323e:	2000      	movs	r0, #0
}
 8003240:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003242:	2007      	movs	r0, #7
 8003244:	4018      	ands	r0, r3
 8003246:	3001      	adds	r0, #1
 8003248:	0082      	lsls	r2, r0, #2
 800324a:	1811      	adds	r1, r2, r0
 800324c:	00c9      	lsls	r1, r1, #3
 800324e:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003250:	2001      	movs	r0, #1
 8003252:	7048      	strb	r0, [r1, #1]
 8003254:	e7e0      	b.n	8003218 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8003256:	2001      	movs	r0, #1
 8003258:	e7f2      	b.n	8003240 <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 800325a:	2002      	movs	r0, #2
 800325c:	e7f0      	b.n	8003240 <HAL_PCD_EP_ClrStall+0x5c>

0800325e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800325e:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003260:	060c      	lsls	r4, r1, #24
 8003262:	d50c      	bpl.n	800327e <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003264:	2407      	movs	r4, #7
 8003266:	4021      	ands	r1, r4
 8003268:	3101      	adds	r1, #1
 800326a:	008c      	lsls	r4, r1, #2
 800326c:	1861      	adds	r1, r4, r1
 800326e:	00c9      	lsls	r1, r1, #3
 8003270:	1840      	adds	r0, r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003272:	2a00      	cmp	r2, #0
 8003274:	d10a      	bne.n	800328c <HAL_PCDEx_PMAConfig+0x2e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003276:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003278:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800327a:	2000      	movs	r0, #0
 800327c:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800327e:	008c      	lsls	r4, r1, #2
 8003280:	1861      	adds	r1, r4, r1
 8003282:	00c9      	lsls	r1, r1, #3
 8003284:	3169      	adds	r1, #105	; 0x69
 8003286:	31ff      	adds	r1, #255	; 0xff
 8003288:	1840      	adds	r0, r0, r1
 800328a:	e7f2      	b.n	8003272 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 800328c:	2201      	movs	r2, #1
 800328e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003290:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	8143      	strh	r3, [r0, #10]
 8003296:	e7f0      	b.n	800327a <HAL_PCDEx_PMAConfig+0x1c>

08003298 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8003298:	6801      	ldr	r1, [r0, #0]
  hpcd->lpm_active = 1U;
 800329a:	23ba      	movs	r3, #186	; 0xba
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	2201      	movs	r2, #1
 80032a0:	50c2      	str	r2, [r0, r3]
  hpcd->LPM_State = LPM_L0;
 80032a2:	3b08      	subs	r3, #8
 80032a4:	2200      	movs	r2, #0
 80032a6:	54c2      	strb	r2, [r0, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032a8:	3254      	adds	r2, #84	; 0x54
 80032aa:	5a8b      	ldrh	r3, [r1, r2]
 80032ac:	2001      	movs	r0, #1
 80032ae:	4303      	orrs	r3, r0
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	528b      	strh	r3, [r1, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032b4:	5a8b      	ldrh	r3, [r1, r2]
 80032b6:	2002      	movs	r0, #2
 80032b8:	4303      	orrs	r3, r0
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	528b      	strh	r3, [r1, r2]

  return HAL_OK;
}
 80032be:	2000      	movs	r0, #0
 80032c0:	4770      	bx	lr

080032c2 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032c2:	4770      	bx	lr

080032c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c4:	b570      	push	{r4, r5, r6, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ca:	d100      	bne.n	80032ce <HAL_RCC_OscConfig+0xa>
 80032cc:	e27f      	b.n	80037ce <HAL_RCC_OscConfig+0x50a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	6803      	ldr	r3, [r0, #0]
 80032d0:	07db      	lsls	r3, r3, #31
 80032d2:	d52b      	bpl.n	800332c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032d4:	4bb3      	ldr	r3, [pc, #716]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	230c      	movs	r3, #12
 80032da:	4013      	ands	r3, r2
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d01d      	beq.n	800331c <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032e0:	4bb0      	ldr	r3, [pc, #704]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	230c      	movs	r3, #12
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d00e      	beq.n	800330a <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d041      	beq.n	8003376 <HAL_RCC_OscConfig+0xb2>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d156      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe0>
 80032f6:	4bab      	ldr	r3, [pc, #684]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	49ab      	ldr	r1, [pc, #684]	; (80035a8 <HAL_RCC_OscConfig+0x2e4>)
 80032fc:	400a      	ands	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	49aa      	ldr	r1, [pc, #680]	; (80035ac <HAL_RCC_OscConfig+0x2e8>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e03b      	b.n	8003382 <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800330a:	4ba6      	ldr	r3, [pc, #664]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	22c0      	movs	r2, #192	; 0xc0
 8003310:	0252      	lsls	r2, r2, #9
 8003312:	4013      	ands	r3, r2
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	0252      	lsls	r2, r2, #9
 8003318:	4293      	cmp	r3, r2
 800331a:	d1e7      	bne.n	80032ec <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	4ba1      	ldr	r3, [pc, #644]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	039b      	lsls	r3, r3, #14
 8003322:	d503      	bpl.n	800332c <HAL_RCC_OscConfig+0x68>
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d100      	bne.n	800332c <HAL_RCC_OscConfig+0x68>
 800332a:	e253      	b.n	80037d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	079b      	lsls	r3, r3, #30
 8003330:	d577      	bpl.n	8003422 <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003332:	4b9c      	ldr	r3, [pc, #624]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	220c      	movs	r2, #12
 8003338:	421a      	tst	r2, r3
 800333a:	d062      	beq.n	8003402 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800333c:	4b99      	ldr	r3, [pc, #612]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	230c      	movs	r3, #12
 8003342:	4013      	ands	r3, r2
 8003344:	2b08      	cmp	r3, #8
 8003346:	d053      	beq.n	80033f0 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003348:	68e3      	ldr	r3, [r4, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d100      	bne.n	8003350 <HAL_RCC_OscConfig+0x8c>
 800334e:	e08a      	b.n	8003466 <HAL_RCC_OscConfig+0x1a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4a94      	ldr	r2, [pc, #592]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003352:	6813      	ldr	r3, [r2, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	430b      	orrs	r3, r1
 8003358:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe fb0f 	bl	800197c <HAL_GetTick>
 800335e:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	4b90      	ldr	r3, [pc, #576]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	079b      	lsls	r3, r3, #30
 8003366:	d475      	bmi.n	8003454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003368:	f7fe fb08 	bl	800197c <HAL_GetTick>
 800336c:	1b40      	subs	r0, r0, r5
 800336e:	2802      	cmp	r0, #2
 8003370:	d9f6      	bls.n	8003360 <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 8003372:	2003      	movs	r0, #3
 8003374:	e22c      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	4a8b      	ldr	r2, [pc, #556]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003378:	6811      	ldr	r1, [r2, #0]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	025b      	lsls	r3, r3, #9
 800337e:	430b      	orrs	r3, r1
 8003380:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003382:	6863      	ldr	r3, [r4, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d025      	beq.n	80033d4 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8003388:	f7fe faf8 	bl	800197c <HAL_GetTick>
 800338c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b85      	ldr	r3, [pc, #532]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	039b      	lsls	r3, r3, #14
 8003394:	d4ca      	bmi.n	800332c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003396:	f7fe faf1 	bl	800197c <HAL_GetTick>
 800339a:	1b40      	subs	r0, r0, r5
 800339c:	2864      	cmp	r0, #100	; 0x64
 800339e:	d9f6      	bls.n	800338e <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80033a0:	2003      	movs	r0, #3
 80033a2:	e215      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d009      	beq.n	80033bc <HAL_RCC_OscConfig+0xf8>
 80033a8:	4b7e      	ldr	r3, [pc, #504]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	497e      	ldr	r1, [pc, #504]	; (80035a8 <HAL_RCC_OscConfig+0x2e4>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	497d      	ldr	r1, [pc, #500]	; (80035ac <HAL_RCC_OscConfig+0x2e8>)
 80033b6:	400a      	ands	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e7e2      	b.n	8003382 <HAL_RCC_OscConfig+0xbe>
 80033bc:	4b79      	ldr	r3, [pc, #484]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	2280      	movs	r2, #128	; 0x80
 80033c2:	02d2      	lsls	r2, r2, #11
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	2280      	movs	r2, #128	; 0x80
 80033cc:	0252      	lsls	r2, r2, #9
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e7d6      	b.n	8003382 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 80033d4:	f7fe fad2 	bl	800197c <HAL_GetTick>
 80033d8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	4b72      	ldr	r3, [pc, #456]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	039b      	lsls	r3, r3, #14
 80033e0:	d5a4      	bpl.n	800332c <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e2:	f7fe facb 	bl	800197c <HAL_GetTick>
 80033e6:	1b40      	subs	r0, r0, r5
 80033e8:	2864      	cmp	r0, #100	; 0x64
 80033ea:	d9f6      	bls.n	80033da <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80033ec:	2003      	movs	r0, #3
 80033ee:	e1ef      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033f0:	4b6c      	ldr	r3, [pc, #432]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	22c0      	movs	r2, #192	; 0xc0
 80033f6:	0252      	lsls	r2, r2, #9
 80033f8:	4013      	ands	r3, r2
 80033fa:	2280      	movs	r2, #128	; 0x80
 80033fc:	0212      	lsls	r2, r2, #8
 80033fe:	4293      	cmp	r3, r2
 8003400:	d1a2      	bne.n	8003348 <HAL_RCC_OscConfig+0x84>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	079b      	lsls	r3, r3, #30
 8003408:	d503      	bpl.n	8003412 <HAL_RCC_OscConfig+0x14e>
 800340a:	68e3      	ldr	r3, [r4, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d000      	beq.n	8003412 <HAL_RCC_OscConfig+0x14e>
 8003410:	e1e2      	b.n	80037d8 <HAL_RCC_OscConfig+0x514>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4964      	ldr	r1, [pc, #400]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003414:	680b      	ldr	r3, [r1, #0]
 8003416:	22f8      	movs	r2, #248	; 0xf8
 8003418:	4393      	bics	r3, r2
 800341a:	6922      	ldr	r2, [r4, #16]
 800341c:	00d2      	lsls	r2, r2, #3
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	071b      	lsls	r3, r3, #28
 8003426:	d544      	bpl.n	80034b2 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003428:	69e3      	ldr	r3, [r4, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02e      	beq.n	800348c <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342e:	4a5d      	ldr	r2, [pc, #372]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003430:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003432:	2101      	movs	r1, #1
 8003434:	430b      	orrs	r3, r1
 8003436:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fe faa0 	bl	800197c <HAL_GetTick>
 800343c:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	079b      	lsls	r3, r3, #30
 8003444:	d435      	bmi.n	80034b2 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe fa99 	bl	800197c <HAL_GetTick>
 800344a:	1b40      	subs	r0, r0, r5
 800344c:	2802      	cmp	r0, #2
 800344e:	d9f6      	bls.n	800343e <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8003450:	2003      	movs	r0, #3
 8003452:	e1bd      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	4953      	ldr	r1, [pc, #332]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003456:	680b      	ldr	r3, [r1, #0]
 8003458:	22f8      	movs	r2, #248	; 0xf8
 800345a:	4393      	bics	r3, r2
 800345c:	6922      	ldr	r2, [r4, #16]
 800345e:	00d2      	lsls	r2, r2, #3
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]
 8003464:	e7dd      	b.n	8003422 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8003466:	4a4f      	ldr	r2, [pc, #316]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003468:	6813      	ldr	r3, [r2, #0]
 800346a:	2101      	movs	r1, #1
 800346c:	438b      	bics	r3, r1
 800346e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003470:	f7fe fa84 	bl	800197c <HAL_GetTick>
 8003474:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	079b      	lsls	r3, r3, #30
 800347c:	d5d1      	bpl.n	8003422 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347e:	f7fe fa7d 	bl	800197c <HAL_GetTick>
 8003482:	1b40      	subs	r0, r0, r5
 8003484:	2802      	cmp	r0, #2
 8003486:	d9f6      	bls.n	8003476 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8003488:	2003      	movs	r0, #3
 800348a:	e1a1      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348c:	4a45      	ldr	r2, [pc, #276]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 800348e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003490:	2101      	movs	r1, #1
 8003492:	438b      	bics	r3, r1
 8003494:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003496:	f7fe fa71 	bl	800197c <HAL_GetTick>
 800349a:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	079b      	lsls	r3, r3, #30
 80034a2:	d506      	bpl.n	80034b2 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a4:	f7fe fa6a 	bl	800197c <HAL_GetTick>
 80034a8:	1b40      	subs	r0, r0, r5
 80034aa:	2802      	cmp	r0, #2
 80034ac:	d9f6      	bls.n	800349c <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80034ae:	2003      	movs	r0, #3
 80034b0:	e18e      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	075b      	lsls	r3, r3, #29
 80034b6:	d400      	bmi.n	80034ba <HAL_RCC_OscConfig+0x1f6>
 80034b8:	e080      	b.n	80035bc <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b3a      	ldr	r3, [pc, #232]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	d41d      	bmi.n	80034fe <HAL_RCC_OscConfig+0x23a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	2180      	movs	r1, #128	; 0x80
 80034c8:	0549      	lsls	r1, r1, #21
 80034ca:	430a      	orrs	r2, r1
 80034cc:	61da      	str	r2, [r3, #28]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	400b      	ands	r3, r1
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80034d6:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b35      	ldr	r3, [pc, #212]	; (80035b0 <HAL_RCC_OscConfig+0x2ec>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	05db      	lsls	r3, r3, #23
 80034de:	d510      	bpl.n	8003502 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e0:	68a3      	ldr	r3, [r4, #8]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d021      	beq.n	800352a <HAL_RCC_OscConfig+0x266>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d136      	bne.n	8003558 <HAL_RCC_OscConfig+0x294>
 80034ea:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 80034ec:	6a1a      	ldr	r2, [r3, #32]
 80034ee:	2101      	movs	r1, #1
 80034f0:	438a      	bics	r2, r1
 80034f2:	621a      	str	r2, [r3, #32]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	3103      	adds	r1, #3
 80034f8:	438a      	bics	r2, r1
 80034fa:	621a      	str	r2, [r3, #32]
 80034fc:	e01a      	b.n	8003534 <HAL_RCC_OscConfig+0x270>
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2500      	movs	r5, #0
 8003500:	e7ea      	b.n	80034d8 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003502:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <HAL_RCC_OscConfig+0x2ec>)
 8003504:	6811      	ldr	r1, [r2, #0]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	430b      	orrs	r3, r1
 800350c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800350e:	f7fe fa35 	bl	800197c <HAL_GetTick>
 8003512:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <HAL_RCC_OscConfig+0x2ec>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	05db      	lsls	r3, r3, #23
 800351a:	d4e1      	bmi.n	80034e0 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351c:	f7fe fa2e 	bl	800197c <HAL_GetTick>
 8003520:	1b80      	subs	r0, r0, r6
 8003522:	2864      	cmp	r0, #100	; 0x64
 8003524:	d9f6      	bls.n	8003514 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8003526:	2003      	movs	r0, #3
 8003528:	e152      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352a:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 800352c:	6a13      	ldr	r3, [r2, #32]
 800352e:	2101      	movs	r1, #1
 8003530:	430b      	orrs	r3, r1
 8003532:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003534:	68a3      	ldr	r3, [r4, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d024      	beq.n	8003584 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe fa1f 	bl	800197c <HAL_GetTick>
 800353e:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	079b      	lsls	r3, r3, #30
 8003546:	d437      	bmi.n	80035b8 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7fe fa18 	bl	800197c <HAL_GetTick>
 800354c:	1b80      	subs	r0, r0, r6
 800354e:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_RCC_OscConfig+0x2f0>)
 8003550:	4298      	cmp	r0, r3
 8003552:	d9f5      	bls.n	8003540 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003554:	2003      	movs	r0, #3
 8003556:	e13b      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003558:	2b05      	cmp	r3, #5
 800355a:	d009      	beq.n	8003570 <HAL_RCC_OscConfig+0x2ac>
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	2101      	movs	r1, #1
 8003562:	438a      	bics	r2, r1
 8003564:	621a      	str	r2, [r3, #32]
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	3103      	adds	r1, #3
 800356a:	438a      	bics	r2, r1
 800356c:	621a      	str	r2, [r3, #32]
 800356e:	e7e1      	b.n	8003534 <HAL_RCC_OscConfig+0x270>
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	2104      	movs	r1, #4
 8003576:	430a      	orrs	r2, r1
 8003578:	621a      	str	r2, [r3, #32]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	3903      	subs	r1, #3
 800357e:	430a      	orrs	r2, r1
 8003580:	621a      	str	r2, [r3, #32]
 8003582:	e7d7      	b.n	8003534 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7fe f9fa 	bl	800197c <HAL_GetTick>
 8003588:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_OscConfig+0x2e0>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	079b      	lsls	r3, r3, #30
 8003590:	d512      	bpl.n	80035b8 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fe f9f3 	bl	800197c <HAL_GetTick>
 8003596:	1b80      	subs	r0, r0, r6
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_OscConfig+0x2f0>)
 800359a:	4298      	cmp	r0, r3
 800359c:	d9f5      	bls.n	800358a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800359e:	2003      	movs	r0, #3
 80035a0:	e116      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	40021000 	.word	0x40021000
 80035a8:	fffeffff 	.word	0xfffeffff
 80035ac:	fffbffff 	.word	0xfffbffff
 80035b0:	40007000 	.word	0x40007000
 80035b4:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035b8:	2d01      	cmp	r5, #1
 80035ba:	d039      	beq.n	8003630 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	06db      	lsls	r3, r3, #27
 80035c0:	d510      	bpl.n	80035e4 <HAL_RCC_OscConfig+0x320>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80035c2:	6963      	ldr	r3, [r4, #20]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d039      	beq.n	800363c <HAL_RCC_OscConfig+0x378>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80035c8:	3305      	adds	r3, #5
 80035ca:	d157      	bne.n	800367c <HAL_RCC_OscConfig+0x3b8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80035cc:	4a89      	ldr	r2, [pc, #548]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 80035ce:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80035d0:	2104      	movs	r1, #4
 80035d2:	438b      	bics	r3, r1
 80035d4:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80035d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80035d8:	31f4      	adds	r1, #244	; 0xf4
 80035da:	438b      	bics	r3, r1
 80035dc:	69a1      	ldr	r1, [r4, #24]
 80035de:	00c9      	lsls	r1, r1, #3
 80035e0:	430b      	orrs	r3, r1
 80035e2:	6353      	str	r3, [r2, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	069b      	lsls	r3, r3, #26
 80035e8:	d56e      	bpl.n	80036c8 <HAL_RCC_OscConfig+0x404>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035ea:	4b82      	ldr	r3, [pc, #520]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	230c      	movs	r3, #12
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d060      	beq.n	80036b8 <HAL_RCC_OscConfig+0x3f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035f6:	4b7f      	ldr	r3, [pc, #508]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	230c      	movs	r3, #12
 80035fc:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d053      	beq.n	80036aa <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003602:	6a23      	ldr	r3, [r4, #32]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d07e      	beq.n	8003706 <HAL_RCC_OscConfig+0x442>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003608:	4a7a      	ldr	r2, [pc, #488]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 800360a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	025b      	lsls	r3, r3, #9
 8003610:	430b      	orrs	r3, r1
 8003612:	6353      	str	r3, [r2, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe f9b2 	bl	800197c <HAL_GetTick>
 8003618:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800361a:	4b76      	ldr	r3, [pc, #472]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 800361c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361e:	039b      	lsls	r3, r3, #14
 8003620:	d452      	bmi.n	80036c8 <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003622:	f7fe f9ab 	bl	800197c <HAL_GetTick>
 8003626:	1b40      	subs	r0, r0, r5
 8003628:	2802      	cmp	r0, #2
 800362a:	d9f6      	bls.n	800361a <HAL_RCC_OscConfig+0x356>
          {
            return HAL_TIMEOUT;
 800362c:	2003      	movs	r0, #3
 800362e:	e0cf      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4a70      	ldr	r2, [pc, #448]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 8003632:	69d3      	ldr	r3, [r2, #28]
 8003634:	4970      	ldr	r1, [pc, #448]	; (80037f8 <HAL_RCC_OscConfig+0x534>)
 8003636:	400b      	ands	r3, r1
 8003638:	61d3      	str	r3, [r2, #28]
 800363a:	e7bf      	b.n	80035bc <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_DISABLE();
 800363c:	4b6d      	ldr	r3, [pc, #436]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 800363e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003640:	2104      	movs	r1, #4
 8003642:	430a      	orrs	r2, r1
 8003644:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003648:	3903      	subs	r1, #3
 800364a:	430a      	orrs	r2, r1
 800364c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800364e:	f7fe f995 	bl	800197c <HAL_GetTick>
 8003652:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003654:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	079b      	lsls	r3, r3, #30
 800365a:	d406      	bmi.n	800366a <HAL_RCC_OscConfig+0x3a6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800365c:	f7fe f98e 	bl	800197c <HAL_GetTick>
 8003660:	1b40      	subs	r0, r0, r5
 8003662:	2802      	cmp	r0, #2
 8003664:	d9f6      	bls.n	8003654 <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 8003666:	2003      	movs	r0, #3
 8003668:	e0b2      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800366a:	4962      	ldr	r1, [pc, #392]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 800366c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800366e:	22f8      	movs	r2, #248	; 0xf8
 8003670:	4393      	bics	r3, r2
 8003672:	69a2      	ldr	r2, [r4, #24]
 8003674:	00d2      	lsls	r2, r2, #3
 8003676:	4313      	orrs	r3, r2
 8003678:	634b      	str	r3, [r1, #52]	; 0x34
 800367a:	e7b3      	b.n	80035e4 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_HSI14ADC_DISABLE();
 800367c:	4b5d      	ldr	r3, [pc, #372]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 800367e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003680:	2104      	movs	r1, #4
 8003682:	430a      	orrs	r2, r1
 8003684:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003688:	3903      	subs	r1, #3
 800368a:	438a      	bics	r2, r1
 800368c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800368e:	f7fe f975 	bl	800197c <HAL_GetTick>
 8003692:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003694:	4b57      	ldr	r3, [pc, #348]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	079b      	lsls	r3, r3, #30
 800369a:	d5a3      	bpl.n	80035e4 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800369c:	f7fe f96e 	bl	800197c <HAL_GetTick>
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	2802      	cmp	r0, #2
 80036a4:	d9f6      	bls.n	8003694 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 80036a6:	2003      	movs	r0, #3
 80036a8:	e092      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80036aa:	4b52      	ldr	r3, [pc, #328]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	22c0      	movs	r2, #192	; 0xc0
 80036b0:	0252      	lsls	r2, r2, #9
 80036b2:	4013      	ands	r3, r2
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d1a4      	bne.n	8003602 <HAL_RCC_OscConfig+0x33e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80036b8:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 80036ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036bc:	039b      	lsls	r3, r3, #14
 80036be:	d503      	bpl.n	80036c8 <HAL_RCC_OscConfig+0x404>
 80036c0:	6a23      	ldr	r3, [r4, #32]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d000      	beq.n	80036c8 <HAL_RCC_OscConfig+0x404>
 80036c6:	e089      	b.n	80037dc <HAL_RCC_OscConfig+0x518>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d100      	bne.n	80036d0 <HAL_RCC_OscConfig+0x40c>
 80036ce:	e087      	b.n	80037e0 <HAL_RCC_OscConfig+0x51c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d0:	4a48      	ldr	r2, [pc, #288]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 80036d2:	6851      	ldr	r1, [r2, #4]
 80036d4:	220c      	movs	r2, #12
 80036d6:	400a      	ands	r2, r1
 80036d8:	2a08      	cmp	r2, #8
 80036da:	d060      	beq.n	800379e <HAL_RCC_OscConfig+0x4da>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d025      	beq.n	800372c <HAL_RCC_OscConfig+0x468>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e0:	4a44      	ldr	r2, [pc, #272]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	4945      	ldr	r1, [pc, #276]	; (80037fc <HAL_RCC_OscConfig+0x538>)
 80036e6:	400b      	ands	r3, r1
 80036e8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe f947 	bl	800197c <HAL_GetTick>
 80036ee:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f0:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	d550      	bpl.n	800379a <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe f940 	bl	800197c <HAL_GetTick>
 80036fc:	1b00      	subs	r0, r0, r4
 80036fe:	2802      	cmp	r0, #2
 8003700:	d9f6      	bls.n	80036f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003702:	2003      	movs	r0, #3
 8003704:	e064      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI48_DISABLE();
 8003706:	4a3b      	ldr	r2, [pc, #236]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 8003708:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800370a:	493d      	ldr	r1, [pc, #244]	; (8003800 <HAL_RCC_OscConfig+0x53c>)
 800370c:	400b      	ands	r3, r1
 800370e:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8003710:	f7fe f934 	bl	800197c <HAL_GetTick>
 8003714:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	039b      	lsls	r3, r3, #14
 800371c:	d5d4      	bpl.n	80036c8 <HAL_RCC_OscConfig+0x404>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800371e:	f7fe f92d 	bl	800197c <HAL_GetTick>
 8003722:	1b40      	subs	r0, r0, r5
 8003724:	2802      	cmp	r0, #2
 8003726:	d9f6      	bls.n	8003716 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8003728:	2003      	movs	r0, #3
 800372a:	e051      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_DISABLE();
 800372c:	4a31      	ldr	r2, [pc, #196]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	4932      	ldr	r1, [pc, #200]	; (80037fc <HAL_RCC_OscConfig+0x538>)
 8003732:	400b      	ands	r3, r1
 8003734:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003736:	f7fe f921 	bl	800197c <HAL_GetTick>
 800373a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	019b      	lsls	r3, r3, #6
 8003742:	d506      	bpl.n	8003752 <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003744:	f7fe f91a 	bl	800197c <HAL_GetTick>
 8003748:	1b40      	subs	r0, r0, r5
 800374a:	2802      	cmp	r0, #2
 800374c:	d9f6      	bls.n	800373c <HAL_RCC_OscConfig+0x478>
            return HAL_TIMEOUT;
 800374e:	2003      	movs	r0, #3
 8003750:	e03e      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 8003754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003756:	210f      	movs	r1, #15
 8003758:	438a      	bics	r2, r1
 800375a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800375c:	430a      	orrs	r2, r1
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	4928      	ldr	r1, [pc, #160]	; (8003804 <HAL_RCC_OscConfig+0x540>)
 8003764:	400a      	ands	r2, r1
 8003766:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003768:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800376a:	4301      	orrs	r1, r0
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	0452      	lsls	r2, r2, #17
 8003776:	430a      	orrs	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800377a:	f7fe f8ff 	bl	800197c <HAL_GetTick>
 800377e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003780:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	d406      	bmi.n	8003796 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe f8f8 	bl	800197c <HAL_GetTick>
 800378c:	1b00      	subs	r0, r0, r4
 800378e:	2802      	cmp	r0, #2
 8003790:	d9f6      	bls.n	8003780 <HAL_RCC_OscConfig+0x4bc>
            return HAL_TIMEOUT;
 8003792:	2003      	movs	r0, #3
 8003794:	e01c      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }

  return HAL_OK;
 8003796:	2000      	movs	r0, #0
 8003798:	e01a      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
 800379a:	2000      	movs	r0, #0
 800379c:	e018      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d020      	beq.n	80037e4 <HAL_RCC_OscConfig+0x520>
        pll_config  = RCC->CFGR;
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <HAL_RCC_OscConfig+0x530>)
 80037a4:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 80037a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a8:	23c0      	movs	r3, #192	; 0xc0
 80037aa:	025b      	lsls	r3, r3, #9
 80037ac:	4013      	ands	r3, r2
 80037ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80037b0:	428b      	cmp	r3, r1
 80037b2:	d119      	bne.n	80037e8 <HAL_RCC_OscConfig+0x524>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037b4:	230f      	movs	r3, #15
 80037b6:	4003      	ands	r3, r0
 80037b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	428b      	cmp	r3, r1
 80037bc:	d116      	bne.n	80037ec <HAL_RCC_OscConfig+0x528>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80037be:	23f0      	movs	r3, #240	; 0xf0
 80037c0:	039b      	lsls	r3, r3, #14
 80037c2:	401a      	ands	r2, r3
 80037c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d112      	bne.n	80037f0 <HAL_RCC_OscConfig+0x52c>
  return HAL_OK;
 80037ca:	2000      	movs	r0, #0
 80037cc:	e000      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
    return HAL_ERROR;
 80037ce:	2001      	movs	r0, #1
}
 80037d0:	b002      	add	sp, #8
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80037d4:	2001      	movs	r0, #1
 80037d6:	e7fb      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80037d8:	2001      	movs	r0, #1
 80037da:	e7f9      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80037dc:	2001      	movs	r0, #1
 80037de:	e7f7      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
  return HAL_OK;
 80037e0:	2000      	movs	r0, #0
 80037e2:	e7f5      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 80037e4:	2001      	movs	r0, #1
 80037e6:	e7f3      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
          return HAL_ERROR;
 80037e8:	2001      	movs	r0, #1
 80037ea:	e7f1      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
 80037ec:	2001      	movs	r0, #1
 80037ee:	e7ef      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
 80037f0:	2001      	movs	r0, #1
 80037f2:	e7ed      	b.n	80037d0 <HAL_RCC_OscConfig+0x50c>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	efffffff 	.word	0xefffffff
 80037fc:	feffffff 	.word	0xfeffffff
 8003800:	fffeffff 	.word	0xfffeffff
 8003804:	ffc27fff 	.word	0xffc27fff

08003808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003808:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_RCC_GetSysClockFreq+0x64>)
 800380c:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800380e:	230c      	movs	r3, #12
 8003810:	4013      	ands	r3, r2
 8003812:	2b08      	cmp	r3, #8
 8003814:	d003      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x16>
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d125      	bne.n	8003866 <HAL_RCC_GetSysClockFreq+0x5e>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800381a:	4815      	ldr	r0, [pc, #84]	; (8003870 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800381c:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800381e:	0c91      	lsrs	r1, r2, #18
 8003820:	230f      	movs	r3, #15
 8003822:	4019      	ands	r1, r3
 8003824:	4813      	ldr	r0, [pc, #76]	; (8003874 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003826:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003828:	4910      	ldr	r1, [pc, #64]	; (800386c <HAL_RCC_GetSysClockFreq+0x64>)
 800382a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800382c:	400b      	ands	r3, r1
 800382e:	4912      	ldr	r1, [pc, #72]	; (8003878 <HAL_RCC_GetSysClockFreq+0x70>)
 8003830:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003832:	23c0      	movs	r3, #192	; 0xc0
 8003834:	025b      	lsls	r3, r3, #9
 8003836:	401a      	ands	r2, r3
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	025b      	lsls	r3, r3, #9
 800383c:	429a      	cmp	r2, r3
 800383e:	d008      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003840:	23c0      	movs	r3, #192	; 0xc0
 8003842:	025b      	lsls	r3, r3, #9
 8003844:	429a      	cmp	r2, r3
 8003846:	d009      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x54>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003848:	480c      	ldr	r0, [pc, #48]	; (800387c <HAL_RCC_GetSysClockFreq+0x74>)
 800384a:	f7fc fc5d 	bl	8000108 <__udivsi3>
 800384e:	4360      	muls	r0, r4
 8003850:	e7e4      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x14>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003852:	480a      	ldr	r0, [pc, #40]	; (800387c <HAL_RCC_GetSysClockFreq+0x74>)
 8003854:	f7fc fc58 	bl	8000108 <__udivsi3>
 8003858:	4360      	muls	r0, r4
 800385a:	e7df      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x14>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800385c:	4804      	ldr	r0, [pc, #16]	; (8003870 <HAL_RCC_GetSysClockFreq+0x68>)
 800385e:	f7fc fc53 	bl	8000108 <__udivsi3>
 8003862:	4360      	muls	r0, r4
 8003864:	e7da      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x14>
  switch (tmpreg & RCC_CFGR_SWS)
 8003866:	4805      	ldr	r0, [pc, #20]	; (800387c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8003868:	e7d8      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x14>
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	40021000 	.word	0x40021000
 8003870:	02dc6c00 	.word	0x02dc6c00
 8003874:	08005bfc 	.word	0x08005bfc
 8003878:	08005c0c 	.word	0x08005c0c
 800387c:	007a1200 	.word	0x007a1200

08003880 <HAL_RCC_ClockConfig>:
{
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	0004      	movs	r4, r0
 8003884:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003886:	2800      	cmp	r0, #0
 8003888:	d100      	bne.n	800388c <HAL_RCC_ClockConfig+0xc>
 800388a:	e086      	b.n	800399a <HAL_RCC_ClockConfig+0x11a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800388c:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_ClockConfig+0x12c>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	2301      	movs	r3, #1
 8003892:	4013      	ands	r3, r2
 8003894:	428b      	cmp	r3, r1
 8003896:	d20a      	bcs.n	80038ae <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003898:	4944      	ldr	r1, [pc, #272]	; (80039ac <HAL_RCC_ClockConfig+0x12c>)
 800389a:	680b      	ldr	r3, [r1, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	4393      	bics	r3, r2
 80038a0:	432b      	orrs	r3, r5
 80038a2:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a4:	680b      	ldr	r3, [r1, #0]
 80038a6:	401a      	ands	r2, r3
 80038a8:	42aa      	cmp	r2, r5
 80038aa:	d000      	beq.n	80038ae <HAL_RCC_ClockConfig+0x2e>
 80038ac:	e077      	b.n	800399e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	079a      	lsls	r2, r3, #30
 80038b2:	d50e      	bpl.n	80038d2 <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	075b      	lsls	r3, r3, #29
 80038b6:	d505      	bpl.n	80038c4 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80038b8:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 80038ba:	6851      	ldr	r1, [r2, #4]
 80038bc:	23e0      	movs	r3, #224	; 0xe0
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4a3a      	ldr	r2, [pc, #232]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 80038c6:	6853      	ldr	r3, [r2, #4]
 80038c8:	21f0      	movs	r1, #240	; 0xf0
 80038ca:	438b      	bics	r3, r1
 80038cc:	68a1      	ldr	r1, [r4, #8]
 80038ce:	430b      	orrs	r3, r1
 80038d0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	07db      	lsls	r3, r3, #31
 80038d6:	d535      	bpl.n	8003944 <HAL_RCC_ClockConfig+0xc4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d8:	6863      	ldr	r3, [r4, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d009      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x72>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d024      	beq.n	800392c <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d028      	beq.n	8003938 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	4a32      	ldr	r2, [pc, #200]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	0792      	lsls	r2, r2, #30
 80038ec:	d405      	bmi.n	80038fa <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 80038ee:	2001      	movs	r0, #1
 80038f0:	e052      	b.n	8003998 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	0392      	lsls	r2, r2, #14
 80038f8:	d553      	bpl.n	80039a2 <HAL_RCC_ClockConfig+0x122>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	492d      	ldr	r1, [pc, #180]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 80038fc:	684a      	ldr	r2, [r1, #4]
 80038fe:	2003      	movs	r0, #3
 8003900:	4382      	bics	r2, r0
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003906:	f7fe f839 	bl	800197c <HAL_GetTick>
 800390a:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390c:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	220c      	movs	r2, #12
 8003912:	401a      	ands	r2, r3
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d013      	beq.n	8003944 <HAL_RCC_ClockConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391c:	f7fe f82e 	bl	800197c <HAL_GetTick>
 8003920:	1b80      	subs	r0, r0, r6
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_RCC_ClockConfig+0x134>)
 8003924:	4298      	cmp	r0, r3
 8003926:	d9f1      	bls.n	800390c <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8003928:	2003      	movs	r0, #3
 800392a:	e035      	b.n	8003998 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	4a20      	ldr	r2, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	0192      	lsls	r2, r2, #6
 8003932:	d4e2      	bmi.n	80038fa <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8003934:	2001      	movs	r0, #1
 8003936:	e02f      	b.n	8003998 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003938:	4a1d      	ldr	r2, [pc, #116]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 800393a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800393c:	0392      	lsls	r2, r2, #14
 800393e:	d4dc      	bmi.n	80038fa <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8003940:	2001      	movs	r0, #1
 8003942:	e029      	b.n	8003998 <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_ClockConfig+0x12c>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2301      	movs	r3, #1
 800394a:	4013      	ands	r3, r2
 800394c:	42ab      	cmp	r3, r5
 800394e:	d909      	bls.n	8003964 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003950:	4916      	ldr	r1, [pc, #88]	; (80039ac <HAL_RCC_ClockConfig+0x12c>)
 8003952:	680b      	ldr	r3, [r1, #0]
 8003954:	2201      	movs	r2, #1
 8003956:	4393      	bics	r3, r2
 8003958:	432b      	orrs	r3, r5
 800395a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395c:	680b      	ldr	r3, [r1, #0]
 800395e:	401a      	ands	r2, r3
 8003960:	42aa      	cmp	r2, r5
 8003962:	d120      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x126>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	075b      	lsls	r3, r3, #29
 8003968:	d506      	bpl.n	8003978 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800396a:	4a11      	ldr	r2, [pc, #68]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 800396c:	6853      	ldr	r3, [r2, #4]
 800396e:	4912      	ldr	r1, [pc, #72]	; (80039b8 <HAL_RCC_ClockConfig+0x138>)
 8003970:	400b      	ands	r3, r1
 8003972:	68e1      	ldr	r1, [r4, #12]
 8003974:	430b      	orrs	r3, r1
 8003976:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003978:	f7ff ff46 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <HAL_RCC_ClockConfig+0x130>)
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	0912      	lsrs	r2, r2, #4
 8003982:	230f      	movs	r3, #15
 8003984:	4013      	ands	r3, r2
 8003986:	4a0d      	ldr	r2, [pc, #52]	; (80039bc <HAL_RCC_ClockConfig+0x13c>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	40d8      	lsrs	r0, r3
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <HAL_RCC_ClockConfig+0x140>)
 800398e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003990:	2003      	movs	r0, #3
 8003992:	f7fd ffaf 	bl	80018f4 <HAL_InitTick>
  return HAL_OK;
 8003996:	2000      	movs	r0, #0
}
 8003998:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800399a:	2001      	movs	r0, #1
 800399c:	e7fc      	b.n	8003998 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 800399e:	2001      	movs	r0, #1
 80039a0:	e7fa      	b.n	8003998 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 80039a2:	2001      	movs	r0, #1
 80039a4:	e7f8      	b.n	8003998 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 80039a6:	2001      	movs	r0, #1
 80039a8:	e7f6      	b.n	8003998 <HAL_RCC_ClockConfig+0x118>
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	40022000 	.word	0x40022000
 80039b0:	40021000 	.word	0x40021000
 80039b4:	00001388 	.word	0x00001388
 80039b8:	fffff8ff 	.word	0xfffff8ff
 80039bc:	08005bec 	.word	0x08005bec
 80039c0:	20000000 	.word	0x20000000

080039c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ca:	6803      	ldr	r3, [r0, #0]
 80039cc:	03db      	lsls	r3, r3, #15
 80039ce:	d539      	bpl.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d0:	4b48      	ldr	r3, [pc, #288]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	d45f      	bmi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039d8:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	0549      	lsls	r1, r1, #21
 80039e0:	430a      	orrs	r2, r1
 80039e2:	61da      	str	r2, [r3, #28]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	400b      	ands	r3, r1
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80039ec:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	05db      	lsls	r3, r3, #23
 80039f4:	d552      	bpl.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039f6:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	23c0      	movs	r3, #192	; 0xc0
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	0011      	movs	r1, r2
 8003a00:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a02:	421a      	tst	r2, r3
 8003a04:	d015      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	22c0      	movs	r2, #192	; 0xc0
 8003a0a:	0092      	lsls	r2, r2, #2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	428b      	cmp	r3, r1
 8003a10:	d00f      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a12:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a14:	6a1a      	ldr	r2, [r3, #32]
 8003a16:	4939      	ldr	r1, [pc, #228]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003a18:	4011      	ands	r1, r2
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a1a:	6a1e      	ldr	r6, [r3, #32]
 8003a1c:	2080      	movs	r0, #128	; 0x80
 8003a1e:	0240      	lsls	r0, r0, #9
 8003a20:	4330      	orrs	r0, r6
 8003a22:	6218      	str	r0, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a24:	6a18      	ldr	r0, [r3, #32]
 8003a26:	4e36      	ldr	r6, [pc, #216]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a28:	4030      	ands	r0, r6
 8003a2a:	6218      	str	r0, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a2c:	6219      	str	r1, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a2e:	07d2      	lsls	r2, r2, #31
 8003a30:	d448      	bmi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a32:	4a30      	ldr	r2, [pc, #192]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a34:	6a13      	ldr	r3, [r2, #32]
 8003a36:	4931      	ldr	r1, [pc, #196]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003a38:	400b      	ands	r3, r1
 8003a3a:	6861      	ldr	r1, [r4, #4]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a40:	2d01      	cmp	r5, #1
 8003a42:	d04e      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	07db      	lsls	r3, r3, #31
 8003a48:	d506      	bpl.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a4a:	4a2a      	ldr	r2, [pc, #168]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a4e:	2103      	movs	r1, #3
 8003a50:	438b      	bics	r3, r1
 8003a52:	68a1      	ldr	r1, [r4, #8]
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	069b      	lsls	r3, r3, #26
 8003a5c:	d506      	bpl.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a5e:	4a25      	ldr	r2, [pc, #148]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a62:	2110      	movs	r1, #16
 8003a64:	438b      	bics	r3, r1
 8003a66:	68e1      	ldr	r1, [r4, #12]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	039b      	lsls	r3, r3, #14
 8003a70:	d506      	bpl.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a72:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	438b      	bics	r3, r1
 8003a7a:	6961      	ldr	r1, [r4, #20]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	055b      	lsls	r3, r3, #21
 8003a84:	d532      	bpl.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a86:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a8a:	2140      	movs	r1, #64	; 0x40
 8003a8c:	438b      	bics	r3, r1
 8003a8e:	6921      	ldr	r1, [r4, #16]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003a94:	2000      	movs	r0, #0
 8003a96:	e02a      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
    FlagStatus       pwrclkchanged = RESET;
 8003a98:	2500      	movs	r5, #0
 8003a9a:	e7a8      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9c:	4a16      	ldr	r2, [pc, #88]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a9e:	6811      	ldr	r1, [r2, #0]
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003aa8:	f7fd ff68 	bl	800197c <HAL_GetTick>
 8003aac:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	05db      	lsls	r3, r3, #23
 8003ab4:	d49f      	bmi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab6:	f7fd ff61 	bl	800197c <HAL_GetTick>
 8003aba:	1b80      	subs	r0, r0, r6
 8003abc:	2864      	cmp	r0, #100	; 0x64
 8003abe:	d9f6      	bls.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xea>
          return HAL_TIMEOUT;
 8003ac0:	2003      	movs	r0, #3
 8003ac2:	e014      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
        tickstart = HAL_GetTick();
 8003ac4:	f7fd ff5a 	bl	800197c <HAL_GetTick>
 8003ac8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	079b      	lsls	r3, r3, #30
 8003ad0:	d4af      	bmi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fd ff53 	bl	800197c <HAL_GetTick>
 8003ad6:	1b80      	subs	r0, r0, r6
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003ada:	4298      	cmp	r0, r3
 8003adc:	d9f5      	bls.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>
            return HAL_TIMEOUT;
 8003ade:	2003      	movs	r0, #3
 8003ae0:	e005      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae2:	69d3      	ldr	r3, [r2, #28]
 8003ae4:	4908      	ldr	r1, [pc, #32]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	61d3      	str	r3, [r2, #28]
 8003aea:	e7ab      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x80>
  return HAL_OK;
 8003aec:	2000      	movs	r0, #0
}
 8003aee:	b002      	add	sp, #8
 8003af0:	bd70      	pop	{r4, r5, r6, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40007000 	.word	0x40007000
 8003afc:	fffffcff 	.word	0xfffffcff
 8003b00:	fffeffff 	.word	0xfffeffff
 8003b04:	00001388 	.word	0x00001388
 8003b08:	efffffff 	.word	0xefffffff

08003b0c <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b0c:	2344      	movs	r3, #68	; 0x44
 8003b0e:	2200      	movs	r2, #0
 8003b10:	52c2      	strh	r2, [r0, r3]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b12:	3b04      	subs	r3, #4
 8003b14:	4a01      	ldr	r2, [pc, #4]	; (8003b1c <USB_EnableGlobalInt+0x10>)
 8003b16:	52c2      	strh	r2, [r0, r3]

  return HAL_OK;
}
 8003b18:	2000      	movs	r0, #0
 8003b1a:	4770      	bx	lr
 8003b1c:	ffffbf80 	.word	0xffffbf80

08003b20 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b20:	2240      	movs	r2, #64	; 0x40
 8003b22:	5a83      	ldrh	r3, [r0, r2]
 8003b24:	4902      	ldr	r1, [pc, #8]	; (8003b30 <USB_DisableGlobalInt+0x10>)
 8003b26:	400b      	ands	r3, r1
 8003b28:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	4770      	bx	lr
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	0000407f 	.word	0x0000407f

08003b34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b34:	b084      	sub	sp, #16
 8003b36:	9101      	str	r1, [sp, #4]
 8003b38:	9202      	str	r2, [sp, #8]
 8003b3a:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b3c:	2240      	movs	r2, #64	; 0x40
 8003b3e:	2301      	movs	r3, #1
 8003b40:	5283      	strh	r3, [r0, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	5283      	strh	r3, [r0, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b46:	3204      	adds	r2, #4
 8003b48:	5283      	strh	r3, [r0, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b4a:	320c      	adds	r2, #12
 8003b4c:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 8003b4e:	2000      	movs	r0, #0
 8003b50:	b004      	add	sp, #16
 8003b52:	4770      	bx	lr

08003b54 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b56:	0003      	movs	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b58:	780d      	ldrb	r5, [r1, #0]
 8003b5a:	00ad      	lsls	r5, r5, #2
 8003b5c:	1945      	adds	r5, r0, r5
 8003b5e:	882a      	ldrh	r2, [r5, #0]
 8003b60:	48ba      	ldr	r0, [pc, #744]	; (8003e4c <USB_ActivateEndpoint+0x2f8>)
 8003b62:	4002      	ands	r2, r0

  /* initialize Endpoint */
  switch (ep->type)
 8003b64:	78c8      	ldrb	r0, [r1, #3]
 8003b66:	2802      	cmp	r0, #2
 8003b68:	d059      	beq.n	8003c1e <USB_ActivateEndpoint+0xca>
 8003b6a:	d80a      	bhi.n	8003b82 <USB_ActivateEndpoint+0x2e>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d052      	beq.n	8003c16 <USB_ActivateEndpoint+0xc2>
 8003b70:	2801      	cmp	r0, #1
 8003b72:	d104      	bne.n	8003b7e <USB_ActivateEndpoint+0x2a>
    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
      break;

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b74:	2080      	movs	r0, #128	; 0x80
 8003b76:	00c0      	lsls	r0, r0, #3
 8003b78:	4302      	orrs	r2, r0
  HAL_StatusTypeDef ret = HAL_OK;
 8003b7a:	2000      	movs	r0, #0
      break;
 8003b7c:	e009      	b.n	8003b92 <USB_ActivateEndpoint+0x3e>

    default:
      ret = HAL_ERROR;
 8003b7e:	2001      	movs	r0, #1
 8003b80:	e007      	b.n	8003b92 <USB_ActivateEndpoint+0x3e>
  switch (ep->type)
 8003b82:	2803      	cmp	r0, #3
 8003b84:	d104      	bne.n	8003b90 <USB_ActivateEndpoint+0x3c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003b86:	20c0      	movs	r0, #192	; 0xc0
 8003b88:	00c0      	lsls	r0, r0, #3
 8003b8a:	4302      	orrs	r2, r0
  HAL_StatusTypeDef ret = HAL_OK;
 8003b8c:	2000      	movs	r0, #0
      break;
 8003b8e:	e000      	b.n	8003b92 <USB_ActivateEndpoint+0x3e>
      ret = HAL_ERROR;
 8003b90:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003b92:	4caf      	ldr	r4, [pc, #700]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003b94:	4322      	orrs	r2, r4
 8003b96:	b292      	uxth	r2, r2
 8003b98:	802a      	strh	r2, [r5, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b9a:	780a      	ldrb	r2, [r1, #0]
 8003b9c:	0096      	lsls	r6, r2, #2
 8003b9e:	199e      	adds	r6, r3, r6
 8003ba0:	8835      	ldrh	r5, [r6, #0]
 8003ba2:	b22d      	sxth	r5, r5
 8003ba4:	4fab      	ldr	r7, [pc, #684]	; (8003e54 <USB_ActivateEndpoint+0x300>)
 8003ba6:	403d      	ands	r5, r7
 8003ba8:	432a      	orrs	r2, r5
 8003baa:	b292      	uxth	r2, r2
 8003bac:	4314      	orrs	r4, r2
 8003bae:	b2a4      	uxth	r4, r4
 8003bb0:	8034      	strh	r4, [r6, #0]

  if (ep->doublebuffer == 0U)
 8003bb2:	7b0a      	ldrb	r2, [r1, #12]
 8003bb4:	2a00      	cmp	r2, #0
 8003bb6:	d000      	beq.n	8003bba <USB_ActivateEndpoint+0x66>
 8003bb8:	e0a2      	b.n	8003d00 <USB_ActivateEndpoint+0x1ac>
  {
    if (ep->is_in != 0U)
 8003bba:	784a      	ldrb	r2, [r1, #1]
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	d03b      	beq.n	8003c38 <USB_ActivateEndpoint+0xe4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003bc0:	2250      	movs	r2, #80	; 0x50
 8003bc2:	5a9c      	ldrh	r4, [r3, r2]
 8003bc4:	191c      	adds	r4, r3, r4
 8003bc6:	780a      	ldrb	r2, [r1, #0]
 8003bc8:	00d2      	lsls	r2, r2, #3
 8003bca:	1912      	adds	r2, r2, r4
 8003bcc:	2480      	movs	r4, #128	; 0x80
 8003bce:	00e4      	lsls	r4, r4, #3
 8003bd0:	46a4      	mov	ip, r4
 8003bd2:	4462      	add	r2, ip
 8003bd4:	88cc      	ldrh	r4, [r1, #6]
 8003bd6:	0864      	lsrs	r4, r4, #1
 8003bd8:	0064      	lsls	r4, r4, #1
 8003bda:	8014      	strh	r4, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bdc:	780a      	ldrb	r2, [r1, #0]
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	189a      	adds	r2, r3, r2
 8003be2:	8814      	ldrh	r4, [r2, #0]
 8003be4:	0664      	lsls	r4, r4, #25
 8003be6:	d505      	bpl.n	8003bf4 <USB_ActivateEndpoint+0xa0>
 8003be8:	8815      	ldrh	r5, [r2, #0]
 8003bea:	403d      	ands	r5, r7
 8003bec:	4c9a      	ldr	r4, [pc, #616]	; (8003e58 <USB_ActivateEndpoint+0x304>)
 8003bee:	432c      	orrs	r4, r5
 8003bf0:	b2a4      	uxth	r4, r4
 8003bf2:	8014      	strh	r4, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bf4:	78ca      	ldrb	r2, [r1, #3]
 8003bf6:	2a01      	cmp	r2, #1
 8003bf8:	d013      	beq.n	8003c22 <USB_ActivateEndpoint+0xce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bfa:	780a      	ldrb	r2, [r1, #0]
 8003bfc:	0092      	lsls	r2, r2, #2
 8003bfe:	189a      	adds	r2, r3, r2
 8003c00:	8813      	ldrh	r3, [r2, #0]
 8003c02:	4996      	ldr	r1, [pc, #600]	; (8003e5c <USB_ActivateEndpoint+0x308>)
 8003c04:	400b      	ands	r3, r1
 8003c06:	2120      	movs	r1, #32
 8003c08:	404b      	eors	r3, r1
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	4990      	ldr	r1, [pc, #576]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	8013      	strh	r3, [r2, #0]
 8003c14:	e0ce      	b.n	8003db4 <USB_ActivateEndpoint+0x260>
      wEpRegVal |= USB_EP_CONTROL;
 8003c16:	2480      	movs	r4, #128	; 0x80
 8003c18:	00a4      	lsls	r4, r4, #2
 8003c1a:	4322      	orrs	r2, r4
      break;
 8003c1c:	e7b9      	b.n	8003b92 <USB_ActivateEndpoint+0x3e>
  switch (ep->type)
 8003c1e:	2000      	movs	r0, #0
 8003c20:	e7b7      	b.n	8003b92 <USB_ActivateEndpoint+0x3e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c22:	780a      	ldrb	r2, [r1, #0]
 8003c24:	0092      	lsls	r2, r2, #2
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	8819      	ldrh	r1, [r3, #0]
 8003c2a:	4a8c      	ldr	r2, [pc, #560]	; (8003e5c <USB_ActivateEndpoint+0x308>)
 8003c2c:	4011      	ands	r1, r2
 8003c2e:	4a88      	ldr	r2, [pc, #544]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003c30:	430a      	orrs	r2, r1
 8003c32:	b292      	uxth	r2, r2
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e0bd      	b.n	8003db4 <USB_ActivateEndpoint+0x260>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c38:	2550      	movs	r5, #80	; 0x50
 8003c3a:	5b5c      	ldrh	r4, [r3, r5]
 8003c3c:	191c      	adds	r4, r3, r4
 8003c3e:	780a      	ldrb	r2, [r1, #0]
 8003c40:	00d2      	lsls	r2, r2, #3
 8003c42:	1912      	adds	r2, r2, r4
 8003c44:	4c86      	ldr	r4, [pc, #536]	; (8003e60 <USB_ActivateEndpoint+0x30c>)
 8003c46:	46a4      	mov	ip, r4
 8003c48:	4462      	add	r2, ip
 8003c4a:	88cc      	ldrh	r4, [r1, #6]
 8003c4c:	0864      	lsrs	r4, r4, #1
 8003c4e:	0064      	lsls	r4, r4, #1
 8003c50:	8014      	strh	r4, [r2, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c52:	5b5c      	ldrh	r4, [r3, r5]
 8003c54:	191c      	adds	r4, r3, r4
 8003c56:	780a      	ldrb	r2, [r1, #0]
 8003c58:	00d2      	lsls	r2, r2, #3
 8003c5a:	1912      	adds	r2, r2, r4
 8003c5c:	4c81      	ldr	r4, [pc, #516]	; (8003e64 <USB_ActivateEndpoint+0x310>)
 8003c5e:	46a4      	mov	ip, r4
 8003c60:	4462      	add	r2, ip
 8003c62:	8814      	ldrh	r4, [r2, #0]
 8003c64:	05a4      	lsls	r4, r4, #22
 8003c66:	0da4      	lsrs	r4, r4, #22
 8003c68:	8014      	strh	r4, [r2, #0]
 8003c6a:	690c      	ldr	r4, [r1, #16]
 8003c6c:	2c3e      	cmp	r4, #62	; 0x3e
 8003c6e:	d928      	bls.n	8003cc2 <USB_ActivateEndpoint+0x16e>
 8003c70:	0965      	lsrs	r5, r4, #5
 8003c72:	06e4      	lsls	r4, r4, #27
 8003c74:	d100      	bne.n	8003c78 <USB_ActivateEndpoint+0x124>
 8003c76:	3d01      	subs	r5, #1
 8003c78:	8814      	ldrh	r4, [r2, #0]
 8003c7a:	02ad      	lsls	r5, r5, #10
 8003c7c:	b2ad      	uxth	r5, r5
 8003c7e:	4325      	orrs	r5, r4
 8003c80:	4c79      	ldr	r4, [pc, #484]	; (8003e68 <USB_ActivateEndpoint+0x314>)
 8003c82:	432c      	orrs	r4, r5
 8003c84:	b2a4      	uxth	r4, r4
 8003c86:	8014      	strh	r4, [r2, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c88:	780a      	ldrb	r2, [r1, #0]
 8003c8a:	0092      	lsls	r2, r2, #2
 8003c8c:	189a      	adds	r2, r3, r2
 8003c8e:	8814      	ldrh	r4, [r2, #0]
 8003c90:	0464      	lsls	r4, r4, #17
 8003c92:	d506      	bpl.n	8003ca2 <USB_ActivateEndpoint+0x14e>
 8003c94:	8815      	ldrh	r5, [r2, #0]
 8003c96:	4c6f      	ldr	r4, [pc, #444]	; (8003e54 <USB_ActivateEndpoint+0x300>)
 8003c98:	4025      	ands	r5, r4
 8003c9a:	4c74      	ldr	r4, [pc, #464]	; (8003e6c <USB_ActivateEndpoint+0x318>)
 8003c9c:	432c      	orrs	r4, r5
 8003c9e:	b2a4      	uxth	r4, r4
 8003ca0:	8014      	strh	r4, [r2, #0]

      if (ep->num == 0U)
 8003ca2:	780a      	ldrb	r2, [r1, #0]
 8003ca4:	2a00      	cmp	r2, #0
 8003ca6:	d11e      	bne.n	8003ce6 <USB_ActivateEndpoint+0x192>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ca8:	0092      	lsls	r2, r2, #2
 8003caa:	189a      	adds	r2, r3, r2
 8003cac:	8813      	ldrh	r3, [r2, #0]
 8003cae:	4970      	ldr	r1, [pc, #448]	; (8003e70 <USB_ActivateEndpoint+0x31c>)
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	21c0      	movs	r1, #192	; 0xc0
 8003cb4:	0189      	lsls	r1, r1, #6
 8003cb6:	4059      	eors	r1, r3
 8003cb8:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	8013      	strh	r3, [r2, #0]
 8003cc0:	e078      	b.n	8003db4 <USB_ActivateEndpoint+0x260>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003cc2:	2c00      	cmp	r4, #0
 8003cc4:	d105      	bne.n	8003cd2 <USB_ActivateEndpoint+0x17e>
 8003cc6:	8814      	ldrh	r4, [r2, #0]
 8003cc8:	4d67      	ldr	r5, [pc, #412]	; (8003e68 <USB_ActivateEndpoint+0x314>)
 8003cca:	432c      	orrs	r4, r5
 8003ccc:	b2a4      	uxth	r4, r4
 8003cce:	8014      	strh	r4, [r2, #0]
 8003cd0:	e7da      	b.n	8003c88 <USB_ActivateEndpoint+0x134>
 8003cd2:	0865      	lsrs	r5, r4, #1
 8003cd4:	07e4      	lsls	r4, r4, #31
 8003cd6:	d500      	bpl.n	8003cda <USB_ActivateEndpoint+0x186>
 8003cd8:	3501      	adds	r5, #1
 8003cda:	8814      	ldrh	r4, [r2, #0]
 8003cdc:	02ad      	lsls	r5, r5, #10
 8003cde:	b2ad      	uxth	r5, r5
 8003ce0:	432c      	orrs	r4, r5
 8003ce2:	8014      	strh	r4, [r2, #0]
 8003ce4:	e7d0      	b.n	8003c88 <USB_ActivateEndpoint+0x134>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003ce6:	0092      	lsls	r2, r2, #2
 8003ce8:	189a      	adds	r2, r3, r2
 8003cea:	8813      	ldrh	r3, [r2, #0]
 8003cec:	4960      	ldr	r1, [pc, #384]	; (8003e70 <USB_ActivateEndpoint+0x31c>)
 8003cee:	400b      	ands	r3, r1
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	0189      	lsls	r1, r1, #6
 8003cf4:	4059      	eors	r1, r3
 8003cf6:	4b56      	ldr	r3, [pc, #344]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	8013      	strh	r3, [r2, #0]
 8003cfe:	e059      	b.n	8003db4 <USB_ActivateEndpoint+0x260>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003d00:	78ca      	ldrb	r2, [r1, #3]
 8003d02:	2a02      	cmp	r2, #2
 8003d04:	d057      	beq.n	8003db6 <USB_ActivateEndpoint+0x262>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003d06:	780a      	ldrb	r2, [r1, #0]
 8003d08:	0092      	lsls	r2, r2, #2
 8003d0a:	189a      	adds	r2, r3, r2
 8003d0c:	8815      	ldrh	r5, [r2, #0]
 8003d0e:	4c59      	ldr	r4, [pc, #356]	; (8003e74 <USB_ActivateEndpoint+0x320>)
 8003d10:	4025      	ands	r5, r4
 8003d12:	4c4f      	ldr	r4, [pc, #316]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003d14:	432c      	orrs	r4, r5
 8003d16:	b2a4      	uxth	r4, r4
 8003d18:	8014      	strh	r4, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003d1a:	2550      	movs	r5, #80	; 0x50
 8003d1c:	5b5c      	ldrh	r4, [r3, r5]
 8003d1e:	191c      	adds	r4, r3, r4
 8003d20:	780a      	ldrb	r2, [r1, #0]
 8003d22:	00d2      	lsls	r2, r2, #3
 8003d24:	1912      	adds	r2, r2, r4
 8003d26:	2480      	movs	r4, #128	; 0x80
 8003d28:	00e4      	lsls	r4, r4, #3
 8003d2a:	46a4      	mov	ip, r4
 8003d2c:	4462      	add	r2, ip
 8003d2e:	890c      	ldrh	r4, [r1, #8]
 8003d30:	0864      	lsrs	r4, r4, #1
 8003d32:	0064      	lsls	r4, r4, #1
 8003d34:	8014      	strh	r4, [r2, #0]
 8003d36:	5b5c      	ldrh	r4, [r3, r5]
 8003d38:	191c      	adds	r4, r3, r4
 8003d3a:	780a      	ldrb	r2, [r1, #0]
 8003d3c:	00d2      	lsls	r2, r2, #3
 8003d3e:	1912      	adds	r2, r2, r4
 8003d40:	4c47      	ldr	r4, [pc, #284]	; (8003e60 <USB_ActivateEndpoint+0x30c>)
 8003d42:	46a4      	mov	ip, r4
 8003d44:	4462      	add	r2, ip
 8003d46:	894c      	ldrh	r4, [r1, #10]
 8003d48:	0864      	lsrs	r4, r4, #1
 8003d4a:	0064      	lsls	r4, r4, #1
 8003d4c:	8014      	strh	r4, [r2, #0]

    if (ep->is_in == 0U)
 8003d4e:	784a      	ldrb	r2, [r1, #1]
 8003d50:	2a00      	cmp	r2, #0
 8003d52:	d13b      	bne.n	8003dcc <USB_ActivateEndpoint+0x278>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d54:	780a      	ldrb	r2, [r1, #0]
 8003d56:	0092      	lsls	r2, r2, #2
 8003d58:	189a      	adds	r2, r3, r2
 8003d5a:	8814      	ldrh	r4, [r2, #0]
 8003d5c:	0464      	lsls	r4, r4, #17
 8003d5e:	d506      	bpl.n	8003d6e <USB_ActivateEndpoint+0x21a>
 8003d60:	8815      	ldrh	r5, [r2, #0]
 8003d62:	4c3c      	ldr	r4, [pc, #240]	; (8003e54 <USB_ActivateEndpoint+0x300>)
 8003d64:	4025      	ands	r5, r4
 8003d66:	4c41      	ldr	r4, [pc, #260]	; (8003e6c <USB_ActivateEndpoint+0x318>)
 8003d68:	432c      	orrs	r4, r5
 8003d6a:	b2a4      	uxth	r4, r4
 8003d6c:	8014      	strh	r4, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d6e:	780a      	ldrb	r2, [r1, #0]
 8003d70:	0092      	lsls	r2, r2, #2
 8003d72:	189a      	adds	r2, r3, r2
 8003d74:	8814      	ldrh	r4, [r2, #0]
 8003d76:	0664      	lsls	r4, r4, #25
 8003d78:	d506      	bpl.n	8003d88 <USB_ActivateEndpoint+0x234>
 8003d7a:	8815      	ldrh	r5, [r2, #0]
 8003d7c:	4c35      	ldr	r4, [pc, #212]	; (8003e54 <USB_ActivateEndpoint+0x300>)
 8003d7e:	4025      	ands	r5, r4
 8003d80:	4c35      	ldr	r4, [pc, #212]	; (8003e58 <USB_ActivateEndpoint+0x304>)
 8003d82:	432c      	orrs	r4, r5
 8003d84:	b2a4      	uxth	r4, r4
 8003d86:	8014      	strh	r4, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d88:	780d      	ldrb	r5, [r1, #0]
 8003d8a:	00ad      	lsls	r5, r5, #2
 8003d8c:	195d      	adds	r5, r3, r5
 8003d8e:	882c      	ldrh	r4, [r5, #0]
 8003d90:	4a37      	ldr	r2, [pc, #220]	; (8003e70 <USB_ActivateEndpoint+0x31c>)
 8003d92:	4014      	ands	r4, r2
 8003d94:	22c0      	movs	r2, #192	; 0xc0
 8003d96:	0192      	lsls	r2, r2, #6
 8003d98:	4062      	eors	r2, r4
 8003d9a:	4c2d      	ldr	r4, [pc, #180]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003d9c:	4322      	orrs	r2, r4
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	802a      	strh	r2, [r5, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003da2:	780a      	ldrb	r2, [r1, #0]
 8003da4:	0092      	lsls	r2, r2, #2
 8003da6:	189b      	adds	r3, r3, r2
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	492c      	ldr	r1, [pc, #176]	; (8003e5c <USB_ActivateEndpoint+0x308>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	4314      	orrs	r4, r2
 8003db0:	b2a4      	uxth	r4, r4
 8003db2:	801c      	strh	r4, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003db6:	780a      	ldrb	r2, [r1, #0]
 8003db8:	0092      	lsls	r2, r2, #2
 8003dba:	189a      	adds	r2, r3, r2
 8003dbc:	8815      	ldrh	r5, [r2, #0]
 8003dbe:	4c25      	ldr	r4, [pc, #148]	; (8003e54 <USB_ActivateEndpoint+0x300>)
 8003dc0:	4025      	ands	r5, r4
 8003dc2:	4c2d      	ldr	r4, [pc, #180]	; (8003e78 <USB_ActivateEndpoint+0x324>)
 8003dc4:	432c      	orrs	r4, r5
 8003dc6:	b2a4      	uxth	r4, r4
 8003dc8:	8014      	strh	r4, [r2, #0]
 8003dca:	e7a6      	b.n	8003d1a <USB_ActivateEndpoint+0x1c6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dcc:	780a      	ldrb	r2, [r1, #0]
 8003dce:	0092      	lsls	r2, r2, #2
 8003dd0:	189a      	adds	r2, r3, r2
 8003dd2:	8814      	ldrh	r4, [r2, #0]
 8003dd4:	0464      	lsls	r4, r4, #17
 8003dd6:	d506      	bpl.n	8003de6 <USB_ActivateEndpoint+0x292>
 8003dd8:	8815      	ldrh	r5, [r2, #0]
 8003dda:	4c1e      	ldr	r4, [pc, #120]	; (8003e54 <USB_ActivateEndpoint+0x300>)
 8003ddc:	4025      	ands	r5, r4
 8003dde:	4c23      	ldr	r4, [pc, #140]	; (8003e6c <USB_ActivateEndpoint+0x318>)
 8003de0:	432c      	orrs	r4, r5
 8003de2:	b2a4      	uxth	r4, r4
 8003de4:	8014      	strh	r4, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003de6:	780a      	ldrb	r2, [r1, #0]
 8003de8:	0092      	lsls	r2, r2, #2
 8003dea:	189a      	adds	r2, r3, r2
 8003dec:	8814      	ldrh	r4, [r2, #0]
 8003dee:	0664      	lsls	r4, r4, #25
 8003df0:	d506      	bpl.n	8003e00 <USB_ActivateEndpoint+0x2ac>
 8003df2:	8815      	ldrh	r5, [r2, #0]
 8003df4:	4c17      	ldr	r4, [pc, #92]	; (8003e54 <USB_ActivateEndpoint+0x300>)
 8003df6:	4025      	ands	r5, r4
 8003df8:	4c17      	ldr	r4, [pc, #92]	; (8003e58 <USB_ActivateEndpoint+0x304>)
 8003dfa:	432c      	orrs	r4, r5
 8003dfc:	b2a4      	uxth	r4, r4
 8003dfe:	8014      	strh	r4, [r2, #0]
      if (ep->type != EP_TYPE_ISOC)
 8003e00:	78ca      	ldrb	r2, [r1, #3]
 8003e02:	2a01      	cmp	r2, #1
 8003e04:	d017      	beq.n	8003e36 <USB_ActivateEndpoint+0x2e2>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e06:	780c      	ldrb	r4, [r1, #0]
 8003e08:	00a4      	lsls	r4, r4, #2
 8003e0a:	191c      	adds	r4, r3, r4
 8003e0c:	8822      	ldrh	r2, [r4, #0]
 8003e0e:	4d13      	ldr	r5, [pc, #76]	; (8003e5c <USB_ActivateEndpoint+0x308>)
 8003e10:	402a      	ands	r2, r5
 8003e12:	2520      	movs	r5, #32
 8003e14:	406a      	eors	r2, r5
 8003e16:	b292      	uxth	r2, r2
 8003e18:	4d0d      	ldr	r5, [pc, #52]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003e1a:	432a      	orrs	r2, r5
 8003e1c:	b292      	uxth	r2, r2
 8003e1e:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e20:	780a      	ldrb	r2, [r1, #0]
 8003e22:	0092      	lsls	r2, r2, #2
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	8819      	ldrh	r1, [r3, #0]
 8003e28:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <USB_ActivateEndpoint+0x31c>)
 8003e2a:	4011      	ands	r1, r2
 8003e2c:	4a08      	ldr	r2, [pc, #32]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	b292      	uxth	r2, r2
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e7be      	b.n	8003db4 <USB_ActivateEndpoint+0x260>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e36:	780a      	ldrb	r2, [r1, #0]
 8003e38:	0092      	lsls	r2, r2, #2
 8003e3a:	189a      	adds	r2, r3, r2
 8003e3c:	8815      	ldrh	r5, [r2, #0]
 8003e3e:	4c07      	ldr	r4, [pc, #28]	; (8003e5c <USB_ActivateEndpoint+0x308>)
 8003e40:	4025      	ands	r5, r4
 8003e42:	4c03      	ldr	r4, [pc, #12]	; (8003e50 <USB_ActivateEndpoint+0x2fc>)
 8003e44:	432c      	orrs	r4, r5
 8003e46:	b2a4      	uxth	r4, r4
 8003e48:	8014      	strh	r4, [r2, #0]
 8003e4a:	e7e9      	b.n	8003e20 <USB_ActivateEndpoint+0x2cc>
 8003e4c:	ffff898f 	.word	0xffff898f
 8003e50:	ffff8080 	.word	0xffff8080
 8003e54:	ffff8f8f 	.word	0xffff8f8f
 8003e58:	ffff80c0 	.word	0xffff80c0
 8003e5c:	ffff8fbf 	.word	0xffff8fbf
 8003e60:	00000404 	.word	0x00000404
 8003e64:	00000406 	.word	0x00000406
 8003e68:	ffff8000 	.word	0xffff8000
 8003e6c:	ffffc080 	.word	0xffffc080
 8003e70:	ffffbf8f 	.word	0xffffbf8f
 8003e74:	ffff8e8f 	.word	0xffff8e8f
 8003e78:	ffff8180 	.word	0xffff8180

08003e7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e7c:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8003e7e:	7b0b      	ldrb	r3, [r1, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d133      	bne.n	8003eec <USB_DeactivateEndpoint+0x70>
  {
    if (ep->is_in != 0U)
 8003e84:	784b      	ldrb	r3, [r1, #1]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d018      	beq.n	8003ebc <USB_DeactivateEndpoint+0x40>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e8a:	780b      	ldrb	r3, [r1, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	18c3      	adds	r3, r0, r3
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	0652      	lsls	r2, r2, #25
 8003e94:	d506      	bpl.n	8003ea4 <USB_DeactivateEndpoint+0x28>
 8003e96:	881c      	ldrh	r4, [r3, #0]
 8003e98:	4a4e      	ldr	r2, [pc, #312]	; (8003fd4 <USB_DeactivateEndpoint+0x158>)
 8003e9a:	4014      	ands	r4, r2
 8003e9c:	4a4e      	ldr	r2, [pc, #312]	; (8003fd8 <USB_DeactivateEndpoint+0x15c>)
 8003e9e:	4322      	orrs	r2, r4
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ea4:	780b      	ldrb	r3, [r1, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	18c3      	adds	r3, r0, r3
 8003eaa:	8819      	ldrh	r1, [r3, #0]
 8003eac:	4a4b      	ldr	r2, [pc, #300]	; (8003fdc <USB_DeactivateEndpoint+0x160>)
 8003eae:	4011      	ands	r1, r2
 8003eb0:	4a4b      	ldr	r2, [pc, #300]	; (8003fe0 <USB_DeactivateEndpoint+0x164>)
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003eb8:	2000      	movs	r0, #0
 8003eba:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ebc:	780b      	ldrb	r3, [r1, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	18c3      	adds	r3, r0, r3
 8003ec2:	881a      	ldrh	r2, [r3, #0]
 8003ec4:	0452      	lsls	r2, r2, #17
 8003ec6:	d506      	bpl.n	8003ed6 <USB_DeactivateEndpoint+0x5a>
 8003ec8:	881c      	ldrh	r4, [r3, #0]
 8003eca:	4a42      	ldr	r2, [pc, #264]	; (8003fd4 <USB_DeactivateEndpoint+0x158>)
 8003ecc:	4014      	ands	r4, r2
 8003ece:	4a45      	ldr	r2, [pc, #276]	; (8003fe4 <USB_DeactivateEndpoint+0x168>)
 8003ed0:	4322      	orrs	r2, r4
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ed6:	780b      	ldrb	r3, [r1, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	18c3      	adds	r3, r0, r3
 8003edc:	8819      	ldrh	r1, [r3, #0]
 8003ede:	4a42      	ldr	r2, [pc, #264]	; (8003fe8 <USB_DeactivateEndpoint+0x16c>)
 8003ee0:	4011      	ands	r1, r2
 8003ee2:	4a3f      	ldr	r2, [pc, #252]	; (8003fe0 <USB_DeactivateEndpoint+0x164>)
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	e7e5      	b.n	8003eb8 <USB_DeactivateEndpoint+0x3c>
    if (ep->is_in == 0U)
 8003eec:	784b      	ldrb	r3, [r1, #1]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d137      	bne.n	8003f62 <USB_DeactivateEndpoint+0xe6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ef2:	780b      	ldrb	r3, [r1, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	18c3      	adds	r3, r0, r3
 8003ef8:	881a      	ldrh	r2, [r3, #0]
 8003efa:	0452      	lsls	r2, r2, #17
 8003efc:	d506      	bpl.n	8003f0c <USB_DeactivateEndpoint+0x90>
 8003efe:	881c      	ldrh	r4, [r3, #0]
 8003f00:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <USB_DeactivateEndpoint+0x158>)
 8003f02:	4014      	ands	r4, r2
 8003f04:	4a37      	ldr	r2, [pc, #220]	; (8003fe4 <USB_DeactivateEndpoint+0x168>)
 8003f06:	4322      	orrs	r2, r4
 8003f08:	b292      	uxth	r2, r2
 8003f0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f0c:	780b      	ldrb	r3, [r1, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	18c3      	adds	r3, r0, r3
 8003f12:	881a      	ldrh	r2, [r3, #0]
 8003f14:	0652      	lsls	r2, r2, #25
 8003f16:	d506      	bpl.n	8003f26 <USB_DeactivateEndpoint+0xaa>
 8003f18:	881c      	ldrh	r4, [r3, #0]
 8003f1a:	4a2e      	ldr	r2, [pc, #184]	; (8003fd4 <USB_DeactivateEndpoint+0x158>)
 8003f1c:	4014      	ands	r4, r2
 8003f1e:	4a2e      	ldr	r2, [pc, #184]	; (8003fd8 <USB_DeactivateEndpoint+0x15c>)
 8003f20:	4322      	orrs	r2, r4
 8003f22:	b292      	uxth	r2, r2
 8003f24:	801a      	strh	r2, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8003f26:	780b      	ldrb	r3, [r1, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	18c3      	adds	r3, r0, r3
 8003f2c:	881c      	ldrh	r4, [r3, #0]
 8003f2e:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <USB_DeactivateEndpoint+0x158>)
 8003f30:	4014      	ands	r4, r2
 8003f32:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <USB_DeactivateEndpoint+0x15c>)
 8003f34:	4322      	orrs	r2, r4
 8003f36:	b292      	uxth	r2, r2
 8003f38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f3a:	780c      	ldrb	r4, [r1, #0]
 8003f3c:	00a4      	lsls	r4, r4, #2
 8003f3e:	1904      	adds	r4, r0, r4
 8003f40:	8823      	ldrh	r3, [r4, #0]
 8003f42:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <USB_DeactivateEndpoint+0x16c>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	4a26      	ldr	r2, [pc, #152]	; (8003fe0 <USB_DeactivateEndpoint+0x164>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f4e:	780b      	ldrb	r3, [r1, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	18c3      	adds	r3, r0, r3
 8003f54:	8819      	ldrh	r1, [r3, #0]
 8003f56:	4821      	ldr	r0, [pc, #132]	; (8003fdc <USB_DeactivateEndpoint+0x160>)
 8003f58:	4001      	ands	r1, r0
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	e7aa      	b.n	8003eb8 <USB_DeactivateEndpoint+0x3c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f62:	780b      	ldrb	r3, [r1, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	18c3      	adds	r3, r0, r3
 8003f68:	881a      	ldrh	r2, [r3, #0]
 8003f6a:	0452      	lsls	r2, r2, #17
 8003f6c:	d506      	bpl.n	8003f7c <USB_DeactivateEndpoint+0x100>
 8003f6e:	881c      	ldrh	r4, [r3, #0]
 8003f70:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <USB_DeactivateEndpoint+0x158>)
 8003f72:	4014      	ands	r4, r2
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <USB_DeactivateEndpoint+0x168>)
 8003f76:	4322      	orrs	r2, r4
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f7c:	780b      	ldrb	r3, [r1, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	18c3      	adds	r3, r0, r3
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	0652      	lsls	r2, r2, #25
 8003f86:	d506      	bpl.n	8003f96 <USB_DeactivateEndpoint+0x11a>
 8003f88:	881c      	ldrh	r4, [r3, #0]
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <USB_DeactivateEndpoint+0x158>)
 8003f8c:	4014      	ands	r4, r2
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <USB_DeactivateEndpoint+0x15c>)
 8003f90:	4322      	orrs	r2, r4
 8003f92:	b292      	uxth	r2, r2
 8003f94:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f96:	780b      	ldrb	r3, [r1, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	18c3      	adds	r3, r0, r3
 8003f9c:	881c      	ldrh	r4, [r3, #0]
 8003f9e:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <USB_DeactivateEndpoint+0x158>)
 8003fa0:	4014      	ands	r4, r2
 8003fa2:	4a10      	ldr	r2, [pc, #64]	; (8003fe4 <USB_DeactivateEndpoint+0x168>)
 8003fa4:	4322      	orrs	r2, r4
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003faa:	780c      	ldrb	r4, [r1, #0]
 8003fac:	00a4      	lsls	r4, r4, #2
 8003fae:	1904      	adds	r4, r0, r4
 8003fb0:	8823      	ldrh	r3, [r4, #0]
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <USB_DeactivateEndpoint+0x160>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <USB_DeactivateEndpoint+0x164>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fbe:	780b      	ldrb	r3, [r1, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	18c0      	adds	r0, r0, r3
 8003fc4:	8803      	ldrh	r3, [r0, #0]
 8003fc6:	4908      	ldr	r1, [pc, #32]	; (8003fe8 <USB_DeactivateEndpoint+0x16c>)
 8003fc8:	400b      	ands	r3, r1
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	b292      	uxth	r2, r2
 8003fce:	8002      	strh	r2, [r0, #0]
 8003fd0:	e772      	b.n	8003eb8 <USB_DeactivateEndpoint+0x3c>
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	ffff8f8f 	.word	0xffff8f8f
 8003fd8:	ffff80c0 	.word	0xffff80c0
 8003fdc:	ffff8fbf 	.word	0xffff8fbf
 8003fe0:	ffff8080 	.word	0xffff8080
 8003fe4:	ffffc080 	.word	0xffffc080
 8003fe8:	ffffbf8f 	.word	0xffffbf8f

08003fec <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003fec:	784b      	ldrb	r3, [r1, #1]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00e      	beq.n	8004010 <USB_EPSetStall+0x24>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003ff2:	780b      	ldrb	r3, [r1, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	18c0      	adds	r0, r0, r3
 8003ff8:	8803      	ldrh	r3, [r0, #0]
 8003ffa:	4a0c      	ldr	r2, [pc, #48]	; (800402c <USB_EPSetStall+0x40>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2210      	movs	r2, #16
 8004000:	4053      	eors	r3, r2
 8004002:	b29b      	uxth	r3, r3
 8004004:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <USB_EPSetStall+0x44>)
 8004006:	4313      	orrs	r3, r2
 8004008:	b29b      	uxth	r3, r3
 800400a:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800400c:	2000      	movs	r0, #0
 800400e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004010:	780b      	ldrb	r3, [r1, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	18c0      	adds	r0, r0, r3
 8004016:	8803      	ldrh	r3, [r0, #0]
 8004018:	4a06      	ldr	r2, [pc, #24]	; (8004034 <USB_EPSetStall+0x48>)
 800401a:	4013      	ands	r3, r2
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	0152      	lsls	r2, r2, #5
 8004020:	405a      	eors	r2, r3
 8004022:	4b03      	ldr	r3, [pc, #12]	; (8004030 <USB_EPSetStall+0x44>)
 8004024:	4313      	orrs	r3, r2
 8004026:	b29b      	uxth	r3, r3
 8004028:	8003      	strh	r3, [r0, #0]
 800402a:	e7ef      	b.n	800400c <USB_EPSetStall+0x20>
 800402c:	ffff8fbf 	.word	0xffff8fbf
 8004030:	ffff8080 	.word	0xffff8080
 8004034:	ffffbf8f 	.word	0xffffbf8f

08004038 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004038:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 800403a:	7b0b      	ldrb	r3, [r1, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d13a      	bne.n	80040b6 <USB_EPClearStall+0x7e>
  {
    if (ep->is_in != 0U)
 8004040:	784b      	ldrb	r3, [r1, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01d      	beq.n	8004082 <USB_EPClearStall+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004046:	780b      	ldrb	r3, [r1, #0]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	18c3      	adds	r3, r0, r3
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	0652      	lsls	r2, r2, #25
 8004050:	d506      	bpl.n	8004060 <USB_EPClearStall+0x28>
 8004052:	881c      	ldrh	r4, [r3, #0]
 8004054:	4a19      	ldr	r2, [pc, #100]	; (80040bc <USB_EPClearStall+0x84>)
 8004056:	4014      	ands	r4, r2
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <USB_EPClearStall+0x88>)
 800405a:	4322      	orrs	r2, r4
 800405c:	b292      	uxth	r2, r2
 800405e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004060:	78cb      	ldrb	r3, [r1, #3]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d027      	beq.n	80040b6 <USB_EPClearStall+0x7e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004066:	780a      	ldrb	r2, [r1, #0]
 8004068:	0092      	lsls	r2, r2, #2
 800406a:	1882      	adds	r2, r0, r2
 800406c:	8813      	ldrh	r3, [r2, #0]
 800406e:	4915      	ldr	r1, [pc, #84]	; (80040c4 <USB_EPClearStall+0x8c>)
 8004070:	400b      	ands	r3, r1
 8004072:	2120      	movs	r1, #32
 8004074:	404b      	eors	r3, r1
 8004076:	b29b      	uxth	r3, r3
 8004078:	4913      	ldr	r1, [pc, #76]	; (80040c8 <USB_EPClearStall+0x90>)
 800407a:	430b      	orrs	r3, r1
 800407c:	b29b      	uxth	r3, r3
 800407e:	8013      	strh	r3, [r2, #0]
 8004080:	e019      	b.n	80040b6 <USB_EPClearStall+0x7e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004082:	780b      	ldrb	r3, [r1, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	18c3      	adds	r3, r0, r3
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	0452      	lsls	r2, r2, #17
 800408c:	d506      	bpl.n	800409c <USB_EPClearStall+0x64>
 800408e:	881c      	ldrh	r4, [r3, #0]
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <USB_EPClearStall+0x84>)
 8004092:	4014      	ands	r4, r2
 8004094:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <USB_EPClearStall+0x94>)
 8004096:	4322      	orrs	r2, r4
 8004098:	b292      	uxth	r2, r2
 800409a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800409c:	780b      	ldrb	r3, [r1, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	18c0      	adds	r0, r0, r3
 80040a2:	8803      	ldrh	r3, [r0, #0]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <USB_EPClearStall+0x98>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	22c0      	movs	r2, #192	; 0xc0
 80040aa:	0192      	lsls	r2, r2, #6
 80040ac:	405a      	eors	r2, r3
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <USB_EPClearStall+0x90>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 80040b6:	2000      	movs	r0, #0
 80040b8:	bd10      	pop	{r4, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	ffff8f8f 	.word	0xffff8f8f
 80040c0:	ffff80c0 	.word	0xffff80c0
 80040c4:	ffff8fbf 	.word	0xffff8fbf
 80040c8:	ffff8080 	.word	0xffff8080
 80040cc:	ffffc080 	.word	0xffffc080
 80040d0:	ffffbf8f 	.word	0xffffbf8f

080040d4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d102      	bne.n	80040de <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80040d8:	234c      	movs	r3, #76	; 0x4c
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	52c2      	strh	r2, [r0, r3]
  }

  return HAL_OK;
}
 80040de:	2000      	movs	r0, #0
 80040e0:	4770      	bx	lr
	...

080040e4 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80040e4:	2258      	movs	r2, #88	; 0x58
 80040e6:	5a83      	ldrh	r3, [r0, r2]
 80040e8:	4902      	ldr	r1, [pc, #8]	; (80040f4 <USB_DevConnect+0x10>)
 80040ea:	430b      	orrs	r3, r1
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 80040f0:	2000      	movs	r0, #0
 80040f2:	4770      	bx	lr
 80040f4:	ffff8000 	.word	0xffff8000

080040f8 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80040f8:	2344      	movs	r3, #68	; 0x44
 80040fa:	5ac0      	ldrh	r0, [r0, r3]
 80040fc:	b280      	uxth	r0, r0
  return tmpreg;
}
 80040fe:	4770      	bx	lr

08004100 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004100:	b510      	push	{r4, lr}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004102:	3301      	adds	r3, #1
 8004104:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004106:	1812      	adds	r2, r2, r0
 8004108:	2080      	movs	r0, #128	; 0x80
 800410a:	00c0      	lsls	r0, r0, #3
 800410c:	4684      	mov	ip, r0
 800410e:	4462      	add	r2, ip

  for (count = n; count != 0U; count--)
 8004110:	e007      	b.n	8004122 <USB_WritePMA+0x22>
  {
    WrVal = pBuf[0];
 8004112:	7808      	ldrb	r0, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004114:	784c      	ldrb	r4, [r1, #1]
 8004116:	0224      	lsls	r4, r4, #8
 8004118:	4304      	orrs	r4, r0
    *pdwVal = (WrVal & 0xFFFFU);
 800411a:	8014      	strh	r4, [r2, #0]
    pdwVal++;
 800411c:	3202      	adds	r2, #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 800411e:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8004120:	3b01      	subs	r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f5      	bne.n	8004112 <USB_WritePMA+0x12>
  }
}
 8004126:	bd10      	pop	{r4, pc}

08004128 <USB_EPStartXfer>:
{
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	0005      	movs	r5, r0
 800412c:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 800412e:	784a      	ldrb	r2, [r1, #1]
 8004130:	2a01      	cmp	r2, #1
 8004132:	d035      	beq.n	80041a0 <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 8004134:	7b0b      	ldrb	r3, [r1, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d000      	beq.n	800413c <USB_EPStartXfer+0x14>
 800413a:	e26d      	b.n	8004618 <USB_EPStartXfer+0x4f0>
      if (ep->xfer_len > ep->maxpacket)
 800413c:	698b      	ldr	r3, [r1, #24]
 800413e:	6909      	ldr	r1, [r1, #16]
 8004140:	428b      	cmp	r3, r1
 8004142:	d800      	bhi.n	8004146 <USB_EPStartXfer+0x1e>
 8004144:	e252      	b.n	80045ec <USB_EPStartXfer+0x4c4>
        ep->xfer_len -= len;
 8004146:	1a5b      	subs	r3, r3, r1
 8004148:	61a3      	str	r3, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800414a:	2350      	movs	r3, #80	; 0x50
 800414c:	5aea      	ldrh	r2, [r5, r3]
 800414e:	18aa      	adds	r2, r5, r2
 8004150:	7823      	ldrb	r3, [r4, #0]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	189b      	adds	r3, r3, r2
 8004156:	4aab      	ldr	r2, [pc, #684]	; (8004404 <USB_EPStartXfer+0x2dc>)
 8004158:	4694      	mov	ip, r2
 800415a:	4463      	add	r3, ip
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	0592      	lsls	r2, r2, #22
 8004160:	0d92      	lsrs	r2, r2, #22
 8004162:	801a      	strh	r2, [r3, #0]
 8004164:	293e      	cmp	r1, #62	; 0x3e
 8004166:	d800      	bhi.n	800416a <USB_EPStartXfer+0x42>
 8004168:	e244      	b.n	80045f4 <USB_EPStartXfer+0x4cc>
 800416a:	094a      	lsrs	r2, r1, #5
 800416c:	06c9      	lsls	r1, r1, #27
 800416e:	d100      	bne.n	8004172 <USB_EPStartXfer+0x4a>
 8004170:	3a01      	subs	r2, #1
 8004172:	8819      	ldrh	r1, [r3, #0]
 8004174:	0292      	lsls	r2, r2, #10
 8004176:	b292      	uxth	r2, r2
 8004178:	4311      	orrs	r1, r2
 800417a:	4aa3      	ldr	r2, [pc, #652]	; (8004408 <USB_EPStartXfer+0x2e0>)
 800417c:	430a      	orrs	r2, r1
 800417e:	b292      	uxth	r2, r2
 8004180:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004182:	7823      	ldrb	r3, [r4, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	18ed      	adds	r5, r5, r3
 8004188:	882b      	ldrh	r3, [r5, #0]
 800418a:	4aa0      	ldr	r2, [pc, #640]	; (800440c <USB_EPStartXfer+0x2e4>)
 800418c:	4013      	ands	r3, r2
 800418e:	22c0      	movs	r2, #192	; 0xc0
 8004190:	0192      	lsls	r2, r2, #6
 8004192:	405a      	eors	r2, r3
 8004194:	4b9e      	ldr	r3, [pc, #632]	; (8004410 <USB_EPStartXfer+0x2e8>)
 8004196:	4313      	orrs	r3, r2
 8004198:	b29b      	uxth	r3, r3
 800419a:	802b      	strh	r3, [r5, #0]
  return HAL_OK;
 800419c:	2000      	movs	r0, #0
}
 800419e:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 80041a0:	698e      	ldr	r6, [r1, #24]
 80041a2:	6909      	ldr	r1, [r1, #16]
 80041a4:	428e      	cmp	r6, r1
 80041a6:	d900      	bls.n	80041aa <USB_EPStartXfer+0x82>
      len = ep->maxpacket;
 80041a8:	000e      	movs	r6, r1
    if (ep->doublebuffer == 0U)
 80041aa:	7b23      	ldrb	r3, [r4, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d02b      	beq.n	8004208 <USB_EPStartXfer+0xe0>
      if (ep->type == EP_TYPE_BULK)
 80041b0:	78e3      	ldrb	r3, [r4, #3]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d048      	beq.n	8004248 <USB_EPStartXfer+0x120>
        ep->xfer_len_db -= len;
 80041b6:	6a23      	ldr	r3, [r4, #32]
 80041b8:	1b9b      	subs	r3, r3, r6
 80041ba:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80041bc:	7823      	ldrb	r3, [r4, #0]
 80041be:	0099      	lsls	r1, r3, #2
 80041c0:	1869      	adds	r1, r5, r1
 80041c2:	8809      	ldrh	r1, [r1, #0]
 80041c4:	0649      	lsls	r1, r1, #25
 80041c6:	d400      	bmi.n	80041ca <USB_EPStartXfer+0xa2>
 80041c8:	e1d0      	b.n	800456c <USB_EPStartXfer+0x444>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	d000      	beq.n	80041d0 <USB_EPStartXfer+0xa8>
 80041ce:	e1bc      	b.n	800454a <USB_EPStartXfer+0x422>
 80041d0:	3250      	adds	r2, #80	; 0x50
 80041d2:	5aaa      	ldrh	r2, [r5, r2]
 80041d4:	18aa      	adds	r2, r5, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	189b      	adds	r3, r3, r2
 80041da:	4a8a      	ldr	r2, [pc, #552]	; (8004404 <USB_EPStartXfer+0x2dc>)
 80041dc:	4694      	mov	ip, r2
 80041de:	4463      	add	r3, ip
 80041e0:	881a      	ldrh	r2, [r3, #0]
 80041e2:	0592      	lsls	r2, r2, #22
 80041e4:	0d92      	lsrs	r2, r2, #22
 80041e6:	801a      	strh	r2, [r3, #0]
 80041e8:	2e3e      	cmp	r6, #62	; 0x3e
 80041ea:	d800      	bhi.n	80041ee <USB_EPStartXfer+0xc6>
 80041ec:	e19b      	b.n	8004526 <USB_EPStartXfer+0x3fe>
 80041ee:	0972      	lsrs	r2, r6, #5
 80041f0:	06f1      	lsls	r1, r6, #27
 80041f2:	d100      	bne.n	80041f6 <USB_EPStartXfer+0xce>
 80041f4:	3a01      	subs	r2, #1
 80041f6:	8819      	ldrh	r1, [r3, #0]
 80041f8:	0292      	lsls	r2, r2, #10
 80041fa:	b292      	uxth	r2, r2
 80041fc:	4311      	orrs	r1, r2
 80041fe:	4a82      	ldr	r2, [pc, #520]	; (8004408 <USB_EPStartXfer+0x2e0>)
 8004200:	430a      	orrs	r2, r1
 8004202:	b292      	uxth	r2, r2
 8004204:	801a      	strh	r2, [r3, #0]
 8004206:	e1aa      	b.n	800455e <USB_EPStartXfer+0x436>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004208:	b2b6      	uxth	r6, r6
 800420a:	88e2      	ldrh	r2, [r4, #6]
 800420c:	6961      	ldr	r1, [r4, #20]
 800420e:	0033      	movs	r3, r6
 8004210:	0028      	movs	r0, r5
 8004212:	f7ff ff75 	bl	8004100 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004216:	2350      	movs	r3, #80	; 0x50
 8004218:	5aea      	ldrh	r2, [r5, r3]
 800421a:	18aa      	adds	r2, r5, r2
 800421c:	7823      	ldrb	r3, [r4, #0]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	189b      	adds	r3, r3, r2
 8004222:	4a7c      	ldr	r2, [pc, #496]	; (8004414 <USB_EPStartXfer+0x2ec>)
 8004224:	4694      	mov	ip, r2
 8004226:	4463      	add	r3, ip
 8004228:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800422a:	7822      	ldrb	r2, [r4, #0]
 800422c:	0092      	lsls	r2, r2, #2
 800422e:	18aa      	adds	r2, r5, r2
 8004230:	8813      	ldrh	r3, [r2, #0]
 8004232:	4979      	ldr	r1, [pc, #484]	; (8004418 <USB_EPStartXfer+0x2f0>)
 8004234:	400b      	ands	r3, r1
 8004236:	2130      	movs	r1, #48	; 0x30
 8004238:	404b      	eors	r3, r1
 800423a:	b29b      	uxth	r3, r3
 800423c:	4974      	ldr	r1, [pc, #464]	; (8004410 <USB_EPStartXfer+0x2e8>)
 800423e:	430b      	orrs	r3, r1
 8004240:	b29b      	uxth	r3, r3
 8004242:	8013      	strh	r3, [r2, #0]
  return HAL_OK;
 8004244:	2000      	movs	r0, #0
 8004246:	e7aa      	b.n	800419e <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 8004248:	6a23      	ldr	r3, [r4, #32]
 800424a:	4299      	cmp	r1, r3
 800424c:	d300      	bcc.n	8004250 <USB_EPStartXfer+0x128>
 800424e:	e14f      	b.n	80044f0 <USB_EPStartXfer+0x3c8>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004250:	7823      	ldrb	r3, [r4, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	18eb      	adds	r3, r5, r3
 8004256:	8819      	ldrh	r1, [r3, #0]
 8004258:	4a70      	ldr	r2, [pc, #448]	; (800441c <USB_EPStartXfer+0x2f4>)
 800425a:	4011      	ands	r1, r2
 800425c:	4a70      	ldr	r2, [pc, #448]	; (8004420 <USB_EPStartXfer+0x2f8>)
 800425e:	430a      	orrs	r2, r1
 8004260:	b292      	uxth	r2, r2
 8004262:	801a      	strh	r2, [r3, #0]
          ep->xfer_len_db -= len;
 8004264:	6a23      	ldr	r3, [r4, #32]
 8004266:	1b9b      	subs	r3, r3, r6
 8004268:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800426a:	7823      	ldrb	r3, [r4, #0]
 800426c:	009a      	lsls	r2, r3, #2
 800426e:	18aa      	adds	r2, r5, r2
 8004270:	8812      	ldrh	r2, [r2, #0]
 8004272:	0652      	lsls	r2, r2, #25
 8004274:	d400      	bmi.n	8004278 <USB_EPStartXfer+0x150>
 8004276:	e095      	b.n	80043a4 <USB_EPStartXfer+0x27c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004278:	7862      	ldrb	r2, [r4, #1]
 800427a:	2a00      	cmp	r2, #0
 800427c:	d12c      	bne.n	80042d8 <USB_EPStartXfer+0x1b0>
 800427e:	3250      	adds	r2, #80	; 0x50
 8004280:	5aaa      	ldrh	r2, [r5, r2]
 8004282:	18aa      	adds	r2, r5, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	189b      	adds	r3, r3, r2
 8004288:	4a5e      	ldr	r2, [pc, #376]	; (8004404 <USB_EPStartXfer+0x2dc>)
 800428a:	4694      	mov	ip, r2
 800428c:	4463      	add	r3, ip
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	0592      	lsls	r2, r2, #22
 8004292:	0d92      	lsrs	r2, r2, #22
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	2e3e      	cmp	r6, #62	; 0x3e
 8004298:	d90c      	bls.n	80042b4 <USB_EPStartXfer+0x18c>
 800429a:	0972      	lsrs	r2, r6, #5
 800429c:	06f1      	lsls	r1, r6, #27
 800429e:	d100      	bne.n	80042a2 <USB_EPStartXfer+0x17a>
 80042a0:	3a01      	subs	r2, #1
 80042a2:	8819      	ldrh	r1, [r3, #0]
 80042a4:	0292      	lsls	r2, r2, #10
 80042a6:	b292      	uxth	r2, r2
 80042a8:	4311      	orrs	r1, r2
 80042aa:	4a57      	ldr	r2, [pc, #348]	; (8004408 <USB_EPStartXfer+0x2e0>)
 80042ac:	430a      	orrs	r2, r1
 80042ae:	b292      	uxth	r2, r2
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	e013      	b.n	80042dc <USB_EPStartXfer+0x1b4>
 80042b4:	2e00      	cmp	r6, #0
 80042b6:	d105      	bne.n	80042c4 <USB_EPStartXfer+0x19c>
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	4953      	ldr	r1, [pc, #332]	; (8004408 <USB_EPStartXfer+0x2e0>)
 80042bc:	430a      	orrs	r2, r1
 80042be:	b292      	uxth	r2, r2
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	e00b      	b.n	80042dc <USB_EPStartXfer+0x1b4>
 80042c4:	0872      	lsrs	r2, r6, #1
 80042c6:	07f1      	lsls	r1, r6, #31
 80042c8:	d500      	bpl.n	80042cc <USB_EPStartXfer+0x1a4>
 80042ca:	3201      	adds	r2, #1
 80042cc:	8819      	ldrh	r1, [r3, #0]
 80042ce:	0292      	lsls	r2, r2, #10
 80042d0:	b292      	uxth	r2, r2
 80042d2:	430a      	orrs	r2, r1
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e001      	b.n	80042dc <USB_EPStartXfer+0x1b4>
 80042d8:	2a01      	cmp	r2, #1
 80042da:	d02d      	beq.n	8004338 <USB_EPStartXfer+0x210>
            pmabuffer = ep->pmaaddr1;
 80042dc:	8962      	ldrh	r2, [r4, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042de:	b2b3      	uxth	r3, r6
 80042e0:	6961      	ldr	r1, [r4, #20]
 80042e2:	0028      	movs	r0, r5
 80042e4:	f7ff ff0c 	bl	8004100 <USB_WritePMA>
            ep->xfer_buff += len;
 80042e8:	6963      	ldr	r3, [r4, #20]
 80042ea:	199b      	adds	r3, r3, r6
 80042ec:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80042ee:	6a23      	ldr	r3, [r4, #32]
 80042f0:	6922      	ldr	r2, [r4, #16]
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d92b      	bls.n	800434e <USB_EPStartXfer+0x226>
              ep->xfer_len_db -= len;
 80042f6:	1b9b      	subs	r3, r3, r6
 80042f8:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042fa:	7863      	ldrb	r3, [r4, #1]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d13c      	bne.n	800437a <USB_EPStartXfer+0x252>
 8004300:	3350      	adds	r3, #80	; 0x50
 8004302:	5aea      	ldrh	r2, [r5, r3]
 8004304:	18aa      	adds	r2, r5, r2
 8004306:	7823      	ldrb	r3, [r4, #0]
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	189b      	adds	r3, r3, r2
 800430c:	4a41      	ldr	r2, [pc, #260]	; (8004414 <USB_EPStartXfer+0x2ec>)
 800430e:	4694      	mov	ip, r2
 8004310:	4463      	add	r3, ip
 8004312:	881a      	ldrh	r2, [r3, #0]
 8004314:	0592      	lsls	r2, r2, #22
 8004316:	0d92      	lsrs	r2, r2, #22
 8004318:	801a      	strh	r2, [r3, #0]
 800431a:	2e3e      	cmp	r6, #62	; 0x3e
 800431c:	d91b      	bls.n	8004356 <USB_EPStartXfer+0x22e>
 800431e:	0972      	lsrs	r2, r6, #5
 8004320:	06f1      	lsls	r1, r6, #27
 8004322:	d100      	bne.n	8004326 <USB_EPStartXfer+0x1fe>
 8004324:	3a01      	subs	r2, #1
 8004326:	8819      	ldrh	r1, [r3, #0]
 8004328:	0292      	lsls	r2, r2, #10
 800432a:	b292      	uxth	r2, r2
 800432c:	4311      	orrs	r1, r2
 800432e:	4a36      	ldr	r2, [pc, #216]	; (8004408 <USB_EPStartXfer+0x2e0>)
 8004330:	430a      	orrs	r2, r1
 8004332:	b292      	uxth	r2, r2
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	e022      	b.n	800437e <USB_EPStartXfer+0x256>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004338:	324f      	adds	r2, #79	; 0x4f
 800433a:	5aaa      	ldrh	r2, [r5, r2]
 800433c:	18aa      	adds	r2, r5, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	189b      	adds	r3, r3, r2
 8004342:	4a30      	ldr	r2, [pc, #192]	; (8004404 <USB_EPStartXfer+0x2dc>)
 8004344:	4694      	mov	ip, r2
 8004346:	4463      	add	r3, ip
 8004348:	b2b2      	uxth	r2, r6
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	e7c6      	b.n	80042dc <USB_EPStartXfer+0x1b4>
              ep->xfer_len_db = 0U;
 800434e:	2200      	movs	r2, #0
 8004350:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8004352:	001e      	movs	r6, r3
 8004354:	e7d1      	b.n	80042fa <USB_EPStartXfer+0x1d2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004356:	2e00      	cmp	r6, #0
 8004358:	d105      	bne.n	8004366 <USB_EPStartXfer+0x23e>
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	492a      	ldr	r1, [pc, #168]	; (8004408 <USB_EPStartXfer+0x2e0>)
 800435e:	430a      	orrs	r2, r1
 8004360:	b292      	uxth	r2, r2
 8004362:	801a      	strh	r2, [r3, #0]
 8004364:	e00b      	b.n	800437e <USB_EPStartXfer+0x256>
 8004366:	0872      	lsrs	r2, r6, #1
 8004368:	07f1      	lsls	r1, r6, #31
 800436a:	d500      	bpl.n	800436e <USB_EPStartXfer+0x246>
 800436c:	3201      	adds	r2, #1
 800436e:	8819      	ldrh	r1, [r3, #0]
 8004370:	0292      	lsls	r2, r2, #10
 8004372:	b292      	uxth	r2, r2
 8004374:	430a      	orrs	r2, r1
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	e001      	b.n	800437e <USB_EPStartXfer+0x256>
 800437a:	2b01      	cmp	r3, #1
 800437c:	d006      	beq.n	800438c <USB_EPStartXfer+0x264>
            pmabuffer = ep->pmaaddr0;
 800437e:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004380:	b2b3      	uxth	r3, r6
 8004382:	6961      	ldr	r1, [r4, #20]
 8004384:	0028      	movs	r0, r5
 8004386:	f7ff febb 	bl	8004100 <USB_WritePMA>
 800438a:	e74e      	b.n	800422a <USB_EPStartXfer+0x102>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800438c:	334f      	adds	r3, #79	; 0x4f
 800438e:	5aea      	ldrh	r2, [r5, r3]
 8004390:	18aa      	adds	r2, r5, r2
 8004392:	7823      	ldrb	r3, [r4, #0]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	189b      	adds	r3, r3, r2
 8004398:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <USB_EPStartXfer+0x2ec>)
 800439a:	4694      	mov	ip, r2
 800439c:	4463      	add	r3, ip
 800439e:	b2b2      	uxth	r2, r6
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	e7ec      	b.n	800437e <USB_EPStartXfer+0x256>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043a4:	7862      	ldrb	r2, [r4, #1]
 80043a6:	2a00      	cmp	r2, #0
 80043a8:	d13c      	bne.n	8004424 <USB_EPStartXfer+0x2fc>
 80043aa:	3250      	adds	r2, #80	; 0x50
 80043ac:	5aaa      	ldrh	r2, [r5, r2]
 80043ae:	18aa      	adds	r2, r5, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	189a      	adds	r2, r3, r2
 80043b4:	4b17      	ldr	r3, [pc, #92]	; (8004414 <USB_EPStartXfer+0x2ec>)
 80043b6:	469c      	mov	ip, r3
 80043b8:	4462      	add	r2, ip
 80043ba:	8813      	ldrh	r3, [r2, #0]
 80043bc:	059b      	lsls	r3, r3, #22
 80043be:	0d9b      	lsrs	r3, r3, #22
 80043c0:	8013      	strh	r3, [r2, #0]
 80043c2:	2e3e      	cmp	r6, #62	; 0x3e
 80043c4:	d90c      	bls.n	80043e0 <USB_EPStartXfer+0x2b8>
 80043c6:	0973      	lsrs	r3, r6, #5
 80043c8:	06f1      	lsls	r1, r6, #27
 80043ca:	d100      	bne.n	80043ce <USB_EPStartXfer+0x2a6>
 80043cc:	3b01      	subs	r3, #1
 80043ce:	8811      	ldrh	r1, [r2, #0]
 80043d0:	029b      	lsls	r3, r3, #10
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	4319      	orrs	r1, r3
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <USB_EPStartXfer+0x2e0>)
 80043d8:	430b      	orrs	r3, r1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]
 80043de:	e023      	b.n	8004428 <USB_EPStartXfer+0x300>
 80043e0:	2e00      	cmp	r6, #0
 80043e2:	d105      	bne.n	80043f0 <USB_EPStartXfer+0x2c8>
 80043e4:	8813      	ldrh	r3, [r2, #0]
 80043e6:	4908      	ldr	r1, [pc, #32]	; (8004408 <USB_EPStartXfer+0x2e0>)
 80043e8:	430b      	orrs	r3, r1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8013      	strh	r3, [r2, #0]
 80043ee:	e01b      	b.n	8004428 <USB_EPStartXfer+0x300>
 80043f0:	0873      	lsrs	r3, r6, #1
 80043f2:	07f1      	lsls	r1, r6, #31
 80043f4:	d500      	bpl.n	80043f8 <USB_EPStartXfer+0x2d0>
 80043f6:	3301      	adds	r3, #1
 80043f8:	8811      	ldrh	r1, [r2, #0]
 80043fa:	029b      	lsls	r3, r3, #10
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	430b      	orrs	r3, r1
 8004400:	8013      	strh	r3, [r2, #0]
 8004402:	e011      	b.n	8004428 <USB_EPStartXfer+0x300>
 8004404:	00000406 	.word	0x00000406
 8004408:	ffff8000 	.word	0xffff8000
 800440c:	ffffbf8f 	.word	0xffffbf8f
 8004410:	ffff8080 	.word	0xffff8080
 8004414:	00000402 	.word	0x00000402
 8004418:	ffff8fbf 	.word	0xffff8fbf
 800441c:	ffff8f8f 	.word	0xffff8f8f
 8004420:	ffff8180 	.word	0xffff8180
 8004424:	2a01      	cmp	r2, #1
 8004426:	d02d      	beq.n	8004484 <USB_EPStartXfer+0x35c>
            pmabuffer = ep->pmaaddr0;
 8004428:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800442a:	b2b3      	uxth	r3, r6
 800442c:	6961      	ldr	r1, [r4, #20]
 800442e:	0028      	movs	r0, r5
 8004430:	f7ff fe66 	bl	8004100 <USB_WritePMA>
            ep->xfer_buff += len;
 8004434:	6963      	ldr	r3, [r4, #20]
 8004436:	199b      	adds	r3, r3, r6
 8004438:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800443a:	6a23      	ldr	r3, [r4, #32]
 800443c:	6922      	ldr	r2, [r4, #16]
 800443e:	4293      	cmp	r3, r2
 8004440:	d92b      	bls.n	800449a <USB_EPStartXfer+0x372>
              ep->xfer_len_db -= len;
 8004442:	1b9b      	subs	r3, r3, r6
 8004444:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004446:	7863      	ldrb	r3, [r4, #1]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d13c      	bne.n	80044c6 <USB_EPStartXfer+0x39e>
 800444c:	3350      	adds	r3, #80	; 0x50
 800444e:	5aea      	ldrh	r2, [r5, r3]
 8004450:	18aa      	adds	r2, r5, r2
 8004452:	7823      	ldrb	r3, [r4, #0]
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	189b      	adds	r3, r3, r2
 8004458:	4ac0      	ldr	r2, [pc, #768]	; (800475c <USB_EPStartXfer+0x634>)
 800445a:	4694      	mov	ip, r2
 800445c:	4463      	add	r3, ip
 800445e:	881a      	ldrh	r2, [r3, #0]
 8004460:	0592      	lsls	r2, r2, #22
 8004462:	0d92      	lsrs	r2, r2, #22
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	2e3e      	cmp	r6, #62	; 0x3e
 8004468:	d91b      	bls.n	80044a2 <USB_EPStartXfer+0x37a>
 800446a:	0972      	lsrs	r2, r6, #5
 800446c:	06f1      	lsls	r1, r6, #27
 800446e:	d100      	bne.n	8004472 <USB_EPStartXfer+0x34a>
 8004470:	3a01      	subs	r2, #1
 8004472:	8819      	ldrh	r1, [r3, #0]
 8004474:	0292      	lsls	r2, r2, #10
 8004476:	b292      	uxth	r2, r2
 8004478:	4311      	orrs	r1, r2
 800447a:	4ab9      	ldr	r2, [pc, #740]	; (8004760 <USB_EPStartXfer+0x638>)
 800447c:	430a      	orrs	r2, r1
 800447e:	b292      	uxth	r2, r2
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	e022      	b.n	80044ca <USB_EPStartXfer+0x3a2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004484:	324f      	adds	r2, #79	; 0x4f
 8004486:	5aaa      	ldrh	r2, [r5, r2]
 8004488:	18aa      	adds	r2, r5, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	189b      	adds	r3, r3, r2
 800448e:	4ab5      	ldr	r2, [pc, #724]	; (8004764 <USB_EPStartXfer+0x63c>)
 8004490:	4694      	mov	ip, r2
 8004492:	4463      	add	r3, ip
 8004494:	b2b2      	uxth	r2, r6
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	e7c6      	b.n	8004428 <USB_EPStartXfer+0x300>
              ep->xfer_len_db = 0U;
 800449a:	2200      	movs	r2, #0
 800449c:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800449e:	001e      	movs	r6, r3
 80044a0:	e7d1      	b.n	8004446 <USB_EPStartXfer+0x31e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044a2:	2e00      	cmp	r6, #0
 80044a4:	d105      	bne.n	80044b2 <USB_EPStartXfer+0x38a>
 80044a6:	881a      	ldrh	r2, [r3, #0]
 80044a8:	49ad      	ldr	r1, [pc, #692]	; (8004760 <USB_EPStartXfer+0x638>)
 80044aa:	430a      	orrs	r2, r1
 80044ac:	b292      	uxth	r2, r2
 80044ae:	801a      	strh	r2, [r3, #0]
 80044b0:	e00b      	b.n	80044ca <USB_EPStartXfer+0x3a2>
 80044b2:	0872      	lsrs	r2, r6, #1
 80044b4:	07f1      	lsls	r1, r6, #31
 80044b6:	d500      	bpl.n	80044ba <USB_EPStartXfer+0x392>
 80044b8:	3201      	adds	r2, #1
 80044ba:	8819      	ldrh	r1, [r3, #0]
 80044bc:	0292      	lsls	r2, r2, #10
 80044be:	b292      	uxth	r2, r2
 80044c0:	430a      	orrs	r2, r1
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	e001      	b.n	80044ca <USB_EPStartXfer+0x3a2>
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d006      	beq.n	80044d8 <USB_EPStartXfer+0x3b0>
            pmabuffer = ep->pmaaddr1;
 80044ca:	8962      	ldrh	r2, [r4, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044cc:	b2b3      	uxth	r3, r6
 80044ce:	6961      	ldr	r1, [r4, #20]
 80044d0:	0028      	movs	r0, r5
 80044d2:	f7ff fe15 	bl	8004100 <USB_WritePMA>
 80044d6:	e6a8      	b.n	800422a <USB_EPStartXfer+0x102>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044d8:	334f      	adds	r3, #79	; 0x4f
 80044da:	5aea      	ldrh	r2, [r5, r3]
 80044dc:	18aa      	adds	r2, r5, r2
 80044de:	7823      	ldrb	r3, [r4, #0]
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	4a9d      	ldr	r2, [pc, #628]	; (800475c <USB_EPStartXfer+0x634>)
 80044e6:	4694      	mov	ip, r2
 80044e8:	4463      	add	r3, ip
 80044ea:	b2b2      	uxth	r2, r6
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	e7ec      	b.n	80044ca <USB_EPStartXfer+0x3a2>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80044f0:	7822      	ldrb	r2, [r4, #0]
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	18aa      	adds	r2, r5, r2
 80044f6:	8810      	ldrh	r0, [r2, #0]
 80044f8:	499b      	ldr	r1, [pc, #620]	; (8004768 <USB_EPStartXfer+0x640>)
 80044fa:	4008      	ands	r0, r1
 80044fc:	499b      	ldr	r1, [pc, #620]	; (800476c <USB_EPStartXfer+0x644>)
 80044fe:	4301      	orrs	r1, r0
 8004500:	b289      	uxth	r1, r1
 8004502:	8011      	strh	r1, [r2, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004504:	2250      	movs	r2, #80	; 0x50
 8004506:	5aa9      	ldrh	r1, [r5, r2]
 8004508:	1869      	adds	r1, r5, r1
 800450a:	7822      	ldrb	r2, [r4, #0]
 800450c:	00d2      	lsls	r2, r2, #3
 800450e:	1852      	adds	r2, r2, r1
 8004510:	4994      	ldr	r1, [pc, #592]	; (8004764 <USB_EPStartXfer+0x63c>)
 8004512:	468c      	mov	ip, r1
 8004514:	4462      	add	r2, ip
 8004516:	b29b      	uxth	r3, r3
 8004518:	8013      	strh	r3, [r2, #0]
          pmabuffer = ep->pmaaddr0;
 800451a:	8922      	ldrh	r2, [r4, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800451c:	6961      	ldr	r1, [r4, #20]
 800451e:	0028      	movs	r0, r5
 8004520:	f7ff fdee 	bl	8004100 <USB_WritePMA>
 8004524:	e681      	b.n	800422a <USB_EPStartXfer+0x102>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004526:	2e00      	cmp	r6, #0
 8004528:	d105      	bne.n	8004536 <USB_EPStartXfer+0x40e>
 800452a:	881a      	ldrh	r2, [r3, #0]
 800452c:	498c      	ldr	r1, [pc, #560]	; (8004760 <USB_EPStartXfer+0x638>)
 800452e:	430a      	orrs	r2, r1
 8004530:	b292      	uxth	r2, r2
 8004532:	801a      	strh	r2, [r3, #0]
 8004534:	e013      	b.n	800455e <USB_EPStartXfer+0x436>
 8004536:	0872      	lsrs	r2, r6, #1
 8004538:	07f1      	lsls	r1, r6, #31
 800453a:	d500      	bpl.n	800453e <USB_EPStartXfer+0x416>
 800453c:	3201      	adds	r2, #1
 800453e:	8819      	ldrh	r1, [r3, #0]
 8004540:	0292      	lsls	r2, r2, #10
 8004542:	b292      	uxth	r2, r2
 8004544:	430a      	orrs	r2, r1
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	e009      	b.n	800455e <USB_EPStartXfer+0x436>
 800454a:	2250      	movs	r2, #80	; 0x50
 800454c:	5aaa      	ldrh	r2, [r5, r2]
 800454e:	18aa      	adds	r2, r5, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	189b      	adds	r3, r3, r2
 8004554:	4a81      	ldr	r2, [pc, #516]	; (800475c <USB_EPStartXfer+0x634>)
 8004556:	4694      	mov	ip, r2
 8004558:	4463      	add	r3, ip
 800455a:	b2b2      	uxth	r2, r6
 800455c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800455e:	8962      	ldrh	r2, [r4, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004560:	b2b3      	uxth	r3, r6
 8004562:	6961      	ldr	r1, [r4, #20]
 8004564:	0028      	movs	r0, r5
 8004566:	f7ff fdcb 	bl	8004100 <USB_WritePMA>
 800456a:	e65e      	b.n	800422a <USB_EPStartXfer+0x102>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800456c:	2a00      	cmp	r2, #0
 800456e:	d12c      	bne.n	80045ca <USB_EPStartXfer+0x4a2>
 8004570:	3250      	adds	r2, #80	; 0x50
 8004572:	5aaa      	ldrh	r2, [r5, r2]
 8004574:	18aa      	adds	r2, r5, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	189b      	adds	r3, r3, r2
 800457a:	4a7a      	ldr	r2, [pc, #488]	; (8004764 <USB_EPStartXfer+0x63c>)
 800457c:	4694      	mov	ip, r2
 800457e:	4463      	add	r3, ip
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	0592      	lsls	r2, r2, #22
 8004584:	0d92      	lsrs	r2, r2, #22
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	2e3e      	cmp	r6, #62	; 0x3e
 800458a:	d90c      	bls.n	80045a6 <USB_EPStartXfer+0x47e>
 800458c:	0972      	lsrs	r2, r6, #5
 800458e:	06f1      	lsls	r1, r6, #27
 8004590:	d100      	bne.n	8004594 <USB_EPStartXfer+0x46c>
 8004592:	3a01      	subs	r2, #1
 8004594:	8819      	ldrh	r1, [r3, #0]
 8004596:	0292      	lsls	r2, r2, #10
 8004598:	b292      	uxth	r2, r2
 800459a:	4311      	orrs	r1, r2
 800459c:	4a70      	ldr	r2, [pc, #448]	; (8004760 <USB_EPStartXfer+0x638>)
 800459e:	430a      	orrs	r2, r1
 80045a0:	b292      	uxth	r2, r2
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	e01b      	b.n	80045de <USB_EPStartXfer+0x4b6>
 80045a6:	2e00      	cmp	r6, #0
 80045a8:	d105      	bne.n	80045b6 <USB_EPStartXfer+0x48e>
 80045aa:	881a      	ldrh	r2, [r3, #0]
 80045ac:	496c      	ldr	r1, [pc, #432]	; (8004760 <USB_EPStartXfer+0x638>)
 80045ae:	430a      	orrs	r2, r1
 80045b0:	b292      	uxth	r2, r2
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	e013      	b.n	80045de <USB_EPStartXfer+0x4b6>
 80045b6:	0872      	lsrs	r2, r6, #1
 80045b8:	07f1      	lsls	r1, r6, #31
 80045ba:	d500      	bpl.n	80045be <USB_EPStartXfer+0x496>
 80045bc:	3201      	adds	r2, #1
 80045be:	8819      	ldrh	r1, [r3, #0]
 80045c0:	0292      	lsls	r2, r2, #10
 80045c2:	b292      	uxth	r2, r2
 80045c4:	430a      	orrs	r2, r1
 80045c6:	801a      	strh	r2, [r3, #0]
 80045c8:	e009      	b.n	80045de <USB_EPStartXfer+0x4b6>
 80045ca:	2250      	movs	r2, #80	; 0x50
 80045cc:	5aaa      	ldrh	r2, [r5, r2]
 80045ce:	18aa      	adds	r2, r5, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	189b      	adds	r3, r3, r2
 80045d4:	4a63      	ldr	r2, [pc, #396]	; (8004764 <USB_EPStartXfer+0x63c>)
 80045d6:	4694      	mov	ip, r2
 80045d8:	4463      	add	r3, ip
 80045da:	b2b2      	uxth	r2, r6
 80045dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80045de:	8922      	ldrh	r2, [r4, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045e0:	b2b3      	uxth	r3, r6
 80045e2:	6961      	ldr	r1, [r4, #20]
 80045e4:	0028      	movs	r0, r5
 80045e6:	f7ff fd8b 	bl	8004100 <USB_WritePMA>
 80045ea:	e61e      	b.n	800422a <USB_EPStartXfer+0x102>
        ep->xfer_len = 0U;
 80045ec:	2200      	movs	r2, #0
 80045ee:	61a2      	str	r2, [r4, #24]
        len = ep->xfer_len;
 80045f0:	0019      	movs	r1, r3
 80045f2:	e5aa      	b.n	800414a <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80045f4:	2900      	cmp	r1, #0
 80045f6:	d105      	bne.n	8004604 <USB_EPStartXfer+0x4dc>
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	4959      	ldr	r1, [pc, #356]	; (8004760 <USB_EPStartXfer+0x638>)
 80045fc:	430a      	orrs	r2, r1
 80045fe:	b292      	uxth	r2, r2
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e5be      	b.n	8004182 <USB_EPStartXfer+0x5a>
 8004604:	084a      	lsrs	r2, r1, #1
 8004606:	07c9      	lsls	r1, r1, #31
 8004608:	d500      	bpl.n	800460c <USB_EPStartXfer+0x4e4>
 800460a:	3201      	adds	r2, #1
 800460c:	8819      	ldrh	r1, [r3, #0]
 800460e:	0292      	lsls	r2, r2, #10
 8004610:	b292      	uxth	r2, r2
 8004612:	430a      	orrs	r2, r1
 8004614:	801a      	strh	r2, [r3, #0]
 8004616:	e5b4      	b.n	8004182 <USB_EPStartXfer+0x5a>
      if (ep->type == EP_TYPE_BULK)
 8004618:	78cb      	ldrb	r3, [r1, #3]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d048      	beq.n	80046b0 <USB_EPStartXfer+0x588>
      else if (ep->type == EP_TYPE_ISOC)
 800461e:	2b01      	cmp	r3, #1
 8004620:	d000      	beq.n	8004624 <USB_EPStartXfer+0x4fc>
 8004622:	e10b      	b.n	800483c <USB_EPStartXfer+0x714>
        if (ep->xfer_len > ep->maxpacket)
 8004624:	6989      	ldr	r1, [r1, #24]
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	4299      	cmp	r1, r3
 800462a:	d800      	bhi.n	800462e <USB_EPStartXfer+0x506>
 800462c:	e0cf      	b.n	80047ce <USB_EPStartXfer+0x6a6>
          ep->xfer_len -= len;
 800462e:	1ac9      	subs	r1, r1, r3
 8004630:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004632:	2a00      	cmp	r2, #0
 8004634:	d11b      	bne.n	800466e <USB_EPStartXfer+0x546>
 8004636:	3250      	adds	r2, #80	; 0x50
 8004638:	5aa9      	ldrh	r1, [r5, r2]
 800463a:	1869      	adds	r1, r5, r1
 800463c:	7822      	ldrb	r2, [r4, #0]
 800463e:	00d2      	lsls	r2, r2, #3
 8004640:	1852      	adds	r2, r2, r1
 8004642:	4948      	ldr	r1, [pc, #288]	; (8004764 <USB_EPStartXfer+0x63c>)
 8004644:	468c      	mov	ip, r1
 8004646:	4462      	add	r2, ip
 8004648:	8811      	ldrh	r1, [r2, #0]
 800464a:	0589      	lsls	r1, r1, #22
 800464c:	0d89      	lsrs	r1, r1, #22
 800464e:	8011      	strh	r1, [r2, #0]
 8004650:	2b3e      	cmp	r3, #62	; 0x3e
 8004652:	d800      	bhi.n	8004656 <USB_EPStartXfer+0x52e>
 8004654:	e0bf      	b.n	80047d6 <USB_EPStartXfer+0x6ae>
 8004656:	0959      	lsrs	r1, r3, #5
 8004658:	06d8      	lsls	r0, r3, #27
 800465a:	d100      	bne.n	800465e <USB_EPStartXfer+0x536>
 800465c:	3901      	subs	r1, #1
 800465e:	8810      	ldrh	r0, [r2, #0]
 8004660:	0289      	lsls	r1, r1, #10
 8004662:	b289      	uxth	r1, r1
 8004664:	4308      	orrs	r0, r1
 8004666:	493e      	ldr	r1, [pc, #248]	; (8004760 <USB_EPStartXfer+0x638>)
 8004668:	4301      	orrs	r1, r0
 800466a:	b289      	uxth	r1, r1
 800466c:	8011      	strh	r1, [r2, #0]
 800466e:	7862      	ldrb	r2, [r4, #1]
 8004670:	2a00      	cmp	r2, #0
 8004672:	d000      	beq.n	8004676 <USB_EPStartXfer+0x54e>
 8004674:	e0d3      	b.n	800481e <USB_EPStartXfer+0x6f6>
 8004676:	3250      	adds	r2, #80	; 0x50
 8004678:	5aa9      	ldrh	r1, [r5, r2]
 800467a:	1869      	adds	r1, r5, r1
 800467c:	7822      	ldrb	r2, [r4, #0]
 800467e:	00d2      	lsls	r2, r2, #3
 8004680:	1852      	adds	r2, r2, r1
 8004682:	4936      	ldr	r1, [pc, #216]	; (800475c <USB_EPStartXfer+0x634>)
 8004684:	468c      	mov	ip, r1
 8004686:	4462      	add	r2, ip
 8004688:	8811      	ldrh	r1, [r2, #0]
 800468a:	0589      	lsls	r1, r1, #22
 800468c:	0d89      	lsrs	r1, r1, #22
 800468e:	8011      	strh	r1, [r2, #0]
 8004690:	2b3e      	cmp	r3, #62	; 0x3e
 8004692:	d800      	bhi.n	8004696 <USB_EPStartXfer+0x56e>
 8004694:	e0b1      	b.n	80047fa <USB_EPStartXfer+0x6d2>
 8004696:	0959      	lsrs	r1, r3, #5
 8004698:	06db      	lsls	r3, r3, #27
 800469a:	d100      	bne.n	800469e <USB_EPStartXfer+0x576>
 800469c:	3901      	subs	r1, #1
 800469e:	8813      	ldrh	r3, [r2, #0]
 80046a0:	0289      	lsls	r1, r1, #10
 80046a2:	b289      	uxth	r1, r1
 80046a4:	4319      	orrs	r1, r3
 80046a6:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <USB_EPStartXfer+0x638>)
 80046a8:	430b      	orrs	r3, r1
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	8013      	strh	r3, [r2, #0]
 80046ae:	e568      	b.n	8004182 <USB_EPStartXfer+0x5a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80046b0:	2a00      	cmp	r2, #0
 80046b2:	d11a      	bne.n	80046ea <USB_EPStartXfer+0x5c2>
 80046b4:	334e      	adds	r3, #78	; 0x4e
 80046b6:	5ac2      	ldrh	r2, [r0, r3]
 80046b8:	1882      	adds	r2, r0, r2
 80046ba:	780b      	ldrb	r3, [r1, #0]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	4a28      	ldr	r2, [pc, #160]	; (8004764 <USB_EPStartXfer+0x63c>)
 80046c2:	1899      	adds	r1, r3, r2
 80046c4:	880b      	ldrh	r3, [r1, #0]
 80046c6:	059b      	lsls	r3, r3, #22
 80046c8:	0d9b      	lsrs	r3, r3, #22
 80046ca:	800b      	strh	r3, [r1, #0]
 80046cc:	6922      	ldr	r2, [r4, #16]
 80046ce:	2a3e      	cmp	r2, #62	; 0x3e
 80046d0:	d92a      	bls.n	8004728 <USB_EPStartXfer+0x600>
 80046d2:	0953      	lsrs	r3, r2, #5
 80046d4:	06d2      	lsls	r2, r2, #27
 80046d6:	d100      	bne.n	80046da <USB_EPStartXfer+0x5b2>
 80046d8:	3b01      	subs	r3, #1
 80046da:	880a      	ldrh	r2, [r1, #0]
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	b29b      	uxth	r3, r3
 80046e0:	431a      	orrs	r2, r3
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <USB_EPStartXfer+0x638>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	800b      	strh	r3, [r1, #0]
 80046ea:	7863      	ldrb	r3, [r4, #1]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d149      	bne.n	8004784 <USB_EPStartXfer+0x65c>
 80046f0:	3350      	adds	r3, #80	; 0x50
 80046f2:	5aea      	ldrh	r2, [r5, r3]
 80046f4:	18aa      	adds	r2, r5, r2
 80046f6:	7823      	ldrb	r3, [r4, #0]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	4a17      	ldr	r2, [pc, #92]	; (800475c <USB_EPStartXfer+0x634>)
 80046fe:	1899      	adds	r1, r3, r2
 8004700:	880b      	ldrh	r3, [r1, #0]
 8004702:	059b      	lsls	r3, r3, #22
 8004704:	0d9b      	lsrs	r3, r3, #22
 8004706:	800b      	strh	r3, [r1, #0]
 8004708:	6922      	ldr	r2, [r4, #16]
 800470a:	2a3e      	cmp	r2, #62	; 0x3e
 800470c:	d91e      	bls.n	800474c <USB_EPStartXfer+0x624>
 800470e:	0953      	lsrs	r3, r2, #5
 8004710:	06d2      	lsls	r2, r2, #27
 8004712:	d100      	bne.n	8004716 <USB_EPStartXfer+0x5ee>
 8004714:	3b01      	subs	r3, #1
 8004716:	880a      	ldrh	r2, [r1, #0]
 8004718:	029b      	lsls	r3, r3, #10
 800471a:	b29b      	uxth	r3, r3
 800471c:	431a      	orrs	r2, r3
 800471e:	4b10      	ldr	r3, [pc, #64]	; (8004760 <USB_EPStartXfer+0x638>)
 8004720:	4313      	orrs	r3, r2
 8004722:	b29b      	uxth	r3, r3
 8004724:	800b      	strh	r3, [r1, #0]
 8004726:	e02f      	b.n	8004788 <USB_EPStartXfer+0x660>
 8004728:	2a00      	cmp	r2, #0
 800472a:	d105      	bne.n	8004738 <USB_EPStartXfer+0x610>
 800472c:	880b      	ldrh	r3, [r1, #0]
 800472e:	4a0c      	ldr	r2, [pc, #48]	; (8004760 <USB_EPStartXfer+0x638>)
 8004730:	4313      	orrs	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	800b      	strh	r3, [r1, #0]
 8004736:	e7d8      	b.n	80046ea <USB_EPStartXfer+0x5c2>
 8004738:	0853      	lsrs	r3, r2, #1
 800473a:	07d2      	lsls	r2, r2, #31
 800473c:	d500      	bpl.n	8004740 <USB_EPStartXfer+0x618>
 800473e:	3301      	adds	r3, #1
 8004740:	880a      	ldrh	r2, [r1, #0]
 8004742:	029b      	lsls	r3, r3, #10
 8004744:	b29b      	uxth	r3, r3
 8004746:	4313      	orrs	r3, r2
 8004748:	800b      	strh	r3, [r1, #0]
 800474a:	e7ce      	b.n	80046ea <USB_EPStartXfer+0x5c2>
 800474c:	2a00      	cmp	r2, #0
 800474e:	d10f      	bne.n	8004770 <USB_EPStartXfer+0x648>
 8004750:	880b      	ldrh	r3, [r1, #0]
 8004752:	4a03      	ldr	r2, [pc, #12]	; (8004760 <USB_EPStartXfer+0x638>)
 8004754:	4313      	orrs	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	800b      	strh	r3, [r1, #0]
 800475a:	e015      	b.n	8004788 <USB_EPStartXfer+0x660>
 800475c:	00000406 	.word	0x00000406
 8004760:	ffff8000 	.word	0xffff8000
 8004764:	00000402 	.word	0x00000402
 8004768:	ffff8e8f 	.word	0xffff8e8f
 800476c:	ffff8080 	.word	0xffff8080
 8004770:	0853      	lsrs	r3, r2, #1
 8004772:	07d2      	lsls	r2, r2, #31
 8004774:	d500      	bpl.n	8004778 <USB_EPStartXfer+0x650>
 8004776:	3301      	adds	r3, #1
 8004778:	880a      	ldrh	r2, [r1, #0]
 800477a:	029b      	lsls	r3, r3, #10
 800477c:	b29b      	uxth	r3, r3
 800477e:	4313      	orrs	r3, r2
 8004780:	800b      	strh	r3, [r1, #0]
 8004782:	e001      	b.n	8004788 <USB_EPStartXfer+0x660>
 8004784:	2b01      	cmp	r3, #1
 8004786:	d016      	beq.n	80047b6 <USB_EPStartXfer+0x68e>
        if (ep->xfer_count != 0U)
 8004788:	69e3      	ldr	r3, [r4, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d100      	bne.n	8004790 <USB_EPStartXfer+0x668>
 800478e:	e4f8      	b.n	8004182 <USB_EPStartXfer+0x5a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004790:	7823      	ldrb	r3, [r4, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	18eb      	adds	r3, r5, r3
 8004796:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004798:	4929      	ldr	r1, [pc, #164]	; (8004840 <USB_EPStartXfer+0x718>)
 800479a:	400a      	ands	r2, r1
 800479c:	428a      	cmp	r2, r1
 800479e:	d002      	beq.n	80047a6 <USB_EPStartXfer+0x67e>
 80047a0:	2a00      	cmp	r2, #0
 80047a2:	d000      	beq.n	80047a6 <USB_EPStartXfer+0x67e>
 80047a4:	e4ed      	b.n	8004182 <USB_EPStartXfer+0x5a>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80047a6:	8819      	ldrh	r1, [r3, #0]
 80047a8:	4a26      	ldr	r2, [pc, #152]	; (8004844 <USB_EPStartXfer+0x71c>)
 80047aa:	4011      	ands	r1, r2
 80047ac:	4a26      	ldr	r2, [pc, #152]	; (8004848 <USB_EPStartXfer+0x720>)
 80047ae:	430a      	orrs	r2, r1
 80047b0:	b292      	uxth	r2, r2
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	e4e5      	b.n	8004182 <USB_EPStartXfer+0x5a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80047b6:	334f      	adds	r3, #79	; 0x4f
 80047b8:	5aea      	ldrh	r2, [r5, r3]
 80047ba:	18aa      	adds	r2, r5, r2
 80047bc:	7823      	ldrb	r3, [r4, #0]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	4a22      	ldr	r2, [pc, #136]	; (800484c <USB_EPStartXfer+0x724>)
 80047c4:	4694      	mov	ip, r2
 80047c6:	4463      	add	r3, ip
 80047c8:	8a22      	ldrh	r2, [r4, #16]
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	e7dc      	b.n	8004788 <USB_EPStartXfer+0x660>
          ep->xfer_len = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 80047d2:	000b      	movs	r3, r1
 80047d4:	e72d      	b.n	8004632 <USB_EPStartXfer+0x50a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <USB_EPStartXfer+0x6be>
 80047da:	8811      	ldrh	r1, [r2, #0]
 80047dc:	481c      	ldr	r0, [pc, #112]	; (8004850 <USB_EPStartXfer+0x728>)
 80047de:	4301      	orrs	r1, r0
 80047e0:	b289      	uxth	r1, r1
 80047e2:	8011      	strh	r1, [r2, #0]
 80047e4:	e743      	b.n	800466e <USB_EPStartXfer+0x546>
 80047e6:	0859      	lsrs	r1, r3, #1
 80047e8:	07d8      	lsls	r0, r3, #31
 80047ea:	d500      	bpl.n	80047ee <USB_EPStartXfer+0x6c6>
 80047ec:	3101      	adds	r1, #1
 80047ee:	8810      	ldrh	r0, [r2, #0]
 80047f0:	0289      	lsls	r1, r1, #10
 80047f2:	b289      	uxth	r1, r1
 80047f4:	4301      	orrs	r1, r0
 80047f6:	8011      	strh	r1, [r2, #0]
 80047f8:	e739      	b.n	800466e <USB_EPStartXfer+0x546>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d105      	bne.n	800480a <USB_EPStartXfer+0x6e2>
 80047fe:	8813      	ldrh	r3, [r2, #0]
 8004800:	4913      	ldr	r1, [pc, #76]	; (8004850 <USB_EPStartXfer+0x728>)
 8004802:	430b      	orrs	r3, r1
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]
 8004808:	e4bb      	b.n	8004182 <USB_EPStartXfer+0x5a>
 800480a:	0859      	lsrs	r1, r3, #1
 800480c:	07db      	lsls	r3, r3, #31
 800480e:	d500      	bpl.n	8004812 <USB_EPStartXfer+0x6ea>
 8004810:	3101      	adds	r1, #1
 8004812:	8813      	ldrh	r3, [r2, #0]
 8004814:	0289      	lsls	r1, r1, #10
 8004816:	b289      	uxth	r1, r1
 8004818:	430b      	orrs	r3, r1
 800481a:	8013      	strh	r3, [r2, #0]
 800481c:	e4b1      	b.n	8004182 <USB_EPStartXfer+0x5a>
 800481e:	2a01      	cmp	r2, #1
 8004820:	d000      	beq.n	8004824 <USB_EPStartXfer+0x6fc>
 8004822:	e4ae      	b.n	8004182 <USB_EPStartXfer+0x5a>
 8004824:	324f      	adds	r2, #79	; 0x4f
 8004826:	5aa9      	ldrh	r1, [r5, r2]
 8004828:	1869      	adds	r1, r5, r1
 800482a:	7822      	ldrb	r2, [r4, #0]
 800482c:	00d2      	lsls	r2, r2, #3
 800482e:	1852      	adds	r2, r2, r1
 8004830:	4906      	ldr	r1, [pc, #24]	; (800484c <USB_EPStartXfer+0x724>)
 8004832:	468c      	mov	ip, r1
 8004834:	4462      	add	r2, ip
 8004836:	b29b      	uxth	r3, r3
 8004838:	8013      	strh	r3, [r2, #0]
 800483a:	e4a2      	b.n	8004182 <USB_EPStartXfer+0x5a>
        return HAL_ERROR;
 800483c:	2001      	movs	r0, #1
 800483e:	e4ae      	b.n	800419e <USB_EPStartXfer+0x76>
 8004840:	00004040 	.word	0x00004040
 8004844:	ffff8f8f 	.word	0xffff8f8f
 8004848:	ffff80c0 	.word	0xffff80c0
 800484c:	00000406 	.word	0x00000406
 8004850:	ffff8000 	.word	0xffff8000

08004854 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004854:	b530      	push	{r4, r5, lr}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004856:	085d      	lsrs	r5, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004858:	1812      	adds	r2, r2, r0
 800485a:	2080      	movs	r0, #128	; 0x80
 800485c:	00c0      	lsls	r0, r0, #3
 800485e:	4684      	mov	ip, r0
 8004860:	4462      	add	r2, ip

  for (count = n; count != 0U; count--)
 8004862:	e006      	b.n	8004872 <USB_ReadPMA+0x1e>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004864:	8814      	ldrh	r4, [r2, #0]
    pdwVal++;
 8004866:	3202      	adds	r2, #2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004868:	700c      	strb	r4, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800486a:	0a24      	lsrs	r4, r4, #8
 800486c:	704c      	strb	r4, [r1, #1]
    pBuf++;
 800486e:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8004870:	3d01      	subs	r5, #1
 8004872:	2d00      	cmp	r5, #0
 8004874:	d1f6      	bne.n	8004864 <USB_ReadPMA+0x10>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004876:	07db      	lsls	r3, r3, #31
 8004878:	d501      	bpl.n	800487e <USB_ReadPMA+0x2a>
  {
    RdVal = *pdwVal;
 800487a:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800487c:	700b      	strb	r3, [r1, #0]
  }
}
 800487e:	bd30      	pop	{r4, r5, pc}

08004880 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004880:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004882:	23ae      	movs	r3, #174	; 0xae
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	58c4      	ldr	r4, [r0, r3]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004888:	3304      	adds	r3, #4
 800488a:	58c3      	ldr	r3, [r0, r3]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <USBD_CDC_EP0_RxReady+0x2c>
 8004890:	2280      	movs	r2, #128	; 0x80
 8004892:	0092      	lsls	r2, r2, #2
 8004894:	5ca0      	ldrb	r0, [r4, r2]
 8004896:	28ff      	cmp	r0, #255	; 0xff
 8004898:	d008      	beq.n	80048ac <USBD_CDC_EP0_RxReady+0x2c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <USBD_CDC_EP0_RxReady+0x30>)
 800489e:	5ca2      	ldrb	r2, [r4, r2]
 80048a0:	0021      	movs	r1, r4
 80048a2:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	22ff      	movs	r2, #255	; 0xff
 80048aa:	54e2      	strb	r2, [r4, r3]

  }
  return USBD_OK;
}
 80048ac:	2000      	movs	r0, #0
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	00000201 	.word	0x00000201

080048b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80048b4:	2343      	movs	r3, #67	; 0x43
 80048b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
 80048b8:	4800      	ldr	r0, [pc, #0]	; (80048bc <USBD_CDC_GetFSCfgDesc+0x8>)
}
 80048ba:	4770      	bx	lr
 80048bc:	20000044 	.word	0x20000044

080048c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80048c0:	2343      	movs	r3, #67	; 0x43
 80048c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
 80048c4:	4800      	ldr	r0, [pc, #0]	; (80048c8 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 80048c6:	4770      	bx	lr
 80048c8:	20000088 	.word	0x20000088

080048cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80048cc:	2343      	movs	r3, #67	; 0x43
 80048ce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80048d0:	4800      	ldr	r0, [pc, #0]	; (80048d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
}
 80048d2:	4770      	bx	lr
 80048d4:	200000d8 	.word	0x200000d8

080048d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80048d8:	230a      	movs	r3, #10
 80048da:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80048dc:	4800      	ldr	r0, [pc, #0]	; (80048e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 80048de:	4770      	bx	lr
 80048e0:	200000cc 	.word	0x200000cc

080048e4 <USBD_CDC_DataOut>:
{
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048e8:	25ae      	movs	r5, #174	; 0xae
 80048ea:	00ad      	lsls	r5, r5, #2
 80048ec:	5946      	ldr	r6, [r0, r5]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80048ee:	f001 f937 	bl	8005b60 <USBD_LL_GetRxDataSize>
 80048f2:	2383      	movs	r3, #131	; 0x83
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	50f0      	str	r0, [r6, r3]
  if (pdev->pClassData != NULL)
 80048f8:	5963      	ldr	r3, [r4, r5]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80048fe:	23af      	movs	r3, #175	; 0xaf
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	58e3      	ldr	r3, [r4, r3]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2283      	movs	r2, #131	; 0x83
 8004908:	0092      	lsls	r2, r2, #2
 800490a:	18b1      	adds	r1, r6, r2
 800490c:	3a08      	subs	r2, #8
 800490e:	58b0      	ldr	r0, [r6, r2]
 8004910:	4798      	blx	r3
    return USBD_OK;
 8004912:	2000      	movs	r0, #0
}
 8004914:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004916:	2002      	movs	r0, #2
 8004918:	e7fc      	b.n	8004914 <USBD_CDC_DataOut+0x30>

0800491a <USBD_CDC_DataIn>:
{
 800491a:	b570      	push	{r4, r5, r6, lr}
 800491c:	0004      	movs	r4, r0
 800491e:	000d      	movs	r5, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004920:	23ae      	movs	r3, #174	; 0xae
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	58c6      	ldr	r6, [r0, r3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004926:	3308      	adds	r3, #8
 8004928:	58c2      	ldr	r2, [r0, r3]
  if (pdev->pClassData != NULL)
 800492a:	2e00      	cmp	r6, #0
 800492c:	d021      	beq.n	8004972 <USBD_CDC_DataIn+0x58>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800492e:	008b      	lsls	r3, r1, #2
 8004930:	185b      	adds	r3, r3, r1
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	18c3      	adds	r3, r0, r3
 8004936:	69d8      	ldr	r0, [r3, #28]
 8004938:	2800      	cmp	r0, #0
 800493a:	d008      	beq.n	800494e <USBD_CDC_DataIn+0x34>
 800493c:	008b      	lsls	r3, r1, #2
 800493e:	185b      	adds	r3, r3, r1
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	18d2      	adds	r2, r2, r3
 8004944:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004946:	f7fb fc65 	bl	8000214 <__aeabi_uidivmod>
 800494a:	2900      	cmp	r1, #0
 800494c:	d005      	beq.n	800495a <USBD_CDC_DataIn+0x40>
      hcdc->TxState = 0U;
 800494e:	2385      	movs	r3, #133	; 0x85
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	2200      	movs	r2, #0
 8004954:	50f2      	str	r2, [r6, r3]
    return USBD_OK;
 8004956:	2000      	movs	r0, #0
}
 8004958:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800495a:	00ab      	lsls	r3, r5, #2
 800495c:	195b      	adds	r3, r3, r5
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	18e3      	adds	r3, r4, r3
 8004962:	2200      	movs	r2, #0
 8004964:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004966:	2300      	movs	r3, #0
 8004968:	0029      	movs	r1, r5
 800496a:	0020      	movs	r0, r4
 800496c:	f001 f8e6 	bl	8005b3c <USBD_LL_Transmit>
 8004970:	e7f1      	b.n	8004956 <USBD_CDC_DataIn+0x3c>
    return USBD_FAIL;
 8004972:	2002      	movs	r0, #2
 8004974:	e7f0      	b.n	8004958 <USBD_CDC_DataIn+0x3e>
	...

08004978 <USBD_CDC_Setup>:
{
 8004978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497a:	b083      	sub	sp, #12
 800497c:	0005      	movs	r5, r0
 800497e:	000c      	movs	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004980:	23ae      	movs	r3, #174	; 0xae
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	466a      	mov	r2, sp
 800498a:	71d3      	strb	r3, [r2, #7]
  uint16_t status_info = 0U;
 800498c:	aa01      	add	r2, sp, #4
 800498e:	8013      	strh	r3, [r2, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004990:	780b      	ldrb	r3, [r1, #0]
 8004992:	2260      	movs	r2, #96	; 0x60
 8004994:	0016      	movs	r6, r2
 8004996:	401e      	ands	r6, r3
 8004998:	421a      	tst	r2, r3
 800499a:	d02b      	beq.n	80049f4 <USBD_CDC_Setup+0x7c>
 800499c:	2e20      	cmp	r6, #32
 800499e:	d15b      	bne.n	8004a58 <USBD_CDC_Setup+0xe0>
      if (req->wLength)
 80049a0:	88ca      	ldrh	r2, [r1, #6]
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d01d      	beq.n	80049e2 <USBD_CDC_Setup+0x6a>
        if (req->bmRequest & 0x80U)
 80049a6:	b25b      	sxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da0d      	bge.n	80049c8 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049ac:	23af      	movs	r3, #175	; 0xaf
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	58c3      	ldr	r3, [r0, r3]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	7848      	ldrb	r0, [r1, #1]
 80049b6:	0039      	movs	r1, r7
 80049b8:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80049ba:	88e2      	ldrh	r2, [r4, #6]
 80049bc:	0039      	movs	r1, r7
 80049be:	0028      	movs	r0, r5
 80049c0:	f000 fe45 	bl	800564e <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80049c4:	2600      	movs	r6, #0
 80049c6:	e04a      	b.n	8004a5e <USBD_CDC_Setup+0xe6>
          hcdc->CmdOpCode = req->bRequest;
 80049c8:	784a      	ldrb	r2, [r1, #1]
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	54fa      	strb	r2, [r7, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80049d0:	798a      	ldrb	r2, [r1, #6]
 80049d2:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <USBD_CDC_Setup+0xec>)
 80049d4:	54fa      	strb	r2, [r7, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80049d6:	88ca      	ldrh	r2, [r1, #6]
 80049d8:	0039      	movs	r1, r7
 80049da:	f000 fe4e 	bl	800567a <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80049de:	2600      	movs	r6, #0
 80049e0:	e03d      	b.n	8004a5e <USBD_CDC_Setup+0xe6>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049e2:	23af      	movs	r3, #175	; 0xaf
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	58c3      	ldr	r3, [r0, r3]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	7848      	ldrb	r0, [r1, #1]
 80049ec:	2200      	movs	r2, #0
 80049ee:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80049f0:	2600      	movs	r6, #0
 80049f2:	e034      	b.n	8004a5e <USBD_CDC_Setup+0xe6>
      switch (req->bRequest)
 80049f4:	784f      	ldrb	r7, [r1, #1]
 80049f6:	2f0a      	cmp	r7, #10
 80049f8:	d016      	beq.n	8004a28 <USBD_CDC_Setup+0xb0>
 80049fa:	2f0b      	cmp	r7, #11
 80049fc:	d023      	beq.n	8004a46 <USBD_CDC_Setup+0xce>
 80049fe:	2f00      	cmp	r7, #0
 8004a00:	d003      	beq.n	8004a0a <USBD_CDC_Setup+0x92>
          USBD_CtlError(pdev, req);
 8004a02:	f000 facf 	bl	8004fa4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a06:	2602      	movs	r6, #2
          break;
 8004a08:	e029      	b.n	8004a5e <USBD_CDC_Setup+0xe6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a0a:	23a7      	movs	r3, #167	; 0xa7
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	5cc3      	ldrb	r3, [r0, r3]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d003      	beq.n	8004a1c <USBD_CDC_Setup+0xa4>
            USBD_CtlError(pdev, req);
 8004a14:	f000 fac6 	bl	8004fa4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a18:	2602      	movs	r6, #2
 8004a1a:	e020      	b.n	8004a5e <USBD_CDC_Setup+0xe6>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	a901      	add	r1, sp, #4
 8004a20:	f000 fe15 	bl	800564e <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004a24:	003e      	movs	r6, r7
 8004a26:	e01a      	b.n	8004a5e <USBD_CDC_Setup+0xe6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a28:	23a7      	movs	r3, #167	; 0xa7
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	5cc3      	ldrb	r3, [r0, r3]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d003      	beq.n	8004a3a <USBD_CDC_Setup+0xc2>
            USBD_CtlError(pdev, req);
 8004a32:	f000 fab7 	bl	8004fa4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a36:	2602      	movs	r6, #2
 8004a38:	e011      	b.n	8004a5e <USBD_CDC_Setup+0xe6>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	466b      	mov	r3, sp
 8004a3e:	1dd9      	adds	r1, r3, #7
 8004a40:	f000 fe05 	bl	800564e <USBD_CtlSendData>
 8004a44:	e00b      	b.n	8004a5e <USBD_CDC_Setup+0xe6>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004a46:	23a7      	movs	r3, #167	; 0xa7
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	5cc3      	ldrb	r3, [r0, r3]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d006      	beq.n	8004a5e <USBD_CDC_Setup+0xe6>
            USBD_CtlError(pdev, req);
 8004a50:	f000 faa8 	bl	8004fa4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a54:	2602      	movs	r6, #2
 8004a56:	e002      	b.n	8004a5e <USBD_CDC_Setup+0xe6>
      USBD_CtlError(pdev, req);
 8004a58:	f000 faa4 	bl	8004fa4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a5c:	2602      	movs	r6, #2
}
 8004a5e:	0030      	movs	r0, r6
 8004a60:	b003      	add	sp, #12
 8004a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a64:	00000201 	.word	0x00000201

08004a68 <USBD_CDC_DeInit>:
{
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	0004      	movs	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004a6c:	2181      	movs	r1, #129	; 0x81
 8004a6e:	f001 f828 	bl	8005ac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004a72:	2500      	movs	r5, #0
 8004a74:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004a76:	2101      	movs	r1, #1
 8004a78:	0020      	movs	r0, r4
 8004a7a:	f001 f822 	bl	8005ac2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004a7e:	23b6      	movs	r3, #182	; 0xb6
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	50e5      	str	r5, [r4, r3]
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004a84:	2182      	movs	r1, #130	; 0x82
 8004a86:	0020      	movs	r0, r4
 8004a88:	f001 f81b 	bl	8005ac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004a8c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004a8e:	23ae      	movs	r3, #174	; 0xae
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	58e3      	ldr	r3, [r4, r3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <USBD_CDC_DeInit+0x48>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004a98:	23af      	movs	r3, #175	; 0xaf
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	58e3      	ldr	r3, [r4, r3]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004aa2:	25ae      	movs	r5, #174	; 0xae
 8004aa4:	00ad      	lsls	r5, r5, #2
 8004aa6:	5960      	ldr	r0, [r4, r5]
 8004aa8:	f001 f866 	bl	8005b78 <USBD_static_free>
    pdev->pClassData = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	5163      	str	r3, [r4, r5]
}
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}

08004ab4 <USBD_CDC_Init>:
{
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ab8:	7c03      	ldrb	r3, [r0, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d13a      	bne.n	8004b34 <USBD_CDC_Init+0x80>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004abe:	2680      	movs	r6, #128	; 0x80
 8004ac0:	00b6      	lsls	r6, r6, #2
 8004ac2:	0033      	movs	r3, r6
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	2181      	movs	r1, #129	; 0x81
 8004ac8:	f000 ffef 	bl	8005aaa <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004acc:	2501      	movs	r5, #1
 8004ace:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ad0:	0033      	movs	r3, r6
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	0020      	movs	r0, r4
 8004ad8:	f000 ffe7 	bl	8005aaa <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004adc:	23b6      	movs	r3, #182	; 0xb6
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	50e5      	str	r5, [r4, r3]
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	2182      	movs	r1, #130	; 0x82
 8004ae8:	0020      	movs	r0, r4
 8004aea:	f000 ffde 	bl	8005aaa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004aee:	2301      	movs	r3, #1
 8004af0:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004af2:	2087      	movs	r0, #135	; 0x87
 8004af4:	0080      	lsls	r0, r0, #2
 8004af6:	f001 f83b 	bl	8005b70 <USBD_static_malloc>
 8004afa:	0005      	movs	r5, r0
 8004afc:	23ae      	movs	r3, #174	; 0xae
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d032      	beq.n	8004b6c <USBD_CDC_Init+0xb8>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b06:	3304      	adds	r3, #4
 8004b08:	58e3      	ldr	r3, [r4, r3]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4798      	blx	r3
    hcdc->TxState = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2285      	movs	r2, #133	; 0x85
 8004b12:	0092      	lsls	r2, r2, #2
 8004b14:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 8004b16:	3204      	adds	r2, #4
 8004b18:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b1a:	7c26      	ldrb	r6, [r4, #16]
 8004b1c:	2e00      	cmp	r6, #0
 8004b1e:	d11a      	bne.n	8004b56 <USBD_CDC_Init+0xa2>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b20:	3380      	adds	r3, #128	; 0x80
 8004b22:	3a14      	subs	r2, #20
 8004b24:	58aa      	ldr	r2, [r5, r2]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	2101      	movs	r1, #1
 8004b2a:	0020      	movs	r0, r4
 8004b2c:	f001 f80f 	bl	8005b4e <USBD_LL_PrepareReceive>
}
 8004b30:	0030      	movs	r0, r6
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b34:	2340      	movs	r3, #64	; 0x40
 8004b36:	2202      	movs	r2, #2
 8004b38:	2181      	movs	r1, #129	; 0x81
 8004b3a:	f000 ffb6 	bl	8005aaa <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b3e:	2501      	movs	r5, #1
 8004b40:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b42:	2340      	movs	r3, #64	; 0x40
 8004b44:	2202      	movs	r2, #2
 8004b46:	2101      	movs	r1, #1
 8004b48:	0020      	movs	r0, r4
 8004b4a:	f000 ffae 	bl	8005aaa <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b4e:	23b6      	movs	r3, #182	; 0xb6
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	50e5      	str	r5, [r4, r3]
 8004b54:	e7c5      	b.n	8004ae2 <USBD_CDC_Init+0x2e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b56:	2381      	movs	r3, #129	; 0x81
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	58ea      	ldr	r2, [r5, r3]
 8004b5c:	3bc5      	subs	r3, #197	; 0xc5
 8004b5e:	3bff      	subs	r3, #255	; 0xff
 8004b60:	2101      	movs	r1, #1
 8004b62:	0020      	movs	r0, r4
 8004b64:	f000 fff3 	bl	8005b4e <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004b68:	2600      	movs	r6, #0
 8004b6a:	e7e1      	b.n	8004b30 <USBD_CDC_Init+0x7c>
    ret = 1U;
 8004b6c:	2601      	movs	r6, #1
 8004b6e:	e7df      	b.n	8004b30 <USBD_CDC_Init+0x7c>

08004b70 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004b70:	2900      	cmp	r1, #0
 8004b72:	d004      	beq.n	8004b7e <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 8004b74:	23af      	movs	r3, #175	; 0xaf
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 8004b7a:	2000      	movs	r0, #0
  }

  return ret;
}
 8004b7c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004b7e:	2002      	movs	r0, #2
 8004b80:	e7fc      	b.n	8004b7c <USBD_CDC_RegisterInterface+0xc>

08004b82 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b82:	23ae      	movs	r3, #174	; 0xae
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8004b88:	2082      	movs	r0, #130	; 0x82
 8004b8a:	0080      	lsls	r0, r0, #2
 8004b8c:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8004b8e:	2184      	movs	r1, #132	; 0x84
 8004b90:	0089      	lsls	r1, r1, #2
 8004b92:	505a      	str	r2, [r3, r1]

  return USBD_OK;
}
 8004b94:	2000      	movs	r0, #0
 8004b96:	4770      	bx	lr

08004b98 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b98:	23ae      	movs	r3, #174	; 0xae
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	58c2      	ldr	r2, [r0, r3]

  hcdc->RxBuffer = pbuff;
 8004b9e:	3bb4      	subs	r3, #180	; 0xb4
 8004ba0:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
}
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	4770      	bx	lr

08004ba6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ba6:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ba8:	23ae      	movs	r3, #174	; 0xae
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	58c2      	ldr	r2, [r0, r3]

  if (pdev->pClassData != NULL)
 8004bae:	2a00      	cmp	r2, #0
 8004bb0:	d016      	beq.n	8004be0 <USBD_CDC_TransmitPacket+0x3a>
  {
    if (hcdc->TxState == 0U)
 8004bb2:	3ba4      	subs	r3, #164	; 0xa4
 8004bb4:	58d3      	ldr	r3, [r2, r3]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <USBD_CDC_TransmitPacket+0x18>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004bba:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004bbc:	bd10      	pop	{r4, pc}
      hcdc->TxState = 1U;
 8004bbe:	2385      	movs	r3, #133	; 0x85
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	50d1      	str	r1, [r2, r3]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004bc6:	3b04      	subs	r3, #4
 8004bc8:	58d1      	ldr	r1, [r2, r3]
 8004bca:	6301      	str	r1, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004bcc:	5ad3      	ldrh	r3, [r2, r3]
 8004bce:	2182      	movs	r1, #130	; 0x82
 8004bd0:	0089      	lsls	r1, r1, #2
 8004bd2:	5852      	ldr	r2, [r2, r1]
 8004bd4:	3988      	subs	r1, #136	; 0x88
 8004bd6:	39ff      	subs	r1, #255	; 0xff
 8004bd8:	f000 ffb0 	bl	8005b3c <USBD_LL_Transmit>
      return USBD_OK;
 8004bdc:	2000      	movs	r0, #0
 8004bde:	e7ed      	b.n	8004bbc <USBD_CDC_TransmitPacket+0x16>
    return USBD_FAIL;
 8004be0:	2002      	movs	r0, #2
 8004be2:	e7eb      	b.n	8004bbc <USBD_CDC_TransmitPacket+0x16>

08004be4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004be4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004be6:	23ae      	movs	r3, #174	; 0xae
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	58c2      	ldr	r2, [r0, r3]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004bec:	2a00      	cmp	r2, #0
 8004bee:	d015      	beq.n	8004c1c <USBD_CDC_ReceivePacket+0x38>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bf0:	7c03      	ldrb	r3, [r0, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <USBD_CDC_ReceivePacket+0x26>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004bf6:	3380      	adds	r3, #128	; 0x80
 8004bf8:	2181      	movs	r1, #129	; 0x81
 8004bfa:	0089      	lsls	r1, r1, #2
 8004bfc:	5852      	ldr	r2, [r2, r1]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	2101      	movs	r1, #1
 8004c02:	f000 ffa4 	bl	8005b4e <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004c06:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004c08:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004c0a:	2381      	movs	r3, #129	; 0x81
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	58d2      	ldr	r2, [r2, r3]
 8004c10:	3bc5      	subs	r3, #197	; 0xc5
 8004c12:	3bff      	subs	r3, #255	; 0xff
 8004c14:	2101      	movs	r1, #1
 8004c16:	f000 ff9a 	bl	8005b4e <USBD_LL_PrepareReceive>
 8004c1a:	e7f4      	b.n	8004c06 <USBD_CDC_ReceivePacket+0x22>
    return USBD_FAIL;
 8004c1c:	2002      	movs	r0, #2
 8004c1e:	e7f3      	b.n	8004c08 <USBD_CDC_ReceivePacket+0x24>

08004c20 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c20:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d016      	beq.n	8004c54 <USBD_Init+0x34>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004c26:	23ad      	movs	r3, #173	; 0xad
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	58c3      	ldr	r3, [r0, r3]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <USBD_Init+0x18>
  {
    pdev->pClass = NULL;
 8004c30:	23ad      	movs	r3, #173	; 0xad
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	2400      	movs	r4, #0
 8004c36:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	d002      	beq.n	8004c42 <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 8004c3c:	23ac      	movs	r3, #172	; 0xac
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c42:	23a7      	movs	r3, #167	; 0xa7
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	2101      	movs	r1, #1
 8004c48:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8004c4a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004c4c:	f000 fee2 	bl	8005a14 <USBD_LL_Init>

  return USBD_OK;
 8004c50:	2000      	movs	r0, #0
}
 8004c52:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004c54:	2002      	movs	r0, #2
 8004c56:	e7fc      	b.n	8004c52 <USBD_Init+0x32>

08004c58 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004c58:	2900      	cmp	r1, #0
 8004c5a:	d004      	beq.n	8004c66 <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004c5c:	23ad      	movs	r3, #173	; 0xad
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8004c62:	2000      	movs	r0, #0
#endif
    status = USBD_FAIL;
  }

  return status;
}
 8004c64:	4770      	bx	lr
    status = USBD_FAIL;
 8004c66:	2002      	movs	r0, #2
 8004c68:	e7fc      	b.n	8004c64 <USBD_RegisterClass+0xc>

08004c6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c6a:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004c6c:	f000 ff14 	bl	8005a98 <USBD_LL_Start>

  return USBD_OK;
}
 8004c70:	2000      	movs	r0, #0
 8004c72:	bd10      	pop	{r4, pc}

08004c74 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c74:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004c76:	23ad      	movs	r3, #173	; 0xad
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	58c3      	ldr	r3, [r0, r3]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d006      	beq.n	8004c8e <USBD_SetClassConfig+0x1a>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4798      	blx	r3
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d100      	bne.n	8004c8a <USBD_SetClassConfig+0x16>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004c88:	bd10      	pop	{r4, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004c8a:	2002      	movs	r0, #2
 8004c8c:	e7fc      	b.n	8004c88 <USBD_SetClassConfig+0x14>
 8004c8e:	2002      	movs	r0, #2
 8004c90:	e7fa      	b.n	8004c88 <USBD_SetClassConfig+0x14>

08004c92 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c92:	b510      	push	{r4, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004c94:	23ad      	movs	r3, #173	; 0xad
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	58c3      	ldr	r3, [r0, r3]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4798      	blx	r3

  return USBD_OK;
}
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	bd10      	pop	{r4, pc}
	...

08004ca4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ca8:	23aa      	movs	r3, #170	; 0xaa
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	18c5      	adds	r5, r0, r3
 8004cae:	0028      	movs	r0, r5
 8004cb0:	f000 f964 	bl	8004f7c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004cb4:	23a5      	movs	r3, #165	; 0xa5
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	2201      	movs	r2, #1
 8004cba:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8004cbc:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <USBD_LL_SetupStage+0x60>)
 8004cbe:	5ae2      	ldrh	r2, [r4, r3]
 8004cc0:	3b16      	subs	r3, #22
 8004cc2:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8004cc4:	3310      	adds	r3, #16
 8004cc6:	5ce1      	ldrb	r1, [r4, r3]
 8004cc8:	231f      	movs	r3, #31
 8004cca:	400b      	ands	r3, r1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d00f      	beq.n	8004cf0 <USBD_LL_SetupStage+0x4c>
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d012      	beq.n	8004cfa <USBD_LL_SetupStage+0x56>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <USBD_LL_SetupStage+0x40>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004cd8:	237f      	movs	r3, #127	; 0x7f
 8004cda:	4399      	bics	r1, r3
 8004cdc:	0020      	movs	r0, r4
 8004cde:	f000 fef9 	bl	8005ad4 <USBD_LL_StallEP>
      break;
 8004ce2:	e003      	b.n	8004cec <USBD_LL_SetupStage+0x48>
      USBD_StdDevReq(pdev, &pdev->request);
 8004ce4:	0029      	movs	r1, r5
 8004ce6:	0020      	movs	r0, r4
 8004ce8:	f000 fb22 	bl	8005330 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004cec:	2000      	movs	r0, #0
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004cf0:	0029      	movs	r1, r5
 8004cf2:	0020      	movs	r0, r4
 8004cf4:	f000 fb52 	bl	800539c <USBD_StdItfReq>
      break;
 8004cf8:	e7f8      	b.n	8004cec <USBD_LL_SetupStage+0x48>
      USBD_StdEPReq(pdev, &pdev->request);
 8004cfa:	0029      	movs	r1, r5
 8004cfc:	0020      	movs	r0, r4
 8004cfe:	f000 fb80 	bl	8005402 <USBD_StdEPReq>
      break;
 8004d02:	e7f3      	b.n	8004cec <USBD_LL_SetupStage+0x48>
 8004d04:	000002ae 	.word	0x000002ae

08004d08 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	0005      	movs	r5, r0
 8004d0c:	000c      	movs	r4, r1
 8004d0e:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004d10:	2c00      	cmp	r4, #0
 8004d12:	d138      	bne.n	8004d86 <USBD_LL_DataOutStage+0x7e>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004d14:	23a5      	movs	r3, #165	; 0xa5
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	58c3      	ldr	r3, [r0, r3]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d003      	beq.n	8004d26 <USBD_LL_DataOutStage+0x1e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d028      	beq.n	8004d74 <USBD_LL_DataOutStage+0x6c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004d22:	0020      	movs	r0, r4
 8004d24:	e03d      	b.n	8004da2 <USBD_LL_DataOutStage+0x9a>
      if (pep->rem_length > pep->maxpacket)
 8004d26:	0002      	movs	r2, r0
 8004d28:	3255      	adds	r2, #85	; 0x55
 8004d2a:	32ff      	adds	r2, #255	; 0xff
 8004d2c:	68d3      	ldr	r3, [r2, #12]
 8004d2e:	6912      	ldr	r2, [r2, #16]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d90d      	bls.n	8004d50 <USBD_LL_DataOutStage+0x48>
        pep->rem_length -= pep->maxpacket;
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	3055      	adds	r0, #85	; 0x55
 8004d38:	30ff      	adds	r0, #255	; 0xff
 8004d3a:	60c3      	str	r3, [r0, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d905      	bls.n	8004d4c <USBD_LL_DataOutStage+0x44>
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	0028      	movs	r0, r5
 8004d44:	f000 fcaa 	bl	800569c <USBD_CtlContinueRx>
  return USBD_OK;
 8004d48:	0020      	movs	r0, r4
 8004d4a:	e02a      	b.n	8004da2 <USBD_LL_DataOutStage+0x9a>
        USBD_CtlContinueRx(pdev, pdata,
 8004d4c:	b292      	uxth	r2, r2
 8004d4e:	e7f8      	b.n	8004d42 <USBD_LL_DataOutStage+0x3a>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d50:	23ad      	movs	r3, #173	; 0xad
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	58c3      	ldr	r3, [r0, r3]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <USBD_LL_DataOutStage+0x5e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d5c:	22a7      	movs	r2, #167	; 0xa7
 8004d5e:	0092      	lsls	r2, r2, #2
 8004d60:	5c82      	ldrb	r2, [r0, r2]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d62:	2a03      	cmp	r2, #3
 8004d64:	d004      	beq.n	8004d70 <USBD_LL_DataOutStage+0x68>
        USBD_CtlSendStatus(pdev);
 8004d66:	0028      	movs	r0, r5
 8004d68:	f000 fca0 	bl	80056ac <USBD_CtlSendStatus>
  return USBD_OK;
 8004d6c:	0020      	movs	r0, r4
 8004d6e:	e018      	b.n	8004da2 <USBD_LL_DataOutStage+0x9a>
          pdev->pClass->EP0_RxReady(pdev);
 8004d70:	4798      	blx	r3
 8004d72:	e7f8      	b.n	8004d66 <USBD_LL_DataOutStage+0x5e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004d74:	23a5      	movs	r3, #165	; 0xa5
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	50c2      	str	r2, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	f000 fea9 	bl	8005ad4 <USBD_LL_StallEP>
  return USBD_OK;
 8004d82:	0020      	movs	r0, r4
 8004d84:	e00d      	b.n	8004da2 <USBD_LL_DataOutStage+0x9a>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d86:	23ad      	movs	r3, #173	; 0xad
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	58c3      	ldr	r3, [r0, r3]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <USBD_LL_DataOutStage+0x9c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d92:	22a7      	movs	r2, #167	; 0xa7
 8004d94:	0092      	lsls	r2, r2, #2
 8004d96:	5c82      	ldrb	r2, [r0, r2]
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d98:	2a03      	cmp	r2, #3
 8004d9a:	d105      	bne.n	8004da8 <USBD_LL_DataOutStage+0xa0>
    pdev->pClass->DataOut(pdev, epnum);
 8004d9c:	0021      	movs	r1, r4
 8004d9e:	4798      	blx	r3
  return USBD_OK;
 8004da0:	2000      	movs	r0, #0
}
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004da4:	2002      	movs	r0, #2
 8004da6:	e7fc      	b.n	8004da2 <USBD_LL_DataOutStage+0x9a>
 8004da8:	2002      	movs	r0, #2
 8004daa:	e7fa      	b.n	8004da2 <USBD_LL_DataOutStage+0x9a>

08004dac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	0005      	movs	r5, r0
 8004db0:	000c      	movs	r4, r1
 8004db2:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004db4:	2c00      	cmp	r4, #0
 8004db6:	d15b      	bne.n	8004e70 <USBD_LL_DataInStage+0xc4>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004db8:	23a5      	movs	r3, #165	; 0xa5
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	58c3      	ldr	r3, [r0, r3]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d00e      	beq.n	8004de0 <USBD_LL_DataInStage+0x34>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d001      	beq.n	8004dca <USBD_LL_DataInStage+0x1e>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <USBD_LL_DataInStage+0x26>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004dca:	2180      	movs	r1, #128	; 0x80
 8004dcc:	0028      	movs	r0, r5
 8004dce:	f000 fe81 	bl	8005ad4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004dd2:	23a8      	movs	r3, #168	; 0xa8
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	5ceb      	ldrb	r3, [r5, r3]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d043      	beq.n	8004e64 <USBD_LL_DataInStage+0xb8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004ddc:	0020      	movs	r0, r4
}
 8004dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (pep->rem_length > pep->maxpacket)
 8004de0:	6a02      	ldr	r2, [r0, #32]
 8004de2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004de4:	42b2      	cmp	r2, r6
 8004de6:	d820      	bhi.n	8004e2a <USBD_LL_DataInStage+0x7e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004de8:	69c7      	ldr	r7, [r0, #28]
 8004dea:	0031      	movs	r1, r6
 8004dec:	0038      	movs	r0, r7
 8004dee:	f7fb fa11 	bl	8000214 <__aeabi_uidivmod>
 8004df2:	2900      	cmp	r1, #0
 8004df4:	d106      	bne.n	8004e04 <USBD_LL_DataInStage+0x58>
 8004df6:	42be      	cmp	r6, r7
 8004df8:	d804      	bhi.n	8004e04 <USBD_LL_DataInStage+0x58>
            (pep->total_length < pdev->ep0_data_len))
 8004dfa:	23a6      	movs	r3, #166	; 0xa6
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	58eb      	ldr	r3, [r5, r3]
            (pep->total_length >= pep->maxpacket) &&
 8004e00:	429f      	cmp	r7, r3
 8004e02:	d31e      	bcc.n	8004e42 <USBD_LL_DataInStage+0x96>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e04:	23ad      	movs	r3, #173	; 0xad
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	58eb      	ldr	r3, [r5, r3]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <USBD_LL_DataInStage+0x6e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e10:	22a7      	movs	r2, #167	; 0xa7
 8004e12:	0092      	lsls	r2, r2, #2
 8004e14:	5caa      	ldrb	r2, [r5, r2]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e16:	2a03      	cmp	r2, #3
 8004e18:	d021      	beq.n	8004e5e <USBD_LL_DataInStage+0xb2>
          USBD_LL_StallEP(pdev, 0x80U);
 8004e1a:	2180      	movs	r1, #128	; 0x80
 8004e1c:	0028      	movs	r0, r5
 8004e1e:	f000 fe59 	bl	8005ad4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004e22:	0028      	movs	r0, r5
 8004e24:	f000 fc4e 	bl	80056c4 <USBD_CtlReceiveStatus>
 8004e28:	e7d3      	b.n	8004dd2 <USBD_LL_DataInStage+0x26>
        pep->rem_length -= pep->maxpacket;
 8004e2a:	1b92      	subs	r2, r2, r6
 8004e2c:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	f000 fc1b 	bl	800566a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e34:	2300      	movs	r3, #0
 8004e36:	2200      	movs	r2, #0
 8004e38:	2100      	movs	r1, #0
 8004e3a:	0028      	movs	r0, r5
 8004e3c:	f000 fe87 	bl	8005b4e <USBD_LL_PrepareReceive>
 8004e40:	e7c7      	b.n	8004dd2 <USBD_LL_DataInStage+0x26>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004e42:	2200      	movs	r2, #0
 8004e44:	0028      	movs	r0, r5
 8004e46:	f000 fc10 	bl	800566a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004e4a:	23a6      	movs	r3, #166	; 0xa6
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	50ea      	str	r2, [r5, r3]
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e52:	2300      	movs	r3, #0
 8004e54:	2100      	movs	r1, #0
 8004e56:	0028      	movs	r0, r5
 8004e58:	f000 fe79 	bl	8005b4e <USBD_LL_PrepareReceive>
 8004e5c:	e7b9      	b.n	8004dd2 <USBD_LL_DataInStage+0x26>
            pdev->pClass->EP0_TxSent(pdev);
 8004e5e:	0028      	movs	r0, r5
 8004e60:	4798      	blx	r3
 8004e62:	e7da      	b.n	8004e1a <USBD_LL_DataInStage+0x6e>
      pdev->dev_test_mode = 0U;
 8004e64:	23a8      	movs	r3, #168	; 0xa8
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	2200      	movs	r2, #0
 8004e6a:	54ea      	strb	r2, [r5, r3]
  return USBD_OK;
 8004e6c:	0020      	movs	r0, r4
 8004e6e:	e7b6      	b.n	8004dde <USBD_LL_DataInStage+0x32>
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e70:	23ad      	movs	r3, #173	; 0xad
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	58c3      	ldr	r3, [r0, r3]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <USBD_LL_DataInStage+0xe2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e7c:	22a7      	movs	r2, #167	; 0xa7
 8004e7e:	0092      	lsls	r2, r2, #2
 8004e80:	5c82      	ldrb	r2, [r0, r2]
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e82:	2a03      	cmp	r2, #3
 8004e84:	d105      	bne.n	8004e92 <USBD_LL_DataInStage+0xe6>
    pdev->pClass->DataIn(pdev, epnum);
 8004e86:	0021      	movs	r1, r4
 8004e88:	4798      	blx	r3
  return USBD_OK;
 8004e8a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004e8c:	e7a7      	b.n	8004dde <USBD_LL_DataInStage+0x32>
    return USBD_FAIL;
 8004e8e:	2002      	movs	r0, #2
 8004e90:	e7a5      	b.n	8004dde <USBD_LL_DataInStage+0x32>
 8004e92:	2002      	movs	r0, #2
 8004e94:	e7a3      	b.n	8004dde <USBD_LL_DataInStage+0x32>

08004e96 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e96:	b570      	push	{r4, r5, r6, lr}
 8004e98:	0004      	movs	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e9a:	2340      	movs	r3, #64	; 0x40
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	f000 fe03 	bl	8005aaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004ea4:	2501      	movs	r5, #1
 8004ea6:	23ac      	movs	r3, #172	; 0xac
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	50e5      	str	r5, [r4, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004eac:	2640      	movs	r6, #64	; 0x40
 8004eae:	330c      	adds	r3, #12
 8004eb0:	50e6      	str	r6, [r4, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004eb2:	3b25      	subs	r3, #37	; 0x25
 8004eb4:	3bff      	subs	r3, #255	; 0xff
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	0020      	movs	r0, r4
 8004ebc:	f000 fdf5 	bl	8005aaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ec0:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ec2:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ec4:	23a7      	movs	r3, #167	; 0xa7
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	22a5      	movs	r2, #165	; 0xa5
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	50a3      	str	r3, [r4, r2]
  pdev->dev_config = 0U;
 8004ed2:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004ed4:	3210      	adds	r2, #16
 8004ed6:	50a3      	str	r3, [r4, r2]

  if (pdev->pClassData)
 8004ed8:	23ae      	movs	r3, #174	; 0xae
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	58e3      	ldr	r3, [r4, r3]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <USBD_LL_Reset+0x5a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ee2:	23ad      	movs	r3, #173	; 0xad
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	58e3      	ldr	r3, [r4, r3]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2100      	movs	r1, #0
 8004eec:	0020      	movs	r0, r4
 8004eee:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}

08004ef4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004ef4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	4770      	bx	lr
	...

08004efc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004efc:	23a7      	movs	r3, #167	; 0xa7
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	5cc1      	ldrb	r1, [r0, r3]
 8004f02:	4a03      	ldr	r2, [pc, #12]	; (8004f10 <USBD_LL_Suspend+0x14>)
 8004f04:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004f06:	2204      	movs	r2, #4
 8004f08:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	4770      	bx	lr
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	0000029d 	.word	0x0000029d

08004f14 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f14:	23a7      	movs	r3, #167	; 0xa7
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	5cc3      	ldrb	r3, [r0, r3]
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d001      	beq.n	8004f22 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8004f1e:	2000      	movs	r0, #0
 8004f20:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8004f22:	4b02      	ldr	r3, [pc, #8]	; (8004f2c <USBD_LL_Resume+0x18>)
 8004f24:	5cc2      	ldrb	r2, [r0, r3]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	54c2      	strb	r2, [r0, r3]
 8004f2a:	e7f8      	b.n	8004f1e <USBD_LL_Resume+0xa>
 8004f2c:	0000029d 	.word	0x0000029d

08004f30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f30:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f32:	23a7      	movs	r3, #167	; 0xa7
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	5cc3      	ldrb	r3, [r0, r3]
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d001      	beq.n	8004f40 <USBD_LL_SOF+0x10>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	bd10      	pop	{r4, pc}
    if (pdev->pClass->SOF != NULL)
 8004f40:	23ad      	movs	r3, #173	; 0xad
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	58c3      	ldr	r3, [r0, r3]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f7      	beq.n	8004f3c <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 8004f4c:	4798      	blx	r3
 8004f4e:	e7f5      	b.n	8004f3c <USBD_LL_SOF+0xc>

08004f50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004f50:	0003      	movs	r3, r0
  uint8_t  len = 0U;
 8004f52:	2000      	movs	r0, #0

  while (*buf != '\0')
 8004f54:	e002      	b.n	8004f5c <USBD_GetLen+0xc>
  {
    len++;
 8004f56:	3001      	adds	r0, #1
 8004f58:	b2c0      	uxtb	r0, r0
    buf++;
 8004f5a:	3301      	adds	r3, #1
  while (*buf != '\0')
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	2a00      	cmp	r2, #0
 8004f60:	d1f9      	bne.n	8004f56 <USBD_GetLen+0x6>
  }

  return len;
}
 8004f62:	4770      	bx	lr

08004f64 <USBD_SetFeature>:
{
 8004f64:	b510      	push	{r4, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004f66:	884b      	ldrh	r3, [r1, #2]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d000      	beq.n	8004f6e <USBD_SetFeature+0xa>
}
 8004f6c:	bd10      	pop	{r4, pc}
    pdev->dev_remote_wakeup = 1U;
 8004f6e:	23a9      	movs	r3, #169	; 0xa9
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	2201      	movs	r2, #1
 8004f74:	50c2      	str	r2, [r0, r3]
    USBD_CtlSendStatus(pdev);
 8004f76:	f000 fb99 	bl	80056ac <USBD_CtlSendStatus>
}
 8004f7a:	e7f7      	b.n	8004f6c <USBD_SetFeature+0x8>

08004f7c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004f7c:	780b      	ldrb	r3, [r1, #0]
 8004f7e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004f80:	784b      	ldrb	r3, [r1, #1]
 8004f82:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004f84:	788b      	ldrb	r3, [r1, #2]
 8004f86:	78ca      	ldrb	r2, [r1, #3]
 8004f88:	0212      	lsls	r2, r2, #8
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004f8e:	790b      	ldrb	r3, [r1, #4]
 8004f90:	794a      	ldrb	r2, [r1, #5]
 8004f92:	0212      	lsls	r2, r2, #8
 8004f94:	189b      	adds	r3, r3, r2
 8004f96:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004f98:	798b      	ldrb	r3, [r1, #6]
 8004f9a:	79ca      	ldrb	r2, [r1, #7]
 8004f9c:	0212      	lsls	r2, r2, #8
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	80c3      	strh	r3, [r0, #6]
}
 8004fa2:	4770      	bx	lr

08004fa4 <USBD_CtlError>:
{
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004fa8:	2180      	movs	r1, #128	; 0x80
 8004faa:	f000 fd93 	bl	8005ad4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004fae:	2100      	movs	r1, #0
 8004fb0:	0020      	movs	r0, r4
 8004fb2:	f000 fd8f 	bl	8005ad4 <USBD_LL_StallEP>
}
 8004fb6:	bd10      	pop	{r4, pc}

08004fb8 <USBD_GetDescriptor>:
{
 8004fb8:	b530      	push	{r4, r5, lr}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	0005      	movs	r5, r0
 8004fbe:	000c      	movs	r4, r1
  uint16_t len = 0U;
 8004fc0:	466b      	mov	r3, sp
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	80da      	strh	r2, [r3, #6]
  switch (req->wValue >> 8)
 8004fc6:	884a      	ldrh	r2, [r1, #2]
 8004fc8:	0a13      	lsrs	r3, r2, #8
 8004fca:	2b07      	cmp	r3, #7
 8004fcc:	d900      	bls.n	8004fd0 <USBD_GetDescriptor+0x18>
 8004fce:	e0b6      	b.n	800513e <USBD_GetDescriptor+0x186>
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4965      	ldr	r1, [pc, #404]	; (8005168 <USBD_GetDescriptor+0x1b0>)
 8004fd4:	58cb      	ldr	r3, [r1, r3]
 8004fd6:	469f      	mov	pc, r3
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004fd8:	23ac      	movs	r3, #172	; 0xac
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	58c3      	ldr	r3, [r0, r3]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	7c00      	ldrb	r0, [r0, #16]
 8004fe2:	466a      	mov	r2, sp
 8004fe4:	1d91      	adds	r1, r2, #6
 8004fe6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004fe8:	466b      	mov	r3, sp
 8004fea:	3306      	adds	r3, #6
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <USBD_GetDescriptor+0x42>
 8004ff2:	88e2      	ldrh	r2, [r4, #6]
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	d000      	beq.n	8004ffa <USBD_GetDescriptor+0x42>
 8004ff8:	e0a6      	b.n	8005148 <USBD_GetDescriptor+0x190>
    if (req->wLength == 0U)
 8004ffa:	88e3      	ldrh	r3, [r4, #6]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d100      	bne.n	8005002 <USBD_GetDescriptor+0x4a>
 8005000:	e0ae      	b.n	8005160 <USBD_GetDescriptor+0x1a8>
}
 8005002:	b003      	add	sp, #12
 8005004:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005006:	7c03      	ldrb	r3, [r0, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <USBD_GetDescriptor+0x68>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800500c:	23ad      	movs	r3, #173	; 0xad
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	58c3      	ldr	r3, [r0, r3]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	466a      	mov	r2, sp
 8005016:	1d90      	adds	r0, r2, #6
 8005018:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800501a:	2302      	movs	r3, #2
 800501c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800501e:	e7e3      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005020:	23ad      	movs	r3, #173	; 0xad
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	58c3      	ldr	r3, [r0, r3]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	466a      	mov	r2, sp
 800502a:	1d90      	adds	r0, r2, #6
 800502c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800502e:	2302      	movs	r3, #2
 8005030:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005032:	e7d9      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
      switch ((uint8_t)(req->wValue))
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	2a05      	cmp	r2, #5
 8005038:	d85d      	bhi.n	80050f6 <USBD_GetDescriptor+0x13e>
 800503a:	0092      	lsls	r2, r2, #2
 800503c:	4b4b      	ldr	r3, [pc, #300]	; (800516c <USBD_GetDescriptor+0x1b4>)
 800503e:	589b      	ldr	r3, [r3, r2]
 8005040:	469f      	mov	pc, r3
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005042:	23ac      	movs	r3, #172	; 0xac
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	58c3      	ldr	r3, [r0, r3]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <USBD_GetDescriptor+0xa0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800504e:	7c00      	ldrb	r0, [r0, #16]
 8005050:	466a      	mov	r2, sp
 8005052:	1d91      	adds	r1, r2, #6
 8005054:	4798      	blx	r3
  if (err != 0U)
 8005056:	e7c7      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 8005058:	0021      	movs	r1, r4
 800505a:	f7ff ffa3 	bl	8004fa4 <USBD_CtlError>
  if (err != 0U)
 800505e:	e7d0      	b.n	8005002 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005060:	23ac      	movs	r3, #172	; 0xac
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	58c3      	ldr	r3, [r0, r3]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800506c:	7c00      	ldrb	r0, [r0, #16]
 800506e:	466a      	mov	r2, sp
 8005070:	1d91      	adds	r1, r2, #6
 8005072:	4798      	blx	r3
  if (err != 0U)
 8005074:	e7b8      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 8005076:	0021      	movs	r1, r4
 8005078:	f7ff ff94 	bl	8004fa4 <USBD_CtlError>
  if (err != 0U)
 800507c:	e7c1      	b.n	8005002 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800507e:	23ac      	movs	r3, #172	; 0xac
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	58c3      	ldr	r3, [r0, r3]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d004      	beq.n	8005094 <USBD_GetDescriptor+0xdc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800508a:	7c00      	ldrb	r0, [r0, #16]
 800508c:	466a      	mov	r2, sp
 800508e:	1d91      	adds	r1, r2, #6
 8005090:	4798      	blx	r3
  if (err != 0U)
 8005092:	e7a9      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 8005094:	0021      	movs	r1, r4
 8005096:	f7ff ff85 	bl	8004fa4 <USBD_CtlError>
  if (err != 0U)
 800509a:	e7b2      	b.n	8005002 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800509c:	23ac      	movs	r3, #172	; 0xac
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	58c3      	ldr	r3, [r0, r3]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d004      	beq.n	80050b2 <USBD_GetDescriptor+0xfa>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80050a8:	7c00      	ldrb	r0, [r0, #16]
 80050aa:	466a      	mov	r2, sp
 80050ac:	1d91      	adds	r1, r2, #6
 80050ae:	4798      	blx	r3
  if (err != 0U)
 80050b0:	e79a      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 80050b2:	0021      	movs	r1, r4
 80050b4:	f7ff ff76 	bl	8004fa4 <USBD_CtlError>
  if (err != 0U)
 80050b8:	e7a3      	b.n	8005002 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80050ba:	23ac      	movs	r3, #172	; 0xac
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	58c3      	ldr	r3, [r0, r3]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <USBD_GetDescriptor+0x118>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80050c6:	7c00      	ldrb	r0, [r0, #16]
 80050c8:	466a      	mov	r2, sp
 80050ca:	1d91      	adds	r1, r2, #6
 80050cc:	4798      	blx	r3
  if (err != 0U)
 80050ce:	e78b      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 80050d0:	0021      	movs	r1, r4
 80050d2:	f7ff ff67 	bl	8004fa4 <USBD_CtlError>
  if (err != 0U)
 80050d6:	e794      	b.n	8005002 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80050d8:	23ac      	movs	r3, #172	; 0xac
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	58c3      	ldr	r3, [r0, r3]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <USBD_GetDescriptor+0x136>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80050e4:	7c00      	ldrb	r0, [r0, #16]
 80050e6:	466a      	mov	r2, sp
 80050e8:	1d91      	adds	r1, r2, #6
 80050ea:	4798      	blx	r3
  if (err != 0U)
 80050ec:	e77c      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 80050ee:	0021      	movs	r1, r4
 80050f0:	f7ff ff58 	bl	8004fa4 <USBD_CtlError>
  if (err != 0U)
 80050f4:	e785      	b.n	8005002 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 80050f6:	0021      	movs	r1, r4
 80050f8:	f7ff ff54 	bl	8004fa4 <USBD_CtlError>
  if (err != 0U)
 80050fc:	e781      	b.n	8005002 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050fe:	7c03      	ldrb	r3, [r0, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d107      	bne.n	8005114 <USBD_GetDescriptor+0x15c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005104:	23ad      	movs	r3, #173	; 0xad
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	58c3      	ldr	r3, [r0, r3]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	466a      	mov	r2, sp
 800510e:	1d90      	adds	r0, r2, #6
 8005110:	4798      	blx	r3
  if (err != 0U)
 8005112:	e769      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
        USBD_CtlError(pdev, req);
 8005114:	0021      	movs	r1, r4
 8005116:	f7ff ff45 	bl	8004fa4 <USBD_CtlError>
  if (err != 0U)
 800511a:	e772      	b.n	8005002 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800511c:	7c03      	ldrb	r3, [r0, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <USBD_GetDescriptor+0x17e>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005122:	23ad      	movs	r3, #173	; 0xad
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	58c3      	ldr	r3, [r0, r3]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	466a      	mov	r2, sp
 800512c:	1d90      	adds	r0, r2, #6
 800512e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005130:	2307      	movs	r3, #7
 8005132:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005134:	e758      	b.n	8004fe8 <USBD_GetDescriptor+0x30>
        USBD_CtlError(pdev, req);
 8005136:	0021      	movs	r1, r4
 8005138:	f7ff ff34 	bl	8004fa4 <USBD_CtlError>
  if (err != 0U)
 800513c:	e761      	b.n	8005002 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 800513e:	0021      	movs	r1, r4
 8005140:	0028      	movs	r0, r5
 8005142:	f7ff ff2f 	bl	8004fa4 <USBD_CtlError>
    return;
 8005146:	e75c      	b.n	8005002 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8005148:	1c19      	adds	r1, r3, #0
 800514a:	4293      	cmp	r3, r2
 800514c:	d900      	bls.n	8005150 <USBD_GetDescriptor+0x198>
 800514e:	1c11      	adds	r1, r2, #0
 8005150:	b28a      	uxth	r2, r1
 8005152:	466b      	mov	r3, sp
 8005154:	80d9      	strh	r1, [r3, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005156:	0001      	movs	r1, r0
 8005158:	0028      	movs	r0, r5
 800515a:	f000 fa78 	bl	800564e <USBD_CtlSendData>
 800515e:	e74c      	b.n	8004ffa <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8005160:	0028      	movs	r0, r5
 8005162:	f000 faa3 	bl	80056ac <USBD_CtlSendStatus>
 8005166:	e74c      	b.n	8005002 <USBD_GetDescriptor+0x4a>
 8005168:	08005c1c 	.word	0x08005c1c
 800516c:	08005c3c 	.word	0x08005c3c

08005170 <USBD_SetAddress>:
{
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	0004      	movs	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005174:	888b      	ldrh	r3, [r1, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d123      	bne.n	80051c2 <USBD_SetAddress+0x52>
 800517a:	88cb      	ldrh	r3, [r1, #6]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d120      	bne.n	80051c2 <USBD_SetAddress+0x52>
 8005180:	884b      	ldrh	r3, [r1, #2]
 8005182:	2b7f      	cmp	r3, #127	; 0x7f
 8005184:	d81d      	bhi.n	80051c2 <USBD_SetAddress+0x52>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005186:	257f      	movs	r5, #127	; 0x7f
 8005188:	401d      	ands	r5, r3
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800518a:	23a7      	movs	r3, #167	; 0xa7
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	5cc3      	ldrb	r3, [r0, r3]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d00e      	beq.n	80051b2 <USBD_SetAddress+0x42>
      pdev->dev_address = dev_addr;
 8005194:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <USBD_SetAddress+0x5c>)
 8005196:	54c5      	strb	r5, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005198:	0029      	movs	r1, r5
 800519a:	f000 fcc6 	bl	8005b2a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800519e:	0020      	movs	r0, r4
 80051a0:	f000 fa84 	bl	80056ac <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80051a4:	2d00      	cmp	r5, #0
 80051a6:	d007      	beq.n	80051b8 <USBD_SetAddress+0x48>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80051a8:	23a7      	movs	r3, #167	; 0xa7
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	2202      	movs	r2, #2
 80051ae:	54e2      	strb	r2, [r4, r3]
 80051b0:	e00a      	b.n	80051c8 <USBD_SetAddress+0x58>
      USBD_CtlError(pdev, req);
 80051b2:	f7ff fef7 	bl	8004fa4 <USBD_CtlError>
 80051b6:	e007      	b.n	80051c8 <USBD_SetAddress+0x58>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80051b8:	23a7      	movs	r3, #167	; 0xa7
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	2201      	movs	r2, #1
 80051be:	54e2      	strb	r2, [r4, r3]
 80051c0:	e002      	b.n	80051c8 <USBD_SetAddress+0x58>
    USBD_CtlError(pdev, req);
 80051c2:	0020      	movs	r0, r4
 80051c4:	f7ff feee 	bl	8004fa4 <USBD_CtlError>
}
 80051c8:	bd70      	pop	{r4, r5, r6, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	0000029e 	.word	0x0000029e

080051d0 <USBD_SetConfig>:
{
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	0004      	movs	r4, r0
 80051d4:	000d      	movs	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 80051d6:	7889      	ldrb	r1, [r1, #2]
 80051d8:	4b2a      	ldr	r3, [pc, #168]	; (8005284 <USBD_SetConfig+0xb4>)
 80051da:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80051dc:	2901      	cmp	r1, #1
 80051de:	d80f      	bhi.n	8005200 <USBD_SetConfig+0x30>
    switch (pdev->dev_state)
 80051e0:	23a7      	movs	r3, #167	; 0xa7
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	5cc3      	ldrb	r3, [r0, r3]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d00e      	beq.n	8005208 <USBD_SetConfig+0x38>
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d023      	beq.n	8005236 <USBD_SetConfig+0x66>
        USBD_CtlError(pdev, req);
 80051ee:	0029      	movs	r1, r5
 80051f0:	f7ff fed8 	bl	8004fa4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80051f4:	4b23      	ldr	r3, [pc, #140]	; (8005284 <USBD_SetConfig+0xb4>)
 80051f6:	7819      	ldrb	r1, [r3, #0]
 80051f8:	0020      	movs	r0, r4
 80051fa:	f7ff fd4a 	bl	8004c92 <USBD_ClrClassConfig>
        break;
 80051fe:	e002      	b.n	8005206 <USBD_SetConfig+0x36>
    USBD_CtlError(pdev, req);
 8005200:	0029      	movs	r1, r5
 8005202:	f7ff fecf 	bl	8004fa4 <USBD_CtlError>
}
 8005206:	bd70      	pop	{r4, r5, r6, pc}
        if (cfgidx)
 8005208:	2900      	cmp	r1, #0
 800520a:	d011      	beq.n	8005230 <USBD_SetConfig+0x60>
          pdev->dev_config = cfgidx;
 800520c:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800520e:	23a7      	movs	r3, #167	; 0xa7
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	2203      	movs	r2, #3
 8005214:	54c2      	strb	r2, [r0, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005216:	f7ff fd2d 	bl	8004c74 <USBD_SetClassConfig>
 800521a:	2802      	cmp	r0, #2
 800521c:	d003      	beq.n	8005226 <USBD_SetConfig+0x56>
          USBD_CtlSendStatus(pdev);
 800521e:	0020      	movs	r0, r4
 8005220:	f000 fa44 	bl	80056ac <USBD_CtlSendStatus>
 8005224:	e7ef      	b.n	8005206 <USBD_SetConfig+0x36>
            USBD_CtlError(pdev, req);
 8005226:	0029      	movs	r1, r5
 8005228:	0020      	movs	r0, r4
 800522a:	f7ff febb 	bl	8004fa4 <USBD_CtlError>
            return;
 800522e:	e7ea      	b.n	8005206 <USBD_SetConfig+0x36>
          USBD_CtlSendStatus(pdev);
 8005230:	f000 fa3c 	bl	80056ac <USBD_CtlSendStatus>
 8005234:	e7e7      	b.n	8005206 <USBD_SetConfig+0x36>
        if (cfgidx == 0U)
 8005236:	2900      	cmp	r1, #0
 8005238:	d011      	beq.n	800525e <USBD_SetConfig+0x8e>
        else if (cfgidx != pdev->dev_config)
 800523a:	6843      	ldr	r3, [r0, #4]
 800523c:	4299      	cmp	r1, r3
 800523e:	d01e      	beq.n	800527e <USBD_SetConfig+0xae>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005240:	b2d9      	uxtb	r1, r3
 8005242:	f7ff fd26 	bl	8004c92 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <USBD_SetConfig+0xb4>)
 8005248:	7819      	ldrb	r1, [r3, #0]
 800524a:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800524c:	0020      	movs	r0, r4
 800524e:	f7ff fd11 	bl	8004c74 <USBD_SetClassConfig>
 8005252:	2802      	cmp	r0, #2
 8005254:	d00e      	beq.n	8005274 <USBD_SetConfig+0xa4>
          USBD_CtlSendStatus(pdev);
 8005256:	0020      	movs	r0, r4
 8005258:	f000 fa28 	bl	80056ac <USBD_CtlSendStatus>
 800525c:	e7d3      	b.n	8005206 <USBD_SetConfig+0x36>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800525e:	23a7      	movs	r3, #167	; 0xa7
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	2202      	movs	r2, #2
 8005264:	54c2      	strb	r2, [r0, r3]
          pdev->dev_config = cfgidx;
 8005266:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005268:	f7ff fd13 	bl	8004c92 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800526c:	0020      	movs	r0, r4
 800526e:	f000 fa1d 	bl	80056ac <USBD_CtlSendStatus>
 8005272:	e7c8      	b.n	8005206 <USBD_SetConfig+0x36>
            USBD_CtlError(pdev, req);
 8005274:	0029      	movs	r1, r5
 8005276:	0020      	movs	r0, r4
 8005278:	f7ff fe94 	bl	8004fa4 <USBD_CtlError>
            return;
 800527c:	e7c3      	b.n	8005206 <USBD_SetConfig+0x36>
          USBD_CtlSendStatus(pdev);
 800527e:	f000 fa15 	bl	80056ac <USBD_CtlSendStatus>
 8005282:	e7c0      	b.n	8005206 <USBD_SetConfig+0x36>
 8005284:	20000240 	.word	0x20000240

08005288 <USBD_GetConfig>:
{
 8005288:	b510      	push	{r4, lr}
  if (req->wLength != 1U)
 800528a:	88cb      	ldrh	r3, [r1, #6]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10b      	bne.n	80052a8 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8005290:	23a7      	movs	r3, #167	; 0xa7
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	5cc3      	ldrb	r3, [r0, r3]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d909      	bls.n	80052ae <USBD_GetConfig+0x26>
 800529a:	2b03      	cmp	r3, #3
 800529c:	d109      	bne.n	80052b2 <USBD_GetConfig+0x2a>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800529e:	1d01      	adds	r1, r0, #4
 80052a0:	2201      	movs	r2, #1
 80052a2:	f000 f9d4 	bl	800564e <USBD_CtlSendData>
        break;
 80052a6:	e001      	b.n	80052ac <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80052a8:	f7ff fe7c 	bl	8004fa4 <USBD_CtlError>
}
 80052ac:	bd10      	pop	{r4, pc}
    switch (pdev->dev_state)
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 80052b2:	f7ff fe77 	bl	8004fa4 <USBD_CtlError>
}
 80052b6:	e7f9      	b.n	80052ac <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	6083      	str	r3, [r0, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80052bc:	0001      	movs	r1, r0
 80052be:	3108      	adds	r1, #8
 80052c0:	2201      	movs	r2, #1
 80052c2:	f000 f9c4 	bl	800564e <USBD_CtlSendData>
        break;
 80052c6:	e7f1      	b.n	80052ac <USBD_GetConfig+0x24>

080052c8 <USBD_GetStatus>:
{
 80052c8:	b510      	push	{r4, lr}
  switch (pdev->dev_state)
 80052ca:	23a7      	movs	r3, #167	; 0xa7
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	5cc3      	ldrb	r3, [r0, r3]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d814      	bhi.n	8005300 <USBD_GetStatus+0x38>
      if (req->wLength != 0x2U)
 80052d6:	88cb      	ldrh	r3, [r1, #6]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d10e      	bne.n	80052fa <USBD_GetStatus+0x32>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80052dc:	2301      	movs	r3, #1
 80052de:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80052e0:	23a9      	movs	r3, #169	; 0xa9
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	58c3      	ldr	r3, [r0, r3]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <USBD_GetStatus+0x26>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80052ea:	2303      	movs	r3, #3
 80052ec:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80052ee:	0001      	movs	r1, r0
 80052f0:	310c      	adds	r1, #12
 80052f2:	2202      	movs	r2, #2
 80052f4:	f000 f9ab 	bl	800564e <USBD_CtlSendData>
}
 80052f8:	bd10      	pop	{r4, pc}
        USBD_CtlError(pdev, req);
 80052fa:	f7ff fe53 	bl	8004fa4 <USBD_CtlError>
        break;
 80052fe:	e7fb      	b.n	80052f8 <USBD_GetStatus+0x30>
      USBD_CtlError(pdev, req);
 8005300:	f7ff fe50 	bl	8004fa4 <USBD_CtlError>
}
 8005304:	e7f8      	b.n	80052f8 <USBD_GetStatus+0x30>

08005306 <USBD_ClrFeature>:
{
 8005306:	b510      	push	{r4, lr}
  switch (pdev->dev_state)
 8005308:	23a7      	movs	r3, #167	; 0xa7
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	5cc3      	ldrb	r3, [r0, r3]
 800530e:	3b01      	subs	r3, #1
 8005310:	2b02      	cmp	r3, #2
 8005312:	d80a      	bhi.n	800532a <USBD_ClrFeature+0x24>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005314:	884b      	ldrh	r3, [r1, #2]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d000      	beq.n	800531c <USBD_ClrFeature+0x16>
}
 800531a:	bd10      	pop	{r4, pc}
        pdev->dev_remote_wakeup = 0U;
 800531c:	23a9      	movs	r3, #169	; 0xa9
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	2200      	movs	r2, #0
 8005322:	50c2      	str	r2, [r0, r3]
        USBD_CtlSendStatus(pdev);
 8005324:	f000 f9c2 	bl	80056ac <USBD_CtlSendStatus>
 8005328:	e7f7      	b.n	800531a <USBD_ClrFeature+0x14>
      USBD_CtlError(pdev, req);
 800532a:	f7ff fe3b 	bl	8004fa4 <USBD_CtlError>
}
 800532e:	e7f4      	b.n	800531a <USBD_ClrFeature+0x14>

08005330 <USBD_StdDevReq>:
{
 8005330:	b510      	push	{r4, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005332:	780a      	ldrb	r2, [r1, #0]
 8005334:	2360      	movs	r3, #96	; 0x60
 8005336:	4013      	ands	r3, r2
 8005338:	2b20      	cmp	r3, #32
 800533a:	d006      	beq.n	800534a <USBD_StdDevReq+0x1a>
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d004      	beq.n	800534a <USBD_StdDevReq+0x1a>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d009      	beq.n	8005358 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8005344:	f7ff fe2e 	bl	8004fa4 <USBD_CtlError>
      break;
 8005348:	e004      	b.n	8005354 <USBD_StdDevReq+0x24>
      pdev->pClass->Setup(pdev, req);
 800534a:	23ad      	movs	r3, #173	; 0xad
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	58c3      	ldr	r3, [r0, r3]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	4798      	blx	r3
}
 8005354:	2000      	movs	r0, #0
 8005356:	bd10      	pop	{r4, pc}
      switch (req->bRequest)
 8005358:	784b      	ldrb	r3, [r1, #1]
 800535a:	2b09      	cmp	r3, #9
 800535c:	d818      	bhi.n	8005390 <USBD_StdDevReq+0x60>
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <USBD_StdDevReq+0x68>)
 8005362:	58d3      	ldr	r3, [r2, r3]
 8005364:	469f      	mov	pc, r3
          USBD_GetDescriptor(pdev, req);
 8005366:	f7ff fe27 	bl	8004fb8 <USBD_GetDescriptor>
          break;
 800536a:	e7f3      	b.n	8005354 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800536c:	f7ff ff00 	bl	8005170 <USBD_SetAddress>
          break;
 8005370:	e7f0      	b.n	8005354 <USBD_StdDevReq+0x24>
          USBD_SetConfig(pdev, req);
 8005372:	f7ff ff2d 	bl	80051d0 <USBD_SetConfig>
          break;
 8005376:	e7ed      	b.n	8005354 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8005378:	f7ff ff86 	bl	8005288 <USBD_GetConfig>
          break;
 800537c:	e7ea      	b.n	8005354 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800537e:	f7ff ffa3 	bl	80052c8 <USBD_GetStatus>
          break;
 8005382:	e7e7      	b.n	8005354 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8005384:	f7ff fdee 	bl	8004f64 <USBD_SetFeature>
          break;
 8005388:	e7e4      	b.n	8005354 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800538a:	f7ff ffbc 	bl	8005306 <USBD_ClrFeature>
          break;
 800538e:	e7e1      	b.n	8005354 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 8005390:	f7ff fe08 	bl	8004fa4 <USBD_CtlError>
          break;
 8005394:	e7de      	b.n	8005354 <USBD_StdDevReq+0x24>
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	08005c54 	.word	0x08005c54

0800539c <USBD_StdItfReq>:
{
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	0005      	movs	r5, r0
 80053a0:	000c      	movs	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053a2:	780a      	ldrb	r2, [r1, #0]
 80053a4:	2360      	movs	r3, #96	; 0x60
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d007      	beq.n	80053bc <USBD_StdItfReq+0x20>
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d005      	beq.n	80053bc <USBD_StdItfReq+0x20>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80053b4:	f7ff fdf6 	bl	8004fa4 <USBD_CtlError>
}
 80053b8:	2000      	movs	r0, #0
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80053bc:	23a7      	movs	r3, #167	; 0xa7
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	5ceb      	ldrb	r3, [r5, r3]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d817      	bhi.n	80053f8 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80053c8:	7923      	ldrb	r3, [r4, #4]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d80f      	bhi.n	80053ee <USBD_StdItfReq+0x52>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053ce:	23ad      	movs	r3, #173	; 0xad
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	58eb      	ldr	r3, [r5, r3]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	0021      	movs	r1, r4
 80053d8:	0028      	movs	r0, r5
 80053da:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80053dc:	88e3      	ldrh	r3, [r4, #6]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1ea      	bne.n	80053b8 <USBD_StdItfReq+0x1c>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d1e8      	bne.n	80053b8 <USBD_StdItfReq+0x1c>
              USBD_CtlSendStatus(pdev);
 80053e6:	0028      	movs	r0, r5
 80053e8:	f000 f960 	bl	80056ac <USBD_CtlSendStatus>
 80053ec:	e7e4      	b.n	80053b8 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 80053ee:	0021      	movs	r1, r4
 80053f0:	0028      	movs	r0, r5
 80053f2:	f7ff fdd7 	bl	8004fa4 <USBD_CtlError>
 80053f6:	e7df      	b.n	80053b8 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 80053f8:	0021      	movs	r1, r4
 80053fa:	0028      	movs	r0, r5
 80053fc:	f7ff fdd2 	bl	8004fa4 <USBD_CtlError>
          break;
 8005400:	e7da      	b.n	80053b8 <USBD_StdItfReq+0x1c>

08005402 <USBD_StdEPReq>:
{
 8005402:	b570      	push	{r4, r5, r6, lr}
 8005404:	0005      	movs	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005406:	8888      	ldrh	r0, [r1, #4]
 8005408:	790a      	ldrb	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800540a:	780b      	ldrb	r3, [r1, #0]
 800540c:	2460      	movs	r4, #96	; 0x60
 800540e:	401c      	ands	r4, r3
 8005410:	2c20      	cmp	r4, #32
 8005412:	d008      	beq.n	8005426 <USBD_StdEPReq+0x24>
 8005414:	2c40      	cmp	r4, #64	; 0x40
 8005416:	d006      	beq.n	8005426 <USBD_StdEPReq+0x24>
 8005418:	2c00      	cmp	r4, #0
 800541a:	d00d      	beq.n	8005438 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800541c:	0028      	movs	r0, r5
 800541e:	f7ff fdc1 	bl	8004fa4 <USBD_CtlError>
  return ret;
 8005422:	2400      	movs	r4, #0
      break;
 8005424:	e006      	b.n	8005434 <USBD_StdEPReq+0x32>
      pdev->pClass->Setup(pdev, req);
 8005426:	23ad      	movs	r3, #173	; 0xad
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	58eb      	ldr	r3, [r5, r3]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0028      	movs	r0, r5
 8005430:	4798      	blx	r3
  return ret;
 8005432:	2400      	movs	r4, #0
}
 8005434:	0020      	movs	r0, r4
 8005436:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005438:	2c20      	cmp	r4, #32
 800543a:	d00a      	beq.n	8005452 <USBD_StdEPReq+0x50>
      switch (req->bRequest)
 800543c:	784e      	ldrb	r6, [r1, #1]
 800543e:	2e01      	cmp	r6, #1
 8005440:	d03e      	beq.n	80054c0 <USBD_StdEPReq+0xbe>
 8005442:	2e03      	cmp	r6, #3
 8005444:	d00d      	beq.n	8005462 <USBD_StdEPReq+0x60>
 8005446:	2e00      	cmp	r6, #0
 8005448:	d064      	beq.n	8005514 <USBD_StdEPReq+0x112>
          USBD_CtlError(pdev, req);
 800544a:	0028      	movs	r0, r5
 800544c:	f7ff fdaa 	bl	8004fa4 <USBD_CtlError>
          break;
 8005450:	e7f0      	b.n	8005434 <USBD_StdEPReq+0x32>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005452:	23ad      	movs	r3, #173	; 0xad
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	58eb      	ldr	r3, [r5, r3]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0028      	movs	r0, r5
 800545c:	4798      	blx	r3
 800545e:	0004      	movs	r4, r0
        return ret;
 8005460:	e7e8      	b.n	8005434 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8005462:	23a7      	movs	r3, #167	; 0xa7
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	5ceb      	ldrb	r3, [r5, r3]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d005      	beq.n	8005478 <USBD_StdEPReq+0x76>
 800546c:	2b03      	cmp	r3, #3
 800546e:	d014      	beq.n	800549a <USBD_StdEPReq+0x98>
              USBD_CtlError(pdev, req);
 8005470:	0028      	movs	r0, r5
 8005472:	f7ff fd97 	bl	8004fa4 <USBD_CtlError>
              break;
 8005476:	e7dd      	b.n	8005434 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005478:	2a00      	cmp	r2, #0
 800547a:	d001      	beq.n	8005480 <USBD_StdEPReq+0x7e>
 800547c:	2a80      	cmp	r2, #128	; 0x80
 800547e:	d103      	bne.n	8005488 <USBD_StdEPReq+0x86>
                USBD_CtlError(pdev, req);
 8005480:	0028      	movs	r0, r5
 8005482:	f7ff fd8f 	bl	8004fa4 <USBD_CtlError>
 8005486:	e7d5      	b.n	8005434 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 8005488:	0011      	movs	r1, r2
 800548a:	0028      	movs	r0, r5
 800548c:	f000 fb22 	bl	8005ad4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	0028      	movs	r0, r5
 8005494:	f000 fb1e 	bl	8005ad4 <USBD_LL_StallEP>
 8005498:	e7cc      	b.n	8005434 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800549a:	884b      	ldrh	r3, [r1, #2]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <USBD_StdEPReq+0xac>
                if ((ep_addr != 0x00U) &&
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	d004      	beq.n	80054ae <USBD_StdEPReq+0xac>
 80054a4:	2a80      	cmp	r2, #128	; 0x80
 80054a6:	d002      	beq.n	80054ae <USBD_StdEPReq+0xac>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054a8:	88cb      	ldrh	r3, [r1, #6]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <USBD_StdEPReq+0xb4>
              USBD_CtlSendStatus(pdev);
 80054ae:	0028      	movs	r0, r5
 80054b0:	f000 f8fc 	bl	80056ac <USBD_CtlSendStatus>
              break;
 80054b4:	e7be      	b.n	8005434 <USBD_StdEPReq+0x32>
                  USBD_LL_StallEP(pdev, ep_addr);
 80054b6:	0011      	movs	r1, r2
 80054b8:	0028      	movs	r0, r5
 80054ba:	f000 fb0b 	bl	8005ad4 <USBD_LL_StallEP>
 80054be:	e7f6      	b.n	80054ae <USBD_StdEPReq+0xac>
          switch (pdev->dev_state)
 80054c0:	23a7      	movs	r3, #167	; 0xa7
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	5ceb      	ldrb	r3, [r5, r3]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d005      	beq.n	80054d6 <USBD_StdEPReq+0xd4>
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d014      	beq.n	80054f8 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 80054ce:	0028      	movs	r0, r5
 80054d0:	f7ff fd68 	bl	8004fa4 <USBD_CtlError>
              break;
 80054d4:	e7ae      	b.n	8005434 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	d001      	beq.n	80054de <USBD_StdEPReq+0xdc>
 80054da:	2a80      	cmp	r2, #128	; 0x80
 80054dc:	d103      	bne.n	80054e6 <USBD_StdEPReq+0xe4>
                USBD_CtlError(pdev, req);
 80054de:	0028      	movs	r0, r5
 80054e0:	f7ff fd60 	bl	8004fa4 <USBD_CtlError>
 80054e4:	e7a6      	b.n	8005434 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80054e6:	0011      	movs	r1, r2
 80054e8:	0028      	movs	r0, r5
 80054ea:	f000 faf3 	bl	8005ad4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80054ee:	2180      	movs	r1, #128	; 0x80
 80054f0:	0028      	movs	r0, r5
 80054f2:	f000 faef 	bl	8005ad4 <USBD_LL_StallEP>
 80054f6:	e79d      	b.n	8005434 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054f8:	884b      	ldrh	r3, [r1, #2]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d19a      	bne.n	8005434 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 80054fe:	0653      	lsls	r3, r2, #25
 8005500:	d103      	bne.n	800550a <USBD_StdEPReq+0x108>
                USBD_CtlSendStatus(pdev);
 8005502:	0028      	movs	r0, r5
 8005504:	f000 f8d2 	bl	80056ac <USBD_CtlSendStatus>
 8005508:	e794      	b.n	8005434 <USBD_StdEPReq+0x32>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800550a:	0011      	movs	r1, r2
 800550c:	0028      	movs	r0, r5
 800550e:	f000 faea 	bl	8005ae6 <USBD_LL_ClearStallEP>
 8005512:	e7f6      	b.n	8005502 <USBD_StdEPReq+0x100>
          switch (pdev->dev_state)
 8005514:	23a7      	movs	r3, #167	; 0xa7
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	5ceb      	ldrb	r3, [r5, r3]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d006      	beq.n	800552c <USBD_StdEPReq+0x12a>
 800551e:	2b03      	cmp	r3, #3
 8005520:	d029      	beq.n	8005576 <USBD_StdEPReq+0x174>
              USBD_CtlError(pdev, req);
 8005522:	0028      	movs	r0, r5
 8005524:	f7ff fd3e 	bl	8004fa4 <USBD_CtlError>
  return ret;
 8005528:	0034      	movs	r4, r6
              break;
 800552a:	e783      	b.n	8005434 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800552c:	2a00      	cmp	r2, #0
 800552e:	d001      	beq.n	8005534 <USBD_StdEPReq+0x132>
 8005530:	2a80      	cmp	r2, #128	; 0x80
 8005532:	d112      	bne.n	800555a <USBD_StdEPReq+0x158>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005534:	0600      	lsls	r0, r0, #24
 8005536:	d415      	bmi.n	8005564 <USBD_StdEPReq+0x162>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005538:	237f      	movs	r3, #127	; 0x7f
 800553a:	4013      	ands	r3, r2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800553c:	0099      	lsls	r1, r3, #2
 800553e:	18c9      	adds	r1, r1, r3
 8005540:	0089      	lsls	r1, r1, #2
 8005542:	3151      	adds	r1, #81	; 0x51
 8005544:	31ff      	adds	r1, #255	; 0xff
 8005546:	1869      	adds	r1, r5, r1
 8005548:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800554a:	2300      	movs	r3, #0
 800554c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800554e:	2202      	movs	r2, #2
 8005550:	0028      	movs	r0, r5
 8005552:	f000 f87c 	bl	800564e <USBD_CtlSendData>
  return ret;
 8005556:	0034      	movs	r4, r6
              break;
 8005558:	e76c      	b.n	8005434 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800555a:	0028      	movs	r0, r5
 800555c:	f7ff fd22 	bl	8004fa4 <USBD_CtlError>
  return ret;
 8005560:	0034      	movs	r4, r6
                break;
 8005562:	e767      	b.n	8005434 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005564:	237f      	movs	r3, #127	; 0x7f
 8005566:	4013      	ands	r3, r2
 8005568:	0099      	lsls	r1, r3, #2
 800556a:	18c9      	adds	r1, r1, r3
 800556c:	0089      	lsls	r1, r1, #2
 800556e:	3110      	adds	r1, #16
 8005570:	1869      	adds	r1, r5, r1
 8005572:	3104      	adds	r1, #4
 8005574:	e7e9      	b.n	800554a <USBD_StdEPReq+0x148>
              if ((ep_addr & 0x80U) == 0x80U)
 8005576:	b244      	sxtb	r4, r0
 8005578:	0600      	lsls	r0, r0, #24
 800557a:	d422      	bmi.n	80055c2 <USBD_StdEPReq+0x1c0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800557c:	200f      	movs	r0, #15
 800557e:	4010      	ands	r0, r2
 8005580:	0083      	lsls	r3, r0, #2
 8005582:	181b      	adds	r3, r3, r0
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	18eb      	adds	r3, r5, r3
 8005588:	3359      	adds	r3, #89	; 0x59
 800558a:	33ff      	adds	r3, #255	; 0xff
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d025      	beq.n	80055de <USBD_StdEPReq+0x1dc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005592:	2c00      	cmp	r4, #0
 8005594:	db28      	blt.n	80055e8 <USBD_StdEPReq+0x1e6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005596:	237f      	movs	r3, #127	; 0x7f
 8005598:	4013      	ands	r3, r2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800559a:	009c      	lsls	r4, r3, #2
 800559c:	18e4      	adds	r4, r4, r3
 800559e:	00a4      	lsls	r4, r4, #2
 80055a0:	3451      	adds	r4, #81	; 0x51
 80055a2:	34ff      	adds	r4, #255	; 0xff
 80055a4:	192c      	adds	r4, r5, r4
 80055a6:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055a8:	2a00      	cmp	r2, #0
 80055aa:	d001      	beq.n	80055b0 <USBD_StdEPReq+0x1ae>
 80055ac:	2a80      	cmp	r2, #128	; 0x80
 80055ae:	d124      	bne.n	80055fa <USBD_StdEPReq+0x1f8>
                pep->status = 0x0000U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80055b4:	2202      	movs	r2, #2
 80055b6:	0021      	movs	r1, r4
 80055b8:	0028      	movs	r0, r5
 80055ba:	f000 f848 	bl	800564e <USBD_CtlSendData>
  return ret;
 80055be:	0034      	movs	r4, r6
              break;
 80055c0:	e738      	b.n	8005434 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80055c2:	200f      	movs	r0, #15
 80055c4:	4010      	ands	r0, r2
 80055c6:	0083      	lsls	r3, r0, #2
 80055c8:	181b      	adds	r3, r3, r0
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	18eb      	adds	r3, r5, r3
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1de      	bne.n	8005592 <USBD_StdEPReq+0x190>
                  USBD_CtlError(pdev, req);
 80055d4:	0028      	movs	r0, r5
 80055d6:	f7ff fce5 	bl	8004fa4 <USBD_CtlError>
  return ret;
 80055da:	0034      	movs	r4, r6
                  break;
 80055dc:	e72a      	b.n	8005434 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 80055de:	0028      	movs	r0, r5
 80055e0:	f7ff fce0 	bl	8004fa4 <USBD_CtlError>
  return ret;
 80055e4:	0034      	movs	r4, r6
                  break;
 80055e6:	e725      	b.n	8005434 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055e8:	237f      	movs	r3, #127	; 0x7f
 80055ea:	4013      	ands	r3, r2
 80055ec:	009c      	lsls	r4, r3, #2
 80055ee:	18e4      	adds	r4, r4, r3
 80055f0:	00a4      	lsls	r4, r4, #2
 80055f2:	3410      	adds	r4, #16
 80055f4:	192c      	adds	r4, r5, r4
 80055f6:	3404      	adds	r4, #4
 80055f8:	e7d6      	b.n	80055a8 <USBD_StdEPReq+0x1a6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80055fa:	0011      	movs	r1, r2
 80055fc:	0028      	movs	r0, r5
 80055fe:	f000 fa7b 	bl	8005af8 <USBD_LL_IsStallEP>
 8005602:	2800      	cmp	r0, #0
 8005604:	d002      	beq.n	800560c <USBD_StdEPReq+0x20a>
                pep->status = 0x0001U;
 8005606:	2301      	movs	r3, #1
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	e7d3      	b.n	80055b4 <USBD_StdEPReq+0x1b2>
                pep->status = 0x0000U;
 800560c:	2300      	movs	r3, #0
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	e7d0      	b.n	80055b4 <USBD_StdEPReq+0x1b2>

08005612 <USBD_GetString>:
{
 8005612:	b570      	push	{r4, r5, r6, lr}
 8005614:	0004      	movs	r4, r0
 8005616:	000d      	movs	r5, r1
 8005618:	0016      	movs	r6, r2
  if (desc != NULL)
 800561a:	2800      	cmp	r0, #0
 800561c:	d016      	beq.n	800564c <USBD_GetString+0x3a>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800561e:	f7ff fc97 	bl	8004f50 <USBD_GetLen>
 8005622:	3001      	adds	r0, #1
 8005624:	0043      	lsls	r3, r0, #1
 8005626:	b29b      	uxth	r3, r3
 8005628:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800562a:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800562c:	2303      	movs	r3, #3
 800562e:	706b      	strb	r3, [r5, #1]
 8005630:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8005632:	e008      	b.n	8005646 <USBD_GetString+0x34>
      unicode[idx++] = *desc++;
 8005634:	3401      	adds	r4, #1
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 800563c:	3302      	adds	r3, #2
 800563e:	b2db      	uxtb	r3, r3
 8005640:	18aa      	adds	r2, r5, r2
 8005642:	2100      	movs	r1, #0
 8005644:	7011      	strb	r1, [r2, #0]
    while (*desc != '\0')
 8005646:	7820      	ldrb	r0, [r4, #0]
 8005648:	2800      	cmp	r0, #0
 800564a:	d1f3      	bne.n	8005634 <USBD_GetString+0x22>
}
 800564c:	bd70      	pop	{r4, r5, r6, pc}

0800564e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800564e:	b510      	push	{r4, lr}
 8005650:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005652:	22a5      	movs	r2, #165	; 0xa5
 8005654:	0092      	lsls	r2, r2, #2
 8005656:	2402      	movs	r4, #2
 8005658:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 800565a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 800565c:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800565e:	000a      	movs	r2, r1
 8005660:	2100      	movs	r1, #0
 8005662:	f000 fa6b 	bl	8005b3c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005666:	2000      	movs	r0, #0
 8005668:	bd10      	pop	{r4, pc}

0800566a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800566a:	b510      	push	{r4, lr}
 800566c:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800566e:	000a      	movs	r2, r1
 8005670:	2100      	movs	r1, #0
 8005672:	f000 fa63 	bl	8005b3c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005676:	2000      	movs	r0, #0
 8005678:	bd10      	pop	{r4, pc}

0800567a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800567a:	b510      	push	{r4, lr}
 800567c:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800567e:	22a5      	movs	r2, #165	; 0xa5
 8005680:	0092      	lsls	r2, r2, #2
 8005682:	2403      	movs	r4, #3
 8005684:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8005686:	3a39      	subs	r2, #57	; 0x39
 8005688:	3aff      	subs	r2, #255	; 0xff
 800568a:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 800568c:	3204      	adds	r2, #4
 800568e:	5083      	str	r3, [r0, r2]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005690:	000a      	movs	r2, r1
 8005692:	2100      	movs	r1, #0
 8005694:	f000 fa5b 	bl	8005b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005698:	2000      	movs	r0, #0
 800569a:	bd10      	pop	{r4, pc}

0800569c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800569c:	b510      	push	{r4, lr}
 800569e:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80056a0:	000a      	movs	r2, r1
 80056a2:	2100      	movs	r1, #0
 80056a4:	f000 fa53 	bl	8005b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80056a8:	2000      	movs	r0, #0
 80056aa:	bd10      	pop	{r4, pc}

080056ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80056ac:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80056ae:	23a5      	movs	r3, #165	; 0xa5
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	2204      	movs	r2, #4
 80056b4:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80056b6:	2300      	movs	r3, #0
 80056b8:	2200      	movs	r2, #0
 80056ba:	2100      	movs	r1, #0
 80056bc:	f000 fa3e 	bl	8005b3c <USBD_LL_Transmit>

  return USBD_OK;
}
 80056c0:	2000      	movs	r0, #0
 80056c2:	bd10      	pop	{r4, pc}

080056c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80056c4:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80056c6:	23a5      	movs	r3, #165	; 0xa5
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	2205      	movs	r2, #5
 80056cc:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056ce:	2300      	movs	r3, #0
 80056d0:	2200      	movs	r2, #0
 80056d2:	2100      	movs	r1, #0
 80056d4:	f000 fa3b 	bl	8005b4e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80056d8:	2000      	movs	r0, #0
 80056da:	bd10      	pop	{r4, pc}

080056dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80056dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80056de:	4912      	ldr	r1, [pc, #72]	; (8005728 <MX_USB_DEVICE_Init+0x4c>)
 80056e0:	4812      	ldr	r0, [pc, #72]	; (800572c <MX_USB_DEVICE_Init+0x50>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	f7ff fa9c 	bl	8004c20 <USBD_Init>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d111      	bne.n	8005710 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80056ec:	4910      	ldr	r1, [pc, #64]	; (8005730 <MX_USB_DEVICE_Init+0x54>)
 80056ee:	480f      	ldr	r0, [pc, #60]	; (800572c <MX_USB_DEVICE_Init+0x50>)
 80056f0:	f7ff fab2 	bl	8004c58 <USBD_RegisterClass>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d10e      	bne.n	8005716 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80056f8:	490e      	ldr	r1, [pc, #56]	; (8005734 <MX_USB_DEVICE_Init+0x58>)
 80056fa:	480c      	ldr	r0, [pc, #48]	; (800572c <MX_USB_DEVICE_Init+0x50>)
 80056fc:	f7ff fa38 	bl	8004b70 <USBD_CDC_RegisterInterface>
 8005700:	2800      	cmp	r0, #0
 8005702:	d10b      	bne.n	800571c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005704:	4809      	ldr	r0, [pc, #36]	; (800572c <MX_USB_DEVICE_Init+0x50>)
 8005706:	f7ff fab0 	bl	8004c6a <USBD_Start>
 800570a:	2800      	cmp	r0, #0
 800570c:	d109      	bne.n	8005722 <MX_USB_DEVICE_Init+0x46>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800570e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005710:	f7fb ff1a 	bl	8001548 <Error_Handler>
 8005714:	e7ea      	b.n	80056ec <MX_USB_DEVICE_Init+0x10>
    Error_Handler();
 8005716:	f7fb ff17 	bl	8001548 <Error_Handler>
 800571a:	e7ed      	b.n	80056f8 <MX_USB_DEVICE_Init+0x1c>
    Error_Handler();
 800571c:	f7fb ff14 	bl	8001548 <Error_Handler>
 8005720:	e7f0      	b.n	8005704 <MX_USB_DEVICE_Init+0x28>
    Error_Handler();
 8005722:	f7fb ff11 	bl	8001548 <Error_Handler>
}
 8005726:	e7f2      	b.n	800570e <MX_USB_DEVICE_Init+0x32>
 8005728:	2000012c 	.word	0x2000012c
 800572c:	20000244 	.word	0x20000244
 8005730:	2000000c 	.word	0x2000000c
 8005734:	2000011c 	.word	0x2000011c

08005738 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005738:	2000      	movs	r0, #0
 800573a:	4770      	bx	lr

0800573c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800573c:	2000      	movs	r0, #0
 800573e:	4770      	bx	lr

08005740 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005740:	b510      	push	{r4, lr}
 8005742:	0001      	movs	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005744:	4c04      	ldr	r4, [pc, #16]	; (8005758 <CDC_Receive_FS+0x18>)
 8005746:	0020      	movs	r0, r4
 8005748:	f7ff fa26 	bl	8004b98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800574c:	0020      	movs	r0, r4
 800574e:	f7ff fa49 	bl	8004be4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005752:	2000      	movs	r0, #0
 8005754:	bd10      	pop	{r4, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	20000244 	.word	0x20000244

0800575c <CDC_Init_FS>:
{
 800575c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800575e:	4906      	ldr	r1, [pc, #24]	; (8005778 <CDC_Init_FS+0x1c>)
 8005760:	4c06      	ldr	r4, [pc, #24]	; (800577c <CDC_Init_FS+0x20>)
 8005762:	2200      	movs	r2, #0
 8005764:	0020      	movs	r0, r4
 8005766:	f7ff fa0c 	bl	8004b82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800576a:	4905      	ldr	r1, [pc, #20]	; (8005780 <CDC_Init_FS+0x24>)
 800576c:	0020      	movs	r0, r4
 800576e:	f7ff fa13 	bl	8004b98 <USBD_CDC_SetRxBuffer>
}
 8005772:	2000      	movs	r0, #0
 8005774:	bd10      	pop	{r4, pc}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	20000588 	.word	0x20000588
 800577c:	20000244 	.word	0x20000244
 8005780:	20000508 	.word	0x20000508

08005784 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005784:	b510      	push	{r4, lr}
 8005786:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005788:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <CDC_Transmit_FS+0x2c>)
 800578a:	21ae      	movs	r1, #174	; 0xae
 800578c:	0089      	lsls	r1, r1, #2
 800578e:	5859      	ldr	r1, [r3, r1]
  if (hcdc->TxState != 0){
 8005790:	2385      	movs	r3, #133	; 0x85
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	58cb      	ldr	r3, [r1, r3]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <CDC_Transmit_FS+0x1a>
    return USBD_BUSY;
 800579a:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800579c:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800579e:	4c04      	ldr	r4, [pc, #16]	; (80057b0 <CDC_Transmit_FS+0x2c>)
 80057a0:	0001      	movs	r1, r0
 80057a2:	0020      	movs	r0, r4
 80057a4:	f7ff f9ed 	bl	8004b82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80057a8:	0020      	movs	r0, r4
 80057aa:	f7ff f9fc 	bl	8004ba6 <USBD_CDC_TransmitPacket>
  return result;
 80057ae:	e7f5      	b.n	800579c <CDC_Transmit_FS+0x18>
 80057b0:	20000244 	.word	0x20000244

080057b4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80057b4:	2312      	movs	r3, #18
 80057b6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
 80057b8:	4800      	ldr	r0, [pc, #0]	; (80057bc <USBD_FS_DeviceDescriptor+0x8>)
}
 80057ba:	4770      	bx	lr
 80057bc:	20000148 	.word	0x20000148

080057c0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80057c0:	2304      	movs	r3, #4
 80057c2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
 80057c4:	4800      	ldr	r0, [pc, #0]	; (80057c8 <USBD_FS_LangIDStrDescriptor+0x8>)
}
 80057c6:	4770      	bx	lr
 80057c8:	2000015c 	.word	0x2000015c

080057cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80057cc:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80057ce:	2300      	movs	r3, #0
 80057d0:	e00a      	b.n	80057e8 <IntToUnicode+0x1c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057d2:	005d      	lsls	r5, r3, #1
 80057d4:	3437      	adds	r4, #55	; 0x37
 80057d6:	554c      	strb	r4, [r1, r5]
    }

    value = value << 4;
 80057d8:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80057da:	005c      	lsls	r4, r3, #1
 80057dc:	3401      	adds	r4, #1
 80057de:	190c      	adds	r4, r1, r4
 80057e0:	2500      	movs	r5, #0
 80057e2:	7025      	strb	r5, [r4, #0]
  for (idx = 0; idx < len; idx++)
 80057e4:	3301      	adds	r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d206      	bcs.n	80057fa <IntToUnicode+0x2e>
    if (((value >> 28)) < 0xA)
 80057ec:	0f04      	lsrs	r4, r0, #28
 80057ee:	2c09      	cmp	r4, #9
 80057f0:	d8ef      	bhi.n	80057d2 <IntToUnicode+0x6>
      pbuf[2 * idx] = (value >> 28) + '0';
 80057f2:	005d      	lsls	r5, r3, #1
 80057f4:	3430      	adds	r4, #48	; 0x30
 80057f6:	554c      	strb	r4, [r1, r5]
 80057f8:	e7ee      	b.n	80057d8 <IntToUnicode+0xc>
  }
}
 80057fa:	bd30      	pop	{r4, r5, pc}

080057fc <Get_SerialNum>:
{
 80057fc:	b570      	push	{r4, r5, r6, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <Get_SerialNum+0x30>)
 8005800:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <Get_SerialNum+0x34>)
 8005804:	681d      	ldr	r5, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <Get_SerialNum+0x38>)
 8005808:	681b      	ldr	r3, [r3, #0]
  deviceserial0 += deviceserial2;
 800580a:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 800580c:	2800      	cmp	r0, #0
 800580e:	d100      	bne.n	8005812 <Get_SerialNum+0x16>
}
 8005810:	bd70      	pop	{r4, r5, r6, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005812:	4c09      	ldr	r4, [pc, #36]	; (8005838 <Get_SerialNum+0x3c>)
 8005814:	1ca1      	adds	r1, r4, #2
 8005816:	2208      	movs	r2, #8
 8005818:	f7ff ffd8 	bl	80057cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800581c:	0021      	movs	r1, r4
 800581e:	3112      	adds	r1, #18
 8005820:	2204      	movs	r2, #4
 8005822:	0028      	movs	r0, r5
 8005824:	f7ff ffd2 	bl	80057cc <IntToUnicode>
}
 8005828:	e7f2      	b.n	8005810 <Get_SerialNum+0x14>
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	1ffff7ac 	.word	0x1ffff7ac
 8005830:	1ffff7b0 	.word	0x1ffff7b0
 8005834:	1ffff7b4 	.word	0x1ffff7b4
 8005838:	20000160 	.word	0x20000160

0800583c <USBD_FS_SerialStrDescriptor>:
{
 800583c:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800583e:	231a      	movs	r3, #26
 8005840:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005842:	f7ff ffdb 	bl	80057fc <Get_SerialNum>
  return (uint8_t *) USBD_StringSerial;
 8005846:	4801      	ldr	r0, [pc, #4]	; (800584c <USBD_FS_SerialStrDescriptor+0x10>)
}
 8005848:	bd10      	pop	{r4, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	20000160 	.word	0x20000160

08005850 <USBD_FS_ProductStrDescriptor>:
{
 8005850:	b510      	push	{r4, lr}
 8005852:	000a      	movs	r2, r1
  if(speed == 0)
 8005854:	2800      	cmp	r0, #0
 8005856:	d105      	bne.n	8005864 <USBD_FS_ProductStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005858:	4905      	ldr	r1, [pc, #20]	; (8005870 <USBD_FS_ProductStrDescriptor+0x20>)
 800585a:	4806      	ldr	r0, [pc, #24]	; (8005874 <USBD_FS_ProductStrDescriptor+0x24>)
 800585c:	f7ff fed9 	bl	8005612 <USBD_GetString>
  return USBD_StrDesc;
 8005860:	4803      	ldr	r0, [pc, #12]	; (8005870 <USBD_FS_ProductStrDescriptor+0x20>)
}
 8005862:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005864:	4902      	ldr	r1, [pc, #8]	; (8005870 <USBD_FS_ProductStrDescriptor+0x20>)
 8005866:	4803      	ldr	r0, [pc, #12]	; (8005874 <USBD_FS_ProductStrDescriptor+0x24>)
 8005868:	f7ff fed3 	bl	8005612 <USBD_GetString>
 800586c:	e7f8      	b.n	8005860 <USBD_FS_ProductStrDescriptor+0x10>
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	20000608 	.word	0x20000608
 8005874:	08005c7c 	.word	0x08005c7c

08005878 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005878:	b510      	push	{r4, lr}
 800587a:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800587c:	4c03      	ldr	r4, [pc, #12]	; (800588c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800587e:	4804      	ldr	r0, [pc, #16]	; (8005890 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005880:	0021      	movs	r1, r4
 8005882:	f7ff fec6 	bl	8005612 <USBD_GetString>
}
 8005886:	0020      	movs	r0, r4
 8005888:	bd10      	pop	{r4, pc}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	20000608 	.word	0x20000608
 8005890:	08005c94 	.word	0x08005c94

08005894 <USBD_FS_ConfigStrDescriptor>:
{
 8005894:	b510      	push	{r4, lr}
 8005896:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005898:	2800      	cmp	r0, #0
 800589a:	d105      	bne.n	80058a8 <USBD_FS_ConfigStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800589c:	4905      	ldr	r1, [pc, #20]	; (80058b4 <USBD_FS_ConfigStrDescriptor+0x20>)
 800589e:	4806      	ldr	r0, [pc, #24]	; (80058b8 <USBD_FS_ConfigStrDescriptor+0x24>)
 80058a0:	f7ff feb7 	bl	8005612 <USBD_GetString>
  return USBD_StrDesc;
 80058a4:	4803      	ldr	r0, [pc, #12]	; (80058b4 <USBD_FS_ConfigStrDescriptor+0x20>)
}
 80058a6:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80058a8:	4902      	ldr	r1, [pc, #8]	; (80058b4 <USBD_FS_ConfigStrDescriptor+0x20>)
 80058aa:	4803      	ldr	r0, [pc, #12]	; (80058b8 <USBD_FS_ConfigStrDescriptor+0x24>)
 80058ac:	f7ff feb1 	bl	8005612 <USBD_GetString>
 80058b0:	e7f8      	b.n	80058a4 <USBD_FS_ConfigStrDescriptor+0x10>
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	20000608 	.word	0x20000608
 80058b8:	08005ca8 	.word	0x08005ca8

080058bc <USBD_FS_InterfaceStrDescriptor>:
{
 80058bc:	b510      	push	{r4, lr}
 80058be:	000a      	movs	r2, r1
  if(speed == 0)
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d105      	bne.n	80058d0 <USBD_FS_InterfaceStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80058c4:	4905      	ldr	r1, [pc, #20]	; (80058dc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80058c6:	4806      	ldr	r0, [pc, #24]	; (80058e0 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80058c8:	f7ff fea3 	bl	8005612 <USBD_GetString>
  return USBD_StrDesc;
 80058cc:	4803      	ldr	r0, [pc, #12]	; (80058dc <USBD_FS_InterfaceStrDescriptor+0x20>)
}
 80058ce:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80058d0:	4902      	ldr	r1, [pc, #8]	; (80058dc <USBD_FS_InterfaceStrDescriptor+0x20>)
 80058d2:	4803      	ldr	r0, [pc, #12]	; (80058e0 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80058d4:	f7ff fe9d 	bl	8005612 <USBD_GetString>
 80058d8:	e7f8      	b.n	80058cc <USBD_FS_InterfaceStrDescriptor+0x10>
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	20000608 	.word	0x20000608
 80058e0:	08005cb4 	.word	0x08005cb4

080058e4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80058e4:	2802      	cmp	r0, #2
 80058e6:	d004      	beq.n	80058f2 <USBD_Get_USB_Status+0xe>
 80058e8:	d805      	bhi.n	80058f6 <USBD_Get_USB_Status+0x12>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d000      	beq.n	80058f0 <USBD_Get_USB_Status+0xc>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80058ee:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80058f0:	4770      	bx	lr
      usb_status = USBD_BUSY;
 80058f2:	2001      	movs	r0, #1
 80058f4:	e7fc      	b.n	80058f0 <USBD_Get_USB_Status+0xc>
      usb_status = USBD_FAIL;
 80058f6:	2002      	movs	r0, #2
 80058f8:	e7fa      	b.n	80058f0 <USBD_Get_USB_Status+0xc>

080058fa <SystemClockConfig_Resume>:
{
 80058fa:	b510      	push	{r4, lr}
  SystemClock_Config();
 80058fc:	f7fb fea6 	bl	800164c <SystemClock_Config>
}
 8005900:	bd10      	pop	{r4, pc}
	...

08005904 <HAL_PCD_MspInit>:
{
 8005904:	b500      	push	{lr}
 8005906:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8005908:	6802      	ldr	r2, [r0, #0]
 800590a:	4b0c      	ldr	r3, [pc, #48]	; (800593c <HAL_PCD_MspInit+0x38>)
 800590c:	429a      	cmp	r2, r3
 800590e:	d001      	beq.n	8005914 <HAL_PCD_MspInit+0x10>
}
 8005910:	b003      	add	sp, #12
 8005912:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <HAL_PCD_MspInit+0x3c>)
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	2180      	movs	r1, #128	; 0x80
 800591a:	0409      	lsls	r1, r1, #16
 800591c:	430a      	orrs	r2, r1
 800591e:	61da      	str	r2, [r3, #28]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	400b      	ands	r3, r1
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005928:	2200      	movs	r2, #0
 800592a:	2100      	movs	r1, #0
 800592c:	201f      	movs	r0, #31
 800592e:	f7fc faf1 	bl	8001f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8005932:	201f      	movs	r0, #31
 8005934:	f7fc fb1e 	bl	8001f74 <HAL_NVIC_EnableIRQ>
}
 8005938:	e7ea      	b.n	8005910 <HAL_PCD_MspInit+0xc>
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	40005c00 	.word	0x40005c00
 8005940:	40021000 	.word	0x40021000

08005944 <HAL_PCD_SetupStageCallback>:
{
 8005944:	b510      	push	{r4, lr}
 8005946:	0001      	movs	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005948:	23bc      	movs	r3, #188	; 0xbc
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	58c0      	ldr	r0, [r0, r3]
 800594e:	3b40      	subs	r3, #64	; 0x40
 8005950:	469c      	mov	ip, r3
 8005952:	4461      	add	r1, ip
 8005954:	f7ff f9a6 	bl	8004ca4 <USBD_LL_SetupStage>
}
 8005958:	bd10      	pop	{r4, pc}

0800595a <HAL_PCD_DataOutStageCallback>:
{
 800595a:	b510      	push	{r4, lr}
 800595c:	0003      	movs	r3, r0
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800595e:	22bc      	movs	r2, #188	; 0xbc
 8005960:	0092      	lsls	r2, r2, #2
 8005962:	5880      	ldr	r0, [r0, r2]
 8005964:	008a      	lsls	r2, r1, #2
 8005966:	1852      	adds	r2, r2, r1
 8005968:	00d2      	lsls	r2, r2, #3
 800596a:	189b      	adds	r3, r3, r2
 800596c:	337d      	adds	r3, #125	; 0x7d
 800596e:	33ff      	adds	r3, #255	; 0xff
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	f7ff f9c9 	bl	8004d08 <USBD_LL_DataOutStage>
}
 8005976:	bd10      	pop	{r4, pc}

08005978 <HAL_PCD_DataInStageCallback>:
{
 8005978:	b510      	push	{r4, lr}
 800597a:	0003      	movs	r3, r0
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800597c:	22bc      	movs	r2, #188	; 0xbc
 800597e:	0092      	lsls	r2, r2, #2
 8005980:	5880      	ldr	r0, [r0, r2]
 8005982:	008a      	lsls	r2, r1, #2
 8005984:	1852      	adds	r2, r2, r1
 8005986:	00d2      	lsls	r2, r2, #3
 8005988:	189b      	adds	r3, r3, r2
 800598a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800598c:	f7ff fa0e 	bl	8004dac <USBD_LL_DataInStage>
}
 8005990:	bd10      	pop	{r4, pc}

08005992 <HAL_PCD_SOFCallback>:
{
 8005992:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005994:	23bc      	movs	r3, #188	; 0xbc
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	58c0      	ldr	r0, [r0, r3]
 800599a:	f7ff fac9 	bl	8004f30 <USBD_LL_SOF>
}
 800599e:	bd10      	pop	{r4, pc}

080059a0 <HAL_PCD_ResetCallback>:
{
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80059a4:	6883      	ldr	r3, [r0, #8]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d109      	bne.n	80059be <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80059aa:	25bc      	movs	r5, #188	; 0xbc
 80059ac:	00ad      	lsls	r5, r5, #2
 80059ae:	5960      	ldr	r0, [r4, r5]
 80059b0:	2101      	movs	r1, #1
 80059b2:	f7ff fa9f 	bl	8004ef4 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80059b6:	5960      	ldr	r0, [r4, r5]
 80059b8:	f7ff fa6d 	bl	8004e96 <USBD_LL_Reset>
}
 80059bc:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80059be:	f7fb fdc3 	bl	8001548 <Error_Handler>
 80059c2:	e7f2      	b.n	80059aa <HAL_PCD_ResetCallback+0xa>

080059c4 <HAL_PCD_SuspendCallback>:
{
 80059c4:	b510      	push	{r4, lr}
 80059c6:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80059c8:	23bc      	movs	r3, #188	; 0xbc
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	58c0      	ldr	r0, [r0, r3]
 80059ce:	f7ff fa95 	bl	8004efc <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80059d2:	69a3      	ldr	r3, [r4, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80059d8:	4a02      	ldr	r2, [pc, #8]	; (80059e4 <HAL_PCD_SuspendCallback+0x20>)
 80059da:	6913      	ldr	r3, [r2, #16]
 80059dc:	2106      	movs	r1, #6
 80059de:	430b      	orrs	r3, r1
 80059e0:	6113      	str	r3, [r2, #16]
}
 80059e2:	bd10      	pop	{r4, pc}
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <HAL_PCD_ResumeCallback>:
{
 80059e8:	b510      	push	{r4, lr}
 80059ea:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80059ec:	6983      	ldr	r3, [r0, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d105      	bne.n	80059fe <HAL_PCD_ResumeCallback+0x16>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80059f2:	23bc      	movs	r3, #188	; 0xbc
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	58e0      	ldr	r0, [r4, r3]
 80059f8:	f7ff fa8c 	bl	8004f14 <USBD_LL_Resume>
}
 80059fc:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80059fe:	4a04      	ldr	r2, [pc, #16]	; (8005a10 <HAL_PCD_ResumeCallback+0x28>)
 8005a00:	6913      	ldr	r3, [r2, #16]
 8005a02:	2106      	movs	r1, #6
 8005a04:	438b      	bics	r3, r1
 8005a06:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8005a08:	f7ff ff77 	bl	80058fa <SystemClockConfig_Resume>
 8005a0c:	e7f1      	b.n	80059f2 <HAL_PCD_ResumeCallback+0xa>
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	e000ed00 	.word	0xe000ed00

08005a14 <USBD_LL_Init>:
{
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8005a18:	481d      	ldr	r0, [pc, #116]	; (8005a90 <USBD_LL_Init+0x7c>)
 8005a1a:	23bc      	movs	r3, #188	; 0xbc
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 8005a20:	3b30      	subs	r3, #48	; 0x30
 8005a22:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8005a24:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <USBD_LL_Init+0x80>)
 8005a26:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005a28:	2308      	movs	r3, #8
 8005a2a:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005a2c:	3b06      	subs	r3, #6
 8005a2e:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005a30:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005a36:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005a38:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005a3a:	f7fc fce9 	bl	8002410 <HAL_PCD_Init>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d123      	bne.n	8005a8a <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005a42:	25b0      	movs	r5, #176	; 0xb0
 8005a44:	00ad      	lsls	r5, r5, #2
 8005a46:	5960      	ldr	r0, [r4, r5]
 8005a48:	2318      	movs	r3, #24
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f7fd fc06 	bl	800325e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005a52:	5960      	ldr	r0, [r4, r5]
 8005a54:	2358      	movs	r3, #88	; 0x58
 8005a56:	2200      	movs	r2, #0
 8005a58:	2180      	movs	r1, #128	; 0x80
 8005a5a:	f7fd fc00 	bl	800325e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005a5e:	5960      	ldr	r0, [r4, r5]
 8005a60:	23c0      	movs	r3, #192	; 0xc0
 8005a62:	2200      	movs	r2, #0
 8005a64:	2181      	movs	r1, #129	; 0x81
 8005a66:	f7fd fbfa 	bl	800325e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005a6a:	5960      	ldr	r0, [r4, r5]
 8005a6c:	2388      	movs	r3, #136	; 0x88
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	2200      	movs	r2, #0
 8005a72:	2101      	movs	r1, #1
 8005a74:	f7fd fbf3 	bl	800325e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005a78:	5960      	ldr	r0, [r4, r5]
 8005a7a:	2380      	movs	r3, #128	; 0x80
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2182      	movs	r1, #130	; 0x82
 8005a82:	f7fd fbec 	bl	800325e <HAL_PCDEx_PMAConfig>
}
 8005a86:	2000      	movs	r0, #0
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8005a8a:	f7fb fd5d 	bl	8001548 <Error_Handler>
 8005a8e:	e7d8      	b.n	8005a42 <USBD_LL_Init+0x2e>
 8005a90:	20000808 	.word	0x20000808
 8005a94:	40005c00 	.word	0x40005c00

08005a98 <USBD_LL_Start>:
{
 8005a98:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a9a:	23b0      	movs	r3, #176	; 0xb0
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	58c0      	ldr	r0, [r0, r3]
 8005aa0:	f7fc fd26 	bl	80024f0 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005aa4:	f7ff ff1e 	bl	80058e4 <USBD_Get_USB_Status>
}
 8005aa8:	bd10      	pop	{r4, pc}

08005aaa <USBD_LL_OpenEP>:
{
 8005aaa:	b510      	push	{r4, lr}
 8005aac:	0014      	movs	r4, r2
 8005aae:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005ab0:	23b0      	movs	r3, #176	; 0xb0
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	58c0      	ldr	r0, [r0, r3]
 8005ab6:	0023      	movs	r3, r4
 8005ab8:	f7fd fa98 	bl	8002fec <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005abc:	f7ff ff12 	bl	80058e4 <USBD_Get_USB_Status>
}
 8005ac0:	bd10      	pop	{r4, pc}

08005ac2 <USBD_LL_CloseEP>:
{
 8005ac2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ac4:	23b0      	movs	r3, #176	; 0xb0
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	58c0      	ldr	r0, [r0, r3]
 8005aca:	f7fd faca 	bl	8003062 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ace:	f7ff ff09 	bl	80058e4 <USBD_Get_USB_Status>
}
 8005ad2:	bd10      	pop	{r4, pc}

08005ad4 <USBD_LL_StallEP>:
{
 8005ad4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005ad6:	23b0      	movs	r3, #176	; 0xb0
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	58c0      	ldr	r0, [r0, r3]
 8005adc:	f7fd fb4b 	bl	8003176 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ae0:	f7ff ff00 	bl	80058e4 <USBD_Get_USB_Status>
}
 8005ae4:	bd10      	pop	{r4, pc}

08005ae6 <USBD_LL_ClearStallEP>:
{
 8005ae6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005ae8:	23b0      	movs	r3, #176	; 0xb0
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	58c0      	ldr	r0, [r0, r3]
 8005aee:	f7fd fb79 	bl	80031e4 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005af2:	f7ff fef7 	bl	80058e4 <USBD_Get_USB_Status>
}
 8005af6:	bd10      	pop	{r4, pc}

08005af8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005af8:	23b0      	movs	r3, #176	; 0xb0
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8005afe:	b24a      	sxtb	r2, r1
 8005b00:	2a00      	cmp	r2, #0
 8005b02:	db09      	blt.n	8005b18 <USBD_LL_IsStallEP+0x20>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005b04:	227f      	movs	r2, #127	; 0x7f
 8005b06:	4011      	ands	r1, r2
 8005b08:	008a      	lsls	r2, r1, #2
 8005b0a:	1852      	adds	r2, r2, r1
 8005b0c:	00d2      	lsls	r2, r2, #3
 8005b0e:	189b      	adds	r3, r3, r2
 8005b10:	336b      	adds	r3, #107	; 0x6b
 8005b12:	33ff      	adds	r3, #255	; 0xff
 8005b14:	7818      	ldrb	r0, [r3, #0]
}
 8005b16:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005b18:	227f      	movs	r2, #127	; 0x7f
 8005b1a:	4011      	ands	r1, r2
 8005b1c:	3101      	adds	r1, #1
 8005b1e:	008a      	lsls	r2, r1, #2
 8005b20:	1852      	adds	r2, r2, r1
 8005b22:	00d2      	lsls	r2, r2, #3
 8005b24:	189b      	adds	r3, r3, r2
 8005b26:	7898      	ldrb	r0, [r3, #2]
 8005b28:	e7f5      	b.n	8005b16 <USBD_LL_IsStallEP+0x1e>

08005b2a <USBD_LL_SetUSBAddress>:
{
 8005b2a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005b2c:	23b0      	movs	r3, #176	; 0xb0
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	58c0      	ldr	r0, [r0, r3]
 8005b32:	f7fd f985 	bl	8002e40 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b36:	f7ff fed5 	bl	80058e4 <USBD_Get_USB_Status>
}
 8005b3a:	bd10      	pop	{r4, pc}

08005b3c <USBD_LL_Transmit>:
{
 8005b3c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005b3e:	24b0      	movs	r4, #176	; 0xb0
 8005b40:	00a4      	lsls	r4, r4, #2
 8005b42:	5900      	ldr	r0, [r0, r4]
 8005b44:	f7fd faf0 	bl	8003128 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b48:	f7ff fecc 	bl	80058e4 <USBD_Get_USB_Status>
}
 8005b4c:	bd10      	pop	{r4, pc}

08005b4e <USBD_LL_PrepareReceive>:
{
 8005b4e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005b50:	24b0      	movs	r4, #176	; 0xb0
 8005b52:	00a4      	lsls	r4, r4, #2
 8005b54:	5900      	ldr	r0, [r0, r4]
 8005b56:	f7fd fab8 	bl	80030ca <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b5a:	f7ff fec3 	bl	80058e4 <USBD_Get_USB_Status>
}
 8005b5e:	bd10      	pop	{r4, pc}

08005b60 <USBD_LL_GetRxDataSize>:
{
 8005b60:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005b62:	23b0      	movs	r3, #176	; 0xb0
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	58c0      	ldr	r0, [r0, r3]
 8005b68:	f7fd fad4 	bl	8003114 <HAL_PCD_EP_GetRxCount>
}
 8005b6c:	bd10      	pop	{r4, pc}
	...

08005b70 <USBD_static_malloc>:
  return mem;
 8005b70:	4800      	ldr	r0, [pc, #0]	; (8005b74 <USBD_static_malloc+0x4>)
}
 8005b72:	4770      	bx	lr
 8005b74:	20000afc 	.word	0x20000afc

08005b78 <USBD_static_free>:
}
 8005b78:	4770      	bx	lr

08005b7a <memset>:
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	1882      	adds	r2, r0, r2
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d100      	bne.n	8005b84 <memset+0xa>
 8005b82:	4770      	bx	lr
 8005b84:	7019      	strb	r1, [r3, #0]
 8005b86:	3301      	adds	r3, #1
 8005b88:	e7f9      	b.n	8005b7e <memset+0x4>
	...

08005b8c <__libc_init_array>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	2600      	movs	r6, #0
 8005b90:	4c0c      	ldr	r4, [pc, #48]	; (8005bc4 <__libc_init_array+0x38>)
 8005b92:	4d0d      	ldr	r5, [pc, #52]	; (8005bc8 <__libc_init_array+0x3c>)
 8005b94:	1b64      	subs	r4, r4, r5
 8005b96:	10a4      	asrs	r4, r4, #2
 8005b98:	42a6      	cmp	r6, r4
 8005b9a:	d109      	bne.n	8005bb0 <__libc_init_array+0x24>
 8005b9c:	2600      	movs	r6, #0
 8005b9e:	f000 f819 	bl	8005bd4 <_init>
 8005ba2:	4c0a      	ldr	r4, [pc, #40]	; (8005bcc <__libc_init_array+0x40>)
 8005ba4:	4d0a      	ldr	r5, [pc, #40]	; (8005bd0 <__libc_init_array+0x44>)
 8005ba6:	1b64      	subs	r4, r4, r5
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	42a6      	cmp	r6, r4
 8005bac:	d105      	bne.n	8005bba <__libc_init_array+0x2e>
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	00b3      	lsls	r3, r6, #2
 8005bb2:	58eb      	ldr	r3, [r5, r3]
 8005bb4:	4798      	blx	r3
 8005bb6:	3601      	adds	r6, #1
 8005bb8:	e7ee      	b.n	8005b98 <__libc_init_array+0xc>
 8005bba:	00b3      	lsls	r3, r6, #2
 8005bbc:	58eb      	ldr	r3, [r5, r3]
 8005bbe:	4798      	blx	r3
 8005bc0:	3601      	adds	r6, #1
 8005bc2:	e7f2      	b.n	8005baa <__libc_init_array+0x1e>
 8005bc4:	08005cc4 	.word	0x08005cc4
 8005bc8:	08005cc4 	.word	0x08005cc4
 8005bcc:	08005cc8 	.word	0x08005cc8
 8005bd0:	08005cc4 	.word	0x08005cc4

08005bd4 <_init>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bda:	bc08      	pop	{r3}
 8005bdc:	469e      	mov	lr, r3
 8005bde:	4770      	bx	lr

08005be0 <_fini>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be6:	bc08      	pop	{r3}
 8005be8:	469e      	mov	lr, r3
 8005bea:	4770      	bx	lr
